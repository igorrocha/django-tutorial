#
# Matías Bordese <mbordese@gmail.com>, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django tutorial 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-11 17:36-0300\n"
"PO-Revision-Date: 2015-04-13 16:20-0300\n"
"Last-Translator: Matías Bordese <mbordese@gmail.com>\n"
"Language: Spanish\n"
"Language-Team: Spanish <es>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Gtranslator 2.91.6\n"

#: ../../intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr "Escribiendo tu primer parche para Django"

#: ../../intro/contributing.txt:6
msgid "Introduction"
msgstr "Introducción"

#: ../../intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature "
"you want added."
msgstr ""
"Interesado en devolver algo a la comunidad? Quizás hayas encontrado un bug "
"en Django que te gustaría ver arreglado, o quizás hay alguna funcionalidad "
"que te gustaría ver incorporada."

#: ../../intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""
"Constribuir con Django es la mejor manera de ver nuestras preocupaciones "
"tenidas en cuenta. Puede parece intimidante al principio, pero es realmente "
"simple. Vamos a recorrer el proceso completo para aprender mediante un "
"ejemplo."

#: ../../intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr "Para quién es este tutorial?"

#: ../../intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of "
"how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app </intro/"
"tutorial01>`. In addition, you should have a good understanding of Python "
"itself. But if you don't, `Dive Into Python`__ is a fantastic (and free) "
"online book for beginning Python programmers."
msgstr ""
"Para este tutorial esperamos que tengas al menos un conocimiento básico "
"sobre cómo funciona Django. Esto significa que deberías estar cómodo "
"recorriendo los tutoriales existentes, :doc:`Escribiendo tu primera Django "
"app <tutorial01>`. Además, deberías tener una buena base de Python. Si no es "
"el caso, `Dive Into Python`__ es un libro online fantástico (y gratis) para "
"aquellos que comienzan con Python."

#: ../../intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get "
"started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""
"Para aquellos que no estén familiarizados con sistemas de control de "
"versiones y Trac, van a encontrar en este tutorial y sus links la "
"información suficiente para empezar. Sin embargo, probablemente quieras "
"empezar a leer más sobre estas diferentes herramientas si tu plan es "
"contribuir con Django regularmente."

#: ../../intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""
"En gran medida este tutorial trata de explicar tanto como es posible para "
"que resulte útil para una amplia audiencia."

#: ../../intro/contributing.txt:34 ../../intro/tutorial01.txt:35
msgid "Where to get help:"
msgstr "Dónde encontrar ayuda:"

#: ../../intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-developers <https://docs.djangoproject.com/en/dev/internals/"
"mailing-lists/#django-developers-mailing-list>`_ or drop by `#django-dev on "
"irc.freenode.net`__ to chat with other Django users who might be able to "
"help."
msgstr ""
"Si tuvieras algún problema durante este tutorial, por favor posteá un "
"mensaje en `django-developers <https://docs.djangoproject.com/en/dev/"
"internals/mailing-lists/#django-developers-mailing-list>`_ o unite a "
"`#django-dev en irc.freenode.net`__ para hablar con otros usuarios de Django "
"que quizás puedan ayudar (ambos en inglés)."

#: ../../intro/contributing.txt:44
msgid "What does this tutorial cover?"
msgstr "Qué cubre este tutorial?"

#: ../../intro/contributing.txt:46
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""
"Vamos a recorrer el camino para contribuir un patch a Django por primera "
"vez. Al final de este tutorial, deberías tener un conocimiento básico sobre "
"las herramientas y los procesos involucrados. Específicamente, cubriremos lo "
"siguiente:"

#: ../../intro/contributing.txt:50
msgid "Installing Git."
msgstr "Instalar Git."

#: ../../intro/contributing.txt:51
msgid "How to download a development copy of Django."
msgstr "Bajar una copia de desarrollo de Django."

#: ../../intro/contributing.txt:52
msgid "Running Django's test suite."
msgstr "Correr la test suite de Django."

#: ../../intro/contributing.txt:53
msgid "Writing a test for your patch."
msgstr "Escribir un test para el patch."

#: ../../intro/contributing.txt:54
msgid "Writing the code for your patch."
msgstr "Escribir el código del patch."

#: ../../intro/contributing.txt:55
msgid "Testing your patch."
msgstr "Testear el patch."

#: ../../intro/contributing.txt:56
msgid "Generating a patch file for your changes."
msgstr "Generar un archivo con los cambios del patch."

#: ../../intro/contributing.txt:57
msgid "Where to look for more information."
msgstr "Dónde buscar más información."

#: ../../intro/contributing.txt:59
msgid ""
"Once you're done with the tutorial, you can look through the rest of "
"`Django's documentation on contributing <https://docs.djangoproject.com/"
"en/1.8/internals/contributing/index>`_. It contains lots of great "
"information and is a must read for anyone who'd like to become a regular "
"contributor to Django. If you've got questions, it's probably got the "
"answers."
msgstr ""
"Una vez que terminés este tutorial, podés ver el resto de la `documentación "
"sobre contribuir con Django <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/index>`_. Contiene mucha más información y es algo que uno debe "
"leer si quiere convertirse en un contribuidor regular de Django. Si tenés "
"preguntas, probablemente tendrá las respuestas."

#: ../../intro/contributing.txt:66
msgid "Installing Git"
msgstr "Instalar Git"

#: ../../intro/contributing.txt:68
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""
"Para este tutorial, necesitaremos tener Git instalado para bajar la versión "
"de desarrollo de Django y generar los archivos con los cambios de nuestro "
"patch."

#: ../../intro/contributing.txt:72
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr ""
"Para chequear si tenemos Git instalado o no, escribimos ``git`` en la línea "
"de comandos. Si obtenemos un mensaje diciendo que este comando no se "
"encontró, tendremos que bajar e instalar Git, ver `Git's download page`__."

#: ../../intro/contributing.txt:76
msgid ""
"If you're not that familiar with Git, you can always find out more about its "
"commands (once it's installed) by typing ``git help`` into the command line."
msgstr ""
"Si no estás familiarizado con Git, siempre se puede saber más sobre los "
"comandos (una vez instalado) tipeando ``git help`` en la línea de comandos."

#: ../../intro/contributing.txt:82
msgid "Getting a copy of Django's development version"
msgstr "Obtener una copia de la versión de desarrollo de Django"

#: ../../intro/contributing.txt:84
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""
"El primer paso para contribuir con Django es obtener una copia del código "
"fuente. En la línea de comandos, usamos el comando ``cd`` para navegar al "
"directorio donde queremos que viva nuestra copia local de Django."

#: ../../intro/contributing.txt:88
msgid ""
"Download the Django source code repository using the following command::"
msgstr "Bajamos el código fuente de Django usando el siguiente comando::"

#: ../../intro/contributing.txt:94
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr "Para usuarios que quieran usar `virtualenv`__, se puede usar::"

#: ../../intro/contributing.txt:98
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``) "
"to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""
"(donde ``django`` es el directorio del repositorio clonado que contiene el "
"archivo ``setup.py``) para linkear nuestra copia local en el entorno del "
"virtualenv. Es una gran opción para aislar nuestra copia de desarrollo de "
"Django del resto de nuestro sistema y evitar potenciales conflictos de "
"paquetes."

#: ../../intro/contributing.txt:106
msgid "Rolling back to a previous revision of Django"
msgstr "Volviendo a una revisión anterior de Django"

#: ../../intro/contributing.txt:108
msgid ""
"For this tutorial, we'll be using ticket :ticket:`17549` as a case study, so "
"we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""
"Para este tutorial vamos a usar el :ticket:`17549` como caso de estudio, así "
"que vamos a volver atrás la historia de versionado de Django en git hasta "
"antes de que el patch se aplicó. Esto nos va a permitir recorrer todos los "
"pasos requeridos al escribir un patch desde cero, incluyendo correr la test "
"suite de Django."

#: ../../intro/contributing.txt:113
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk "
"for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a ticket!**"
msgstr ""
"**Por más que usemos una revisión más vieja del trunk de Django para los "
"propósitos de este tutorial, siempre se debe usar la revisión actual cuando "
"se trabaja en un patch para un ticket!**"

#: ../../intro/contributing.txt:119
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to "
"Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Consequently, "
"we'll be using the revision of Django just prior to that, `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""
"El patch para este ticket fue escrito por Ulrich Petri, y fue aplicado a "
"Django en el `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. Entonces "
"vamos a usar la revisión anterior a este commit, `commit "
"39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."

#: ../../intro/contributing.txt:127
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""
"Navegamos al directorio raíz de Django (el que contiene ``django``, "
"``docs``, ``tests``, ``AUTHORS``, etc.). Chequeamos la revisión que vamos a "
"usar para el tutorial::"

#: ../../intro/contributing.txt:134
msgid "Running Django's test suite for the first time"
msgstr "Corriendo la test suite de Django por primera vez"

#: ../../intro/contributing.txt:136
msgid ""
"When contributing to Django it's very important that your code changes don't "
"introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""
"Cuando uno contribuye con Django es muy importante que los cambios no "
"introduzcan bugs en otras áreas de Django. Una manera de chequear que Django "
"todavía funciona después de hacer cambios es correr la test suite. Si todos "
"los tests todavía pasan, entonces uno puede estar razonablemente seguro de "
"que los cambios no han roto Django. Si nunca corriste la test suite de "
"Django antes, es una buena idea hacerlo una vez antes de comenzar para "
"familiarizarse con la salida."

#: ../../intro/contributing.txt:144
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""
"Podemos correr la test suite simplemente haciendo ``cd`` al directorio "
"``tests/`` de Django y, si usamos GNU/Linux, Mac OS X o algún otro sabor de "
"Unix, ejecutar::"

#: ../../intro/contributing.txt:150
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""
"Si estamos en Windows, lo de arriba debería funcionar si estamos usando "
"\"Git Bash\" provisto por la instalación por defecto de Git. GitHub tiene un "
"`buen tutorial`__."

#: ../../intro/contributing.txt:157
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""
"Si usamos ``virtualenv``, podemos omitir ``PYTHONPATH=..`` cuando corremos "
"los tests. Esto le dice a Python que busque Django en el directorio padre de "
"``tests``. ``virtualenv`` pone nuestra copia de Django en el ``PYTHONPATH`` "
"automáticamente."

#: ../../intro/contributing.txt:162
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the "
"speed of your computer."
msgstr ""
"Ahora nos sentamos y esperamos. La test suite de Django tiene más de 4800 "
"tests, así que puede tomar entre 5 y 15 minutos de correr, dependiendo de la "
"velocidad de nuestra computadora."

#: ../../intro/contributing.txt:166
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions "
"failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""
"Mientras la suite corre, veremos un flujo de caracteres representando el "
"estado de cada test a medida que corre. ``E`` indica que hubo un error "
"durante el test, y ``F`` indica que una aserción del test falló. Ambos casos "
"se consideran fallas de test. Por otro lado, ``x`` y ``s`` indican fallas "
"esperadas y tests que se saltean, respectivamente. Los puntos indican tests "
"que pasan correctamente."

#: ../../intro/contributing.txt:173
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see `Running all the tests <https://docs.djangoproject.com/"
"en/1.8/internals/contributing/writing-code/unit-tests/#running-unit-tests-"
"dependencies>`_ for a list of dependencies and be sure to install any for "
"tests related to the changes you are making (we won't need any for this "
"tutorial)."
msgstr ""
"Los tests que se saltean son típicamente a causa de librerías externas que "
"se requieren para el test pero que no están disponibles; ver `Corriendo "
"todos los tests <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-code/unit-tests/#running-unit-tests-dependencies>`_ "
"para una lista de dependencias y asegurarse de instalarlas para los tests "
"relacionados de acuerdo a los cambios que estemos haciendo (no será "
"necesario para este tutorial)."

#: ../../intro/contributing.txt:178
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See `Running the unit tests <https://docs.djangoproject.com/en/1.8/"
"internals/contributing/writing-code/unit-tests/#running-unit-tests>`_ for "
"more information."
msgstr ""
"Una vez que se completan los tests, deberíamos obtener un mensaje que nos "
"informa si la test suite pasó o falló. Como no hemos hecho ningún cambio al "
"código, **debería** haber pasado. Si tuviéramos algún fallo o error, "
"deberíamos asegurarnos que seguimos los pasos previos correctamente. Ver "
"`Corriendo los unit tests <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-code/unit-tests/#running-unit-tests>`_ para más "
"información."

#: ../../intro/contributing.txt:184
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken "
"down by Python version and database backend."
msgstr ""
"Notar que la última revisión del trunk de Django podría no siempre ser "
"estable. Cuando se desarrolla contra trunk, se puede chequear `Django's "
"continuous integration builds`__ para determinar si los fallos son "
"específicos de nuestra máquina o también están presentes en los builds "
"oficiales de Django. Si uno cliquea para ver un build particular, puede ver "
"la \"Matriz de configuración\" que muestra las fallas detalladas por versión "
"de Python y backend de base de datos."

#: ../../intro/contributing.txt:195
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is "
"sufficient, however, it's possible (and sometimes necessary) to `run the "
"tests using a different database <https://docs.djangoproject.com/en/1.8/"
"internals/contributing/writing-code/unit-tests/#running-unit-tests-"
"settings>`_."
msgstr ""
"Para este tutorial y el ticket en el que vamos a trabajar, testear contra "
"SQLite es suficiente, pero es posible (y a veces necesario) `correr los "
"tests usando una base de datos diferente <https://docs.djangoproject.com/"
"en/1.8/internals/contributing/writing-code/unit-tests/#running-unit-tests-"
"settings>`_."

#: ../../intro/contributing.txt:200
msgid "Writing some tests for your ticket"
msgstr "Escribir tests para el ticket"

#: ../../intro/contributing.txt:202
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists "
"and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""
"En la mayoría de los casos para que un patch se acepte en Django tiene que "
"incluir tests. Para patches correspondientes a arreglar un bug, esto "
"significa escribir un test de regresión para asegurarse de que el bug no se "
"reintroduce nuevamente. Un test de regresión se debe escribir de tal manera "
"que falle cuando el bug todavía existe y pase cuando el bug se haya "
"arreglado. Para patches de nuevas funcionalidades, es necesario incluir "
"tests que aseguren que la nueva funcionalidad funciona correctamente. "
"También deben fallar cuando la nueva funcionalidad no está presente, y pasar "
"una vez que se haya implementado."

#: ../../intro/contributing.txt:211
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet). "
"If your new tests don't fail, you'll need to fix them so that they do. After "
"all, a regression test that passes regardless of whether a bug is present is "
"not very helpful at preventing that bug from reoccurring down the road."
msgstr ""
"Una buena manera de hacer esto es escribir los tests primero, antes de hacer "
"cualquier cambio al código. Este estilo de desarrollo se llama `test-driven "
"development`__ y se puede aplicar tanto a proyectos enteros como a patches. "
"Después de escribir los tests, se corren para estar seguros de que de hecho "
"fallan (ya que no se ha escrito el código que arregla el bug o agrega la "
"funcionalidad todavía). Si los tests no fallan, es necesario arreglarlos "
"para que fallen. Después de todo un test de regresión que pasa "
"independientemente de si el bug está presente o no no es muy útil "
"previniendo que el bug reaparezca más tarde."

#: ../../intro/contributing.txt:220
msgid "Now for our hands-on example."
msgstr "Ahora, manos al ejemplo."

#: ../../intro/contributing.txt:225
msgid "Writing some tests for ticket #17549"
msgstr "Escribir tests para el ticket #17549"

#: ../../intro/contributing.txt:227
msgid "Ticket :ticket:`17549` describes the following, small feature addition:"
msgstr "El :ticket:`17549`describe la siguiente funcionalidad a agregar:"

#: ../../intro/contributing.txt:229
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""
"Es útil para un URLField tener la opción de abrir la URL; de otra forma uno "
"podría usar un CharField igualmente."

#: ../../intro/contributing.txt:232
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input "
"widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""
"Para resolver este ticket vamos a agregar un método ``render`` al "
"``AdminURLFieldWidget`` para que se muestre un link cliqueable arriba del "
"widget. Pero antes de hacer ese cambio, vamos a escribir un par de tests que "
"verifiquen que nuestras modificaciones funcionarían correctamente, y lo "
"continuarían haciendo en el futuro."

#: ../../intro/contributing.txt:238
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""
"Navegamos al directorio ``tests/regressiontests/admin_widgets/`` de Django y "
"abrimos el archivo ``tests.py``. Agregamos el siguiente código en la línea "
"269 justo antes de la clase ``AdminFileWidgetTest``::"

#: ../../intro/contributing.txt:272
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""
"Los nuevos tests chequean que el método ``render`` que vamos a agregar "
"funciona correctamente en un par de situaciones diferentes."

#: ../../intro/contributing.txt:275
msgid "But this testing thing looks kinda hard..."
msgstr "Pero esto parece un tanto difícil..."

#: ../../intro/contributing.txt:277
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""
"Si nunca tuviste que lidiar con tests antes, puede parece un poco difícil "
"escribir los tests a primera vista. Afortunadamente, el testing es un tema "
"*importante* en programación, así que hay mucha información:"

#: ../../intro/contributing.txt:281
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on `/topics/testing/overview <https://docs.djangoproject.com/"
"en/1.8/topics/testing/overview>`_."
msgstr ""
"Un buen primer vistazo sobre escribir tests para Django se puede encontrar "
"en la documentación en `Testeando aplicaciones Django <https://docs."
"djangoproject.com/en/1.8/topics/testing/overview>`_."

#: ../../intro/contributing.txt:283
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""
"Dive Into Python (libro online gratis para desarrolladores que empiezan con "
"Python) incluye una gran `introducción a Unit Testing`__."

#: ../../intro/contributing.txt:285
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""
"Después de leer estos, siempre está la `documentación de unittest de "
"Python`__."

#: ../../intro/contributing.txt:292
msgid "Running your new test"
msgstr "Correr los nuevos tests"

#: ../../intro/contributing.txt:294
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""
"Recordemos que todavía no hemos hecho ninguna modificación a "
"``AdminURLFieldWidget``, entonces nuestros tests van a fallar. Corramos los "
"tests en el directorio ``model_forms_regress`` para asegurarnos de que eso "
"realmente sucede. En la línea de comandos, ``cd`` al directorio ``tests/`` "
"de Django y corremos::"

#: ../../intro/contributing.txt:302
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate "
"folder and class."
msgstr ""
"Si los tests corren correctamente, deberíamos ver tres fallas "
"correspondientes a cada uno de los métodos de test que agregamos. Si todos "
"los tests pasan, entonces deberíamos revisar que agregamos los tests en el "
"directorio y clase apropiados."

#: ../../intro/contributing.txt:308
msgid "Writing the code for your ticket"
msgstr "Escribir el código para el ticket"

#: ../../intro/contributing.txt:310
msgid ""
"Next we'll be adding the functionality described in ticket :ticket:`17549` "
"to Django."
msgstr ""
"A continuación vamos a agregar a Django la funcionalidad descripta en el :"
"ticket:`17549`."

#: ../../intro/contributing.txt:314
msgid "Writing the code for ticket #17549"
msgstr "Escribir el código para el ticket #17549"

#: ../../intro/contributing.txt:316
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""
"Navegamos al directorio ``django/django/contrib/admin/`` y abrimos el "
"archivo ``widgets.py``. Buscamos la clase ``AdminURLFieldWidget`` en la "
"línea 302 y agregamos el siguiente método ``render`` después del método "
"``__init__`` ya existente::"

#: ../../intro/contributing.txt:333
msgid "Verifying your test now passes"
msgstr "Verificar que los tests pasan"

#: ../../intro/contributing.txt:335
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working "
"correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into the "
"Django ``tests/`` directory and run::"
msgstr ""
"Una vez que terminamos las modificaciones, necesitamos verificar que los "
"tests que escribimos anteriormente pasan, para saber si el código que "
"acabamos de escribir funciona correctamente. Para correr los tests en el "
"directorio ``admin_widgets``, hacemos ``cd`` al directorio ``tests/`` de "
"Django y corremos::"

#: ../../intro/contributing.txt:342
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""
"Oops, menos mal que escribimos esos tests! Todavía deberíamos ver las 3 "
"fallas, con la siguiente excepción::"

#: ../../intro/contributing.txt:347
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of ``django/contrib/admin/"
"widgets.py`` so it looks as follows::"
msgstr ""
"Nos olvidamos de agregar el import para ese método. Agregamos el import de "
"``smart_urlquote`` al final de la línea 13 de ``django/contrib/admin/widgets."
"py`` para que se vea así::"

#: ../../intro/contributing.txt:353
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""
"Volvemos a correr los tests y todos deberían pasar. Si no, asegurarse de que "
"se modificó correctamente la clase ``AdminURLFieldWidget`` como se mostró "
"arriba y que los tests también se copiaron correctamente."

#: ../../intro/contributing.txt:358
msgid "Running Django's test suite for the second time"
msgstr "Corriendo la test suite de Django por segunda vez"

#: ../../intro/contributing.txt:360
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""
"Una vez que verificamos que nuestro patch y nuestros tests funcionan "
"correctamente, es una buena idea correr la test suite de Django entera para "
"confirmar que nuestro cambio no introdujo ningún bug en otras áreas de "
"Django. Si bien el que la test suite pase no garantiza que nuestro código "
"esté libre de bugs, ayuda a identificar muchos bugs y regresiones que de "
"otra manera podrían pasar desapercibidos."

#: ../../intro/contributing.txt:366
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""
"Para correr la test suite de Django completa, ``cd`` al directorio ``tests/"
"`` y corremos::"

#: ../../intro/contributing.txt:371
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix "
"also made a `small CSS change`__ to format the new widget. You can make the "
"change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""
"Mientras que no veamos ninguna falla, estamos bien. Notemos que en el fix "
"original también se hace un `pequeño cambio de CSS`__ para formatear el "
"widget. Podemos incluir este cambio también, pero lo salteamos por ahora por "
"cuestiones de brevedad."

#: ../../intro/contributing.txt:378
msgid "Writing Documentation"
msgstr "Escribir documentación"

#: ../../intro/contributing.txt:380
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""
"Esta es una nueva funcionalidad, así que debería documentarse. Agregamos lo "
"siguiente desde la línea 925 de ``django/docs/ref/models/fields.txt`` junto "
"a la documentación existente de ``URLField``::"

#: ../../intro/contributing.txt:389
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see `/internals/contributing/"
"writing-documentation <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-documentation>`_. That page also includes an "
"explanation of how to build a copy of the documentation locally, so you can "
"preview the HTML that will be generated."
msgstr ""
"Para mayor información sobre escribir documentación, incluyendo una "
"explicación de qué se trata esto de ``versionadded``, se puede consultar en "
"`la sección correspondiente <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-documentation>`_. Esa página también incluye una "
"explicación de cómo generar una copia de la documentación localmente, para "
"poder prever el HTML que se va a producir."

#: ../../intro/contributing.txt:396
msgid "Generating a patch for your changes"
msgstr "Generar un patch con los cambios"

#: ../../intro/contributing.txt:398
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""
"Ahora es momento de generar un archivo de patch que se pueda subir al Trac o "
"aplicarse a otra copia de Django. Para obtenere un vistazo del contenido de "
"nuestro patch, corremos el siguiente comando::"

#: ../../intro/contributing.txt:404
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the "
"tutorial."
msgstr ""
"Esto va a mostrar las diferencias entre nuestra copia actual de Django (con "
"los cambios) y la revisión que teníamos inicialmente al principio del "
"tutorial."

#: ../../intro/contributing.txt:408
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the "
"command line.  If the patch's content looked okay, you can run the following "
"command to save the patch file to your current working directory::"
msgstr ""
"Apretamos ``q`` para volver a la línea de comandos. Si el contenido del "
"patch se veía bien, podemos correr el siguiente comando para guardar el "
"archivo del patch en nuestro directorio actual::"

#: ../../intro/contributing.txt:414
msgid ""
"You should now have a file in the root Django directory called ``17549."
"diff``. This patch file contains all your changes and should look this:"
msgstr ""
"Deberíamos tener un archivo en el directorio raíz de Django llamando ``17549."
"diff``. Este archivo contiene nuestros cambios y debería verse algo así:"

#: ../../intro/contributing.txt:509
msgid "So what do I do next?"
msgstr "Qué hacemos ahora?"

#: ../../intro/contributing.txt:511
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a more "
"`git oriented workflow <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-code/working-with-git>`_ is recommended."
msgstr ""
"Felicitaciones, hemos generado nuestro primer patch para Django! Ahora "
"podemos usar estas habilidades para ayudar a mejorar el código de Django. "
"Generar patches y adjuntarlos a tickets en el Trac es útil, pero, como ahora "
"estamos usando git - se recomiendo adoptar un `workflow orientado a git "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code/"
"working-with-git>`_."

#: ../../intro/contributing.txt:518
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""
"Como nunca commiteamos nuestros cambios localmente, hacemos lo siguiente "
"para devolver nuestro branch a un buen punto de comienzo (reseteamos "
"nuestros cambios)::"

#: ../../intro/contributing.txt:525
msgid "More information for new contributors"
msgstr "Más información para nuevos contribuidores"

#: ../../intro/contributing.txt:527
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""
"Antes de ponerse de lleno a escribir patches para Django, hay más "
"información sobre el tema que probablemente deberías leer:"

#: ../../intro/contributing.txt:530
msgid ""
"You should make sure to read Django's documentation on `claiming tickets and "
"submitting patches <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-code/submitting-patches>`_. It covers Trac etiquette, "
"how to claim tickets for yourself, expected coding style for patches, and "
"many other important details."
msgstr ""
"Deberías asegurarte de leer la documentación de Django sobre `reclamando "
"tickets y enviando patches <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/writing-code/submitting-patches>`_. Cubre la etiqueta en Trac, "
"cómo reclamar tickets, el estilo de código esperado para un patch, y otros "
"detalles importantes."

#: ../../intro/contributing.txt:534
msgid ""
"First time contributors should also read Django's `documentation for first "
"time contributors <https://docs.djangoproject.com/en/1.8/internals/"
"contributing/new-contributors/>`_. It has lots of good advice for those of "
"us who are new to helping out with Django."
msgstr ""
"Aquellos que contribuyen por primera vez deberían leer también la "
"`documentación para contribuidores por primera vez <https://docs."
"djangoproject.com/en/1.8/internals/contributing/new-contributors/>`_. Tiene "
"muchos consejos para quienes son nuevos en esto de ayudar con Django."

#: ../../intro/contributing.txt:538
msgid ""
"After those, if you're still hungry for more information about contributing, "
"you can always browse through the rest of `Django's documentation on "
"contributing <https://docs.djangoproject.com/en/1.8/internals/contributing/"
"index>`_. It contains a ton of useful information and should be your first "
"source for answering any questions you might have."
msgstr ""
"Y si todavía buscás más información sobre contribuir, siempre se puede "
"revisar el resto de la `documentación de Django sobre contribuir <https://"
"docs.djangoproject.com/en/1.8/internals/contributing/index>`_. Contiene "
"mucha información útil y debería ser el primer recurso en busca de "
"respuestas a cualquier pregunta que te pudiera surgir."

#: ../../intro/contributing.txt:545
msgid "Finding your first real ticket"
msgstr "Encontrar nuestro primer ticket de verdad"

#: ../../intro/contributing.txt:547
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are "
"often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing "
"patches for more difficult and complicated tickets."
msgstr ""
"Después de recorrer la información de arriba, estaremos listos para salir a "
"buscar un ticket para el que podamos escribir un patch. Hay que prestar "
"especial atención a los tickets marcados como \"easy pickings\". Estos "
"tickets suelen ser más simples y son una gran oportunidad para aquellos que "
"quieren contribuir por primera vez. Una vez que estemos familiarizados con "
"el contribuir con Django, podemos pasar a escribir patches para tickets más "
"complicados."

#: ../../intro/contributing.txt:554
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on "
"`claiming tickets and submitting patches <https://docs.djangoproject.com/"
"en/1.8/internals/contributing/writing-code/submitting-patches>`_."
msgstr ""
"Si queremos empezar ya, se puede pegar una mirada a la lista de `tickets "
"simples que necesitan patches`__ y la lista de `tickets simples que tienen "
"patches que necesitan mejoras`__. Si estamos familiarizados con escribir "
"tests, también podemos ver la lista de `tickets simples que necesitan "
"tests`__. Recordar seguir las instrucciones sobre reclamar tickets "
"mencionadas en el link a la documentación en `reclamando tickets y enviando "
"patches <https://docs.djangoproject.com/en/1.8/internals/contributing/"
"writing-code/submitting-patches>`_."

#: ../../intro/contributing.txt:567 ../../intro/tutorial05.txt:690
#: ../../intro/tutorial06.txt:120
msgid "What's next?"
msgstr "Qué sigue?"

#: ../../intro/contributing.txt:569
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes. "
"After uploading a patch or submitting a pull request, be sure to update the "
"ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See `/internals/"
"contributing/triaging-tickets <https://docs.djangoproject.com/en/1.8/"
"internals/contributing/triaging-tickets>`_ for details."
msgstr ""
"Después que un ticket tiene un patch, se necesita que un segundo par de ojos "
"lo revisen. Después de subir un patch o enviar un pull request, hay que "
"asegurarse de actualizar la metadata del ticket, seteando los flags del "
"ticket para que diga \"has patch\", \"doesn't need tests\", etc. para que "
"otros lo puedan encontrar para revisarlo. Contribuir no necesariamente "
"significa escribir un patch desde cero, revisar patches existentes es "
"también una forma útil de ayudar. Para más detalles, ver `/internals/"
"contributing/triaging-tickets <https://docs.djangoproject.com/en/1.8/"
"internals/contributing/triaging-tickets>`_."

#: ../../intro/index.txt:2
msgid "Getting started"
msgstr "Empezando con Django"

#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""
"Nuevo en Django? O en desarrollo web en general? Bueno, estás en el lugar "
"indicado: leé este material para empezar rápidamente."

#: ../../intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""
"Si sos nuevo en Python_, tal vez quieras empezar por hacerte una idea de "
"cómo es este lenguaje. Django es 100% Python, entonces si uno tiene un "
"mínimo comfort con Python probablemente puedas obtener mucho más de Django."

#: ../../intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""
"Si sos nuevo en lo que a programación se refiere, tal vez te convenga "
"empezar con una leída a esta `lista de recursos sobre Python para no-"
"programadores`_"

#: ../../intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_. If that's not quite your "
"style, there are many other `books about Python`_."
msgstr ""
"Si ya conocés otros lenguajes y querés empezar con Python rápidamente, "
"recomendamos `Dive Into Python`_. Si este libro no sigue tu estilo, hay "
"algunos otros `libros sobre Python`_."

#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr "Guía de instalación rápida"

#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a "
"`complete installation guide <https://docs.djangoproject.com/en/1.8/topics/"
"install>`_ that covers all the possibilities; this guide will guide you to a "
"simple, minimal installation that'll work while you walk through the "
"introduction."
msgstr ""
"Antes de poder usar Django es necesario instalarlo. Existe una `guía de "
"instalación completa <https://docs.djangoproject.com/en/1.8/topics/"
"install>`_ que cubre todas las posibilidades; esta guía es simple, cubre una "
"instalación mínima que servirá mientras se recorre la introducción."

#: ../../intro/install.txt:10
msgid "Install Python"
msgstr "Instalar Python"

#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with Python "
"2.7, 3.2, 3.3, or 3.4. All these versions of Python include a lightweight "
"database called SQLite_ so you won't need to set up a database just yet."
msgstr ""
"Siendo un framework web escrito en Python, Django requiere Python. Funciona "
"con Python 2.7, 3.2, 3.3, o 3.4. Estas versiones de Python incluyen una base "
"de datos liviana llamada SQLite_, así que no es necesario configurar un "
"motor de base datos inmediatamente."

#: ../../intro/install.txt:18
msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with "
"your operating system's package manager."
msgstr ""
"Para obtener la última versión de Python, ir a https://www.python.org/"
"download/ o instalar a través del administrador de paquetes de tu sistema "
"operativo."

#: ../../intro/install.txt:21
msgid "Django on Jython"
msgstr "Django en Jython"

#: ../../intro/install.txt:23
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See `/howto/jython <https://docs."
"djangoproject.com/en/1.8/howto/jython>`_ for details."
msgstr ""
"Si usás Jython_ (implementación de Python para la plataforma Java), es "
"necesario seguir algunas pasos adicionales. Ver detalles en `/howto/jython "
"<https://docs.djangoproject.com/en/1.8/howto/jython>`_."

#: ../../intro/install.txt:28
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""
"Podés verificar que Python está instalado corriendo ``python`` en tu shell; "
"deberías ver algo como::"

#: ../../intro/install.txt:37
msgid "Set up a database"
msgstr "Configurar una base de datos"

#: ../../intro/install.txt:39
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the `database installation information <https://docs.djangoproject."
"com/en/1.8/topics/install/#database-installation>`_."
msgstr ""
"Este paso sólo es necesario si quisieras trabajar con un motor de base de "
"datos más \"grande\" como PostgreSQL, MySQL u Oracle. Para ello consultá la "
"`información sobre la instalación de base de datos <https://docs."
"djangoproject.com/en/1.8/topics/install/#database-installation>`_."

#: ../../intro/install.txt:44
msgid "Remove any old versions of Django"
msgstr "Borrar versiones anteriores de Django"

#: ../../intro/install.txt:46
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to `uninstall the old Django version before installing the new "
"version <https://docs.djangoproject.com/en/1.8/topics/install/#removing-old-"
"versions-of-django>`_."
msgstr ""
"Si estás actualizando una versión previa de Django es necesario `desinstalar "
"la versión anterior antes de instalar una nueva <https://docs.djangoproject."
"com/en/1.8/topics/install/#removing-old-versions-of-django>`_."

#: ../../intro/install.txt:51
msgid "Install Django"
msgstr "Instalar Django"

#: ../../intro/install.txt:53
msgid "You've got three easy options to install Django:"
msgstr "Existen tres opciones fáciles de instalar Django:"

#: ../../intro/install.txt:55
msgid ""
"Install a version of Django `provided by your operating system distribution "
"<https://docs.djangoproject.com/en/1.8/misc/distributions>`_. This is the "
"quickest option for those who have operating systems that distribute Django."
msgstr ""
"Instalar una versión de Django `provista por tu sistema operativo <https://"
"docs.djangoproject.com/en/1.8/misc/distributions>`_. Esta es la opción más "
"rápida para aquellos que tienen un sistema operativo que distribuye Django."

#: ../../intro/install.txt:59
msgid ""
"`Install an official release <https://docs.djangoproject.com/en/1.8/topics/"
"install/#installing-official-release>`_. This is the best approach for users "
"who want a stable version number and aren't concerned about running a "
"slightly older version of Django."
msgstr ""
"`Instalar un release oficial <https://docs.djangoproject.com/en/1.8/topics/"
"install/#installing-official-release>`_. Esta es la mejor alternativa para "
"los usuarios qie quieren un número de versión estable y que no les preocupa "
"no correr la versión más reciente de Django."

#: ../../intro/install.txt:63
msgid ""
"`Install the latest development version <https://docs.djangoproject.com/"
"en/1.8/topics/install/#installing-development-version>`_. This is best for "
"users who want the latest-and-greatest features and aren't afraid of running "
"brand-new code."
msgstr ""
"`Instalar la última versión de desarrollo <https://docs.djangoproject.com/"
"en/1.8/topics/install/#installing-development-version>`_. Esta es la mejor "
"opción para los usuarios que quieren las características más recientes y que "
"no tienen miedo de correr código nuevo."

#: ../../intro/install.txt:66
msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""
"Siempre recurrir a la versión de la documentación que corresponde a la "
"versión de Django que estás usando!"

#: ../../intro/install.txt:69
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""
"Si seguís cualquiera de los dos primeros pasos, hay que estar atentos a las "
"partes de la documentación marcadas como **new in development version** "
"(nuevo en la versión de desarrollo). Esta frase indica características que "
"están solamente disponibles en la versión de desarrollo de Django, y que muy "
"posibiblemente no funcionen en un release oficial."

#: ../../intro/install.txt:76
msgid "Verifying"
msgstr "Verificando"

#: ../../intro/install.txt:78
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""
"Para verificar que Django es accesible desde Python, tipeá ``python`` en tu "
"shell. Una vez en el prompt de Python, intentá importar Django:"

#: ../../intro/install.txt:87
msgid "You may have another version of Django installed."
msgstr "You may have another version of Django installed."

#: ../../intro/install.txt:90
msgid "That's it!"
msgstr "Eso es todo!"

#: ../../intro/install.txt:92
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""
"Así es -- ahora podés :doc:`seguir con el tutorial </intro/tutorial01>`."

#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr "Django de un vistazo"

#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""
"Como Django fue desarrollado en el entorno de una redacción de noticias, fue "
"diseñado para hacer las tareas comunes del desarrollo web rápidas y fáciles. "
"Esta es una introducción informal de cómo escribir una aplicación basada en "
"una base de datos con Django."

#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or `dive right into "
"more detailed documentation <https://docs.djangoproject.com/en/1.8/topics/"
"index>`_."
msgstr ""
"El objetivo de este documento es brindar las especificaciones técnicas "
"suficientes para entender cómo funciona Django, pero no ser un tutorial o "
"una referencia -- ambos existen! Cuando estés listo para empezar un "
"proyecto, podés :doc:`chequear el tutorial </intro/tutorial01>` o sumergirte "
"en la `documentación más detallada <https://docs.djangoproject.com/en/1.8/"
"topics/index>`_."

#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr "Diseñar tu modelo"

#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""
"Aunque se puede usar sin una base de datos, Django viene con un mapeador "
"objeto-relacional a través del cual podés describir la estructura de tu base "
"de datos en código Python."

#: ../../intro/overview.txt:24
msgid ""
"The `data-model syntax <https://docs.djangoproject.com/en/1.8/topics/db/"
"models>`_ offers many rich ways of representing your models -- so far, it's "
"been solving many years' worth of database-schema problems. Here's a quick "
"example:"
msgstr ""
"La `sintaxis de modelo de datos <https://docs.djangoproject.com/en/1.8/"
"topics/db/models>`_ ofrece muchas maneras de representar tus modelos -- al "
"día de hoy ha resuelto problemas de esquema de base de datos por años. Aquí "
"un rápido ejemplo:"

#: ../../intro/overview.txt:49
msgid "Install it"
msgstr "Instalarlo"

#: ../../intro/overview.txt:51
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""
"A continuación hay que correr la utilidad de línea de comandos de Django "
"para crear las tablas de la base de datos automáticamente:"

#: ../../intro/overview.txt:58
msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as "
"well as optionally providing `much richer schema control <https://docs."
"djangoproject.com/en/1.8/topics/migrations>`_."
msgstr ""
"El comando :djadmin:`migrate` revisa todos los modelos disponibles y crea "
"las tablas en la base de datos para aquellos que todavía no existan, como "
"así también, opcionalmente, proveer `un amplio control sobre los esquemas "
"<https://docs.djangoproject.com/en/1.8/topics/migrations>`_."

#: ../../intro/overview.txt:63
msgid "Enjoy the free API"
msgstr "Aprovecha la API ya provista"

#: ../../intro/overview.txt:65
msgid ""
"With that, you've got a free, and rich, `Python API <https://docs."
"djangoproject.com/en/1.8/topics/db/queries>`_ to access your data. The API "
"is created on the fly, no code generation necessary:"
msgstr ""
"En este punto ya obtenés una completa `API Python <https://docs."
"djangoproject.com/en/1.8/topics/db/queries>`_ para acceder a tus datos. La "
"API es creada \"al vuelo\", sin requerir generación de código:"

#: ../../intro/overview.txt:141
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""
"Interfaz de administración dinámica: no sólo los andamios -- la casa completa"

#: ../../intro/overview.txt:143
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready `administrative interface <https://docs."
"djangoproject.com/en/1.8/ref/contrib/admin/index>`_ -- a Web site that lets "
"authenticated users add, change and delete objects. It's as easy as "
"registering your model in the admin site:"
msgstr ""
"Una vez que tus modelos están definidos, Django puede crear automáticamente "
"una `interfaz de administración <https://docs.djangoproject.com/en/1.8/ref/"
"contrib/admin/index>`_ profesional, lista para producción -- un sitio web "
"que permite a usuarios autenticados agregar, modificar y borrar objetos. Es "
"tan fácil como registrar tu modelo en el sitio de administración:"

#: ../../intro/overview.txt:168
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""
"La filosofía aquí es que tu sitio es editado por un staff, un cliente o "
"quizás solamente vos -- y vos no querés tener que crear las interfaces de "
"backend solamente para manejar el contenido."

#: ../../intro/overview.txt:172
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""
"Un flujo típico al crear las apps Django es definir los modelos y configurar "
"el sitio de administración corriendo tan rápido como sea posible, de tal "
"forma que el staff (o los clientes) pueden empezar a agregar información. Y "
"luego, desarrollar la manera en que esta información es presentada al "
"público."

#: ../../intro/overview.txt:177
msgid "Design your URLs"
msgstr "Diseñar tus URLs"

#: ../../intro/overview.txt:179
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""
"Un esquema de URLs limpio y elegante es un detalle importante en una "
"aplicación web de calidad. Django incentiva el diseño elegante de URLs y no "
"añade ningún sufijo como ``.php`` or ``.asp``."

#: ../../intro/overview.txt:183
msgid ""
"To design URLs for an app, you create a Python module called a `URLconf "
"<https://docs.djangoproject.com/en/1.8/topics/http/urls>`_. A table of "
"contents for your app, it contains a simple mapping between URL patterns and "
"Python callback functions. URLconfs also serve to decouple URLs from Python "
"code."
msgstr ""
"Para diseñar las URLs de una app, hay que crear un módulo Python llamado "
"`URLconf <https://docs.djangoproject.com/en/1.8/topics/http/urls>`_. Es una "
"tabla de contenidos para tu app, contiene un simple mapeo entre patrones de "
"URL y funciones Python. Los URLconfs también sirven para desacoplar las URLs "
"del código Python."

#: ../../intro/overview.txt:187
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr ""
"A continuación cómo podría ser un URLconf para el ejemplo anterior de "
"``Reporter``/``Article``:"

#: ../../intro/overview.txt:203
msgid ""
"The code above maps URLs, as simple `regular expressions`_, to the location "
"of Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""
"El código de arriba mapea URLs, listadas como expresiones regulares simples, "
"a la ubicación de funciones Python de callback (\"views\"). Las expresiones "
"regulares usan paréntesis para \"capturar\" valores en las URLs. Cuando un "
"usuario pide una página, Django recorre los patrones, en orden, y se detiene "
"en el primero que coincide con la URL solicitada. (Si ninguno coincide, "
"Django llama a un view especial para un 404.) Esto es muy rápido porque las "
"expresiones regulares se compilan cuando se carga el código."

#: ../../intro/overview.txt:213
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""
"Una vez que una de las expresiones regulares coincide, Django importa e "
"invoca la view correspondiente, que es simplemente una función Python. Cada "
"view recibe como argumentos un objeto request -- que contiene la metada del "
"request -- y los valores capturados en la expresión regular."

#: ../../intro/overview.txt:217
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""
"Por ejemplo, si el usuario solicita la URL \"/articles/2005/05/39323/\", "
"Django llamaría a la función ``news.views.article_detail(request, '2005', "
"'05', '39323')``."

#: ../../intro/overview.txt:222
msgid "Write your views"
msgstr "Escribir tus views"

#: ../../intro/overview.txt:224
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""
"Cada view es responsable de hacer una de dos cosas: devolver un objeto :"
"class:`~django.http.HttpResponse` con el contenido de la página solicitada, "
"o levantar una excepción como :class:`~django.http.Http404`. El resto "
"depende de cada uno."

#: ../../intro/overview.txt:229
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above:"
msgstr ""
"Generalmente, una view obtiene datos de acuerdo a los parámetros que recibe, "
"carga un template y lo renderiza usando esos datos. Este es un ejemplo de "
"una view para ``year_archive`` siguiendo con el ejemplo anterior:"

#: ../../intro/overview.txt:245
msgid ""
"This example uses Django's `template system <https://docs.djangoproject.com/"
"en/1.8/topics/templates>`_, which has several powerful features but strives "
"to stay simple enough for non-programmers to use."
msgstr ""
"Este ejemplo usa el `sistema de templates <https://docs.djangoproject.com/"
"en/1.8/topics/templates>`_ de Django, que tiene varias características "
"poderosas pero es lo suficientemente simple de usar para no-programadores."

#: ../../intro/overview.txt:250
msgid "Design your templates"
msgstr "Diseñar tus templates"

#: ../../intro/overview.txt:252
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr "El código anterior cargar el template ``news/year_archive.html``."

#: ../../intro/overview.txt:254
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""
"Django tiene un path de búsqueda de templates, que permite minimizar la "
"redundancia. En tus settings, especificá una lista de directorios para "
"revisar por templates en :setting:`DIRS <TEMPLATES-DIRS>`. Si un template no "
"existe en el primer directorio, se busca en el segundo, y así sucesivamente."

#: ../../intro/overview.txt:259
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""
"Supongamos que el template ``news/year_archive.html`` se encuentra, su "
"contenido podría ser:"

#: ../../intro/overview.txt:279
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""
"Las variables se encierran entre doble llaves. ``{{ article.headline }}`` "
"significa \"Escribir el valor del atributo headline del objeto article.\" "
"Pero los puntos no solamente se usan para atributos. También se usan para "
"acceder a una clave de un diccionario, acceder a un índice y llamadas a "
"función."

#: ../../intro/overview.txt:284
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function)."
msgstr ""
"Notar que ``{{ article.pub_date|date:\"F j, Y\" }}`` usa un \"pipe\" (el "
"caracter \"|\") al estilo Unix. Se trata de lo que se llama un template "
"filter, y es una manera de aplicar un filtro al valor de una variable. En "
"este caso, el filtro date formatea un objeto datetime de Python con el "
"formato dado (como en el caso de la función date de PHP)."

#: ../../intro/overview.txt:289
msgid ""
"You can chain together as many filters as you'd like. You can write `custom "
"template filters <https://docs.djangoproject.com/en/1.8/howto/custom-"
"template-tags/#howto-writing-custom-template-filters>`_. You can write "
"`custom template tags <https://docs.djangoproject.com/en/1.8/howto/custom-"
"template-tags>`_, which run custom Python code behind the scenes."
msgstr ""
"Podés encadenar tantos filtros como quieras. También podés `escribir filtros "
"propios <https://docs.djangoproject.com/en/1.8/howto/custom-template-tags/"
"#howto-writing-custom-template-filters>`_. Podés `escribir template tags "
"personalizados <https://docs.djangoproject.com/en/1.8/howto/custom-template-"
"tags>`_, que corren código Python propio detrás de escena."

#: ../../intro/overview.txt:294
msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""
"Finalmente, Django usa el concepto de \"herencia de templates\": eso es lo "
"que hace ``{% extends \"base.html\" %}``. Significa \"Primero cargar el "
"template llamado 'base', que define una serie de bloques, y rellenar esos "
"bloques con los siguientes bloques\". En síntesis, permite recortar "
"drásticamente la redundancia en los templates: cada template solamente tiene "
"que definir lo que es único para él mismo."

#: ../../intro/overview.txt:300
msgid ""
"Here's what the \"base.html\" template, including the use of `static files "
"<https://docs.djangoproject.com/en/1.8/howto/static-files/index>`_, might "
"look like:"
msgstr ""
"El template \"base.html\", incluyendo el uso de `archivos estáticos <https://"
"docs.djangoproject.com/en/1.8/howto/static-files/index>`_, podría ser algo "
"como:"

#: ../../intro/overview.txt:316
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""
"Simplificando, define el look-and-feel del sitio (con el logo del sitio) y "
"provee los \"espacios\" para que los templates hijos completen. Esto hace "
"que el rediseño de un sitio sea tan sencillo como modificar un único archivo "
"-- el template base."

#: ../../intro/overview.txt:320
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""
"También permite crear múltiple versiones de un sitio, con diferentes "
"templates base y reusando los templates hijos. Los creadores de Django han "
"usado esta técnica para crear completamente diferentes de sitios para su "
"versión móvil -- simplemente creando un nuevo template base."

#: ../../intro/overview.txt:325
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""
"Hay que notar que si uno prefiere puede usar un sistema de templates "
"distinto al de Django. Si bien el sistema de templates de Django está "
"particularmente bien integrado con la capa de Django de modelos, nada nos "
"fuerza a usarlo. Tampoco es obligatorio usar la capa de abstracción de la "
"base de datos provista por Django. Se puede usar otra abstracción, leer de "
"archivos XML, leer de archivos de disco, o lo que uno quiera. Cada pieza de "
"Django -- modelos, views, templates -- está desacoplada del resto."

#: ../../intro/overview.txt:334
msgid "This is just the surface"
msgstr "Esto es sólo la superficie"

#: ../../intro/overview.txt:336
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""
"Esta es tan sólo un rápido vistazo a la funcionalidad de Django. Algunas "
"otras características útiles:"

#: ../../intro/overview.txt:339
msgid ""
"A `caching framework <https://docs.djangoproject.com/en/1.8/topics/cache>`_ "
"that integrates with memcached or other backends."
msgstr ""
"Un `framework de caching <https://docs.djangoproject.com/en/1.8/topics/"
"cache>`_ que se integra con memcached y otros backends."

#: ../../intro/overview.txt:342
msgid ""
"A `syndication framework <https://docs.djangoproject.com/en/1.8/ref/contrib/"
"syndication>`_ that makes creating RSS and Atom feeds as easy as writing a "
"small Python class."
msgstr ""
"Un `framework de sindicación <https://docs.djangoproject.com/en/1.8/ref/"
"contrib/syndication>`_ que hace que crear feeds RSS y Atom sea tan fácil "
"como escribir una pequeña clase Python."

#: ../../intro/overview.txt:345
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""
"Más y mejores características en la creación automática del sitio de "
"administración -- esta introducción apenas trata el tema superficialmente."

#: ../../intro/overview.txt:348
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""
"Los siguientes pasos obvios son `bajar Django`_, leer el :doc:`tutorial </"
"intro/tutorial01>` y unirse a `la comunidad`_. Gracias por tu interés!"

#: ../../intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr "Tutorial avanzado: Cómo escribir apps reusables"

#: ../../intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you "
"can reuse in new projects and share with other people."
msgstr ""
"Este tutorial avanzado comienza donde dejó el :doc:`Tutorial 6 </intro/"
"tutorial06>`. Vamos a convertir nuestra app en un paquete Python standalone "
"de tal manera que se pueda reusar en nuevos proyectos y compartir con otra "
"gente."

#: ../../intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""
"Si todavía no completaste los Tutoriales 1-5, te alentamos a hacerlo, ya que "
"nos basaremos en ese proyecto durante este tutorial."

#: ../../intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr "La reusabilidad importa"

#: ../../intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""
"Es mucho trabajo diseñar, construir, testear y mantener una aplicación web. "
"Varios proyectos Python y Django comparten problemas comunes. No sería bueno "
"poder ahorrarse algo de este trabajo repetido?"

#: ../../intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ has a vast range of packages you can use in "
"your own Python programs. Check out `Django Packages <https://www."
"djangopackages.com>`_ for existing reusable apps you could incorporate in "
"your project. Django itself is also just a Python package. This means that "
"you can take existing Python packages or Django apps and compose them into "
"your own web project. You only need to write the parts that make your "
"project unique."
msgstr ""
"Reusabilidad es el estilo de vida en Python. `The Python Package Index "
"(PyPI) <https://pypi.python.org/pypi>`_ tiene un amplio abanico de paquetes "
"que uno puede usar en sus propios programas Python. También vale la pena "
"chequear `Django Packages <https://www.djangopackages.com>`_ para apps "
"reusables que se pueden incorporar en nuestros proyectos. Django mismo es "
"también un paquete Python. Esto significa que uno puede partir de paquetes "
"Python o Django apps existentes y componerlos en un proyecto web propio. "
"Solamente es necesario escribir las partes que hacen nuestro proyecto único."

#: ../../intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we "
"saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy "
"to use in new projects and ready to publish for others to install and use."
msgstr ""
"Digamos que estamos por comenzar un nuevo proyecto que necesita una app de "
"encuestas como la que hemos estado desarrollando. Cómo hacemos que sea "
"reusable? Afortunadamente, estamos en el buen camino. En el :doc:`Tutorial 3 "
"</intro/tutorial03>` vimos como desacoplar la app ``polls`` del URLconf a "
"nivel proyecto usando ``include``. En este tutorial vamos a ir más allá para "
"lograr que nuestra app sea fácil de usar en nuevos proyectos y quede lista "
"para publicarla y que otros puedan instalarla y usarla."

#: ../../intro/reusable-apps.txt:35
msgid "Package? App?"
msgstr "Paquete? App?"

#: ../../intro/reusable-apps.txt:37
msgid ""
"A Python `package <https://docs.python.org/tutorial/modules.html#packages>`_ "
"provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""
"Un `paquete Python <https://docs.python.org/tutorial/modules."
"html#packages>`_ provee una manera de agrupar código Python relacionado para "
"facilitar su reuso. Un paquete contiene uno o más archivos de código Python "
"(también conocidos como \"módulos\")."

#: ../../intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a "
"special file ``__init__.py``, even if this file is empty."
msgstr ""
"Un paquete se puede importar con ``import foo.bar`` o ``from foo import "
"bar``. Para que un directorio (como ``polls``) sea un paquete, debe contener "
"un archivo especial, ``__init__.py``, que incluso puede estar vacío."

#: ../../intro/reusable-apps.txt:45
msgid ""
"A Django *application* is just a Python package that is specifically "
"intended for use in a Django project. An application may use common Django "
"conventions, such as having ``models``, ``tests``, ``urls``, and ``views`` "
"submodules."
msgstr ""
"Una *app* Django es sólo un paquete Python que está pensado específicamente "
"para usarse en un proyecto Django. Una app puede también usar algunas "
"convenciones comunes de Django, como tener un archivo ``models.py``."

#: ../../intro/reusable-apps.txt:50
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""
"Más adelante usamos el término *empaquetar* para describir el proceso de "
"hacer que un paquete Python sea fácil de instalar para otros. Puede resultar "
"un poco confuso, lo sabemos."

#: ../../intro/reusable-apps.txt:55
msgid "Your project and your reusable app"
msgstr "Nuestro proyecto y nuestra app reusable"

#: ../../intro/reusable-apps.txt:57
msgid "After the previous tutorials, our project should look like this::"
msgstr ""
"Después de los tutoriales anteriores, nuestro proyecto debería verse así::"

#: ../../intro/reusable-apps.txt:90
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for "
"the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""
"Creamos ``mysite/templates`` en el :doc:`Tutorial 2 </intro/tutorial02>`, y "
"``polls/templates`` en el :doc:`Tutorial 3 </intro/tutorial03>`. Ahora "
"quizás es más claro por qué elegimos tener directorios separados de "
"templates para el proyecto y la aplicación: todo lo que es parte de la app "
"polls está en ``polls``. Esto permite que la aplicación esté auto-contenido "
"y sea más fácil reusarla en otro proyecto."

#: ../../intro/reusable-apps.txt:97
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""
"Ahora el directorio ``polls`` podría copiarse en un nuevo proyecto Django y "
"ser reusado inmediatemente. Todavía no está listo para publicarse, sin "
"embargo. Para ello necesitamos empaquetar la app y hacer fácil su "
"instalación para otros."

#: ../../intro/reusable-apps.txt:104
msgid "Installing some prerequisites"
msgstr "Instalando algunos prerrequisitos"

#: ../../intro/reusable-apps.txt:106
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use setuptools_ to build our package. It's "
"the recommended packaging tool (merged with the ``distribute`` fork). We'll "
"also be using `pip`_ to install and uninstall it. You should install these "
"two packages now. If you need help, you can refer to `how to install Django "
"with pip <https://docs.djangoproject.com/en/1.8/topics/install/#installing-"
"official-release>`_. You can install ``setuptools`` the same way."
msgstr ""
"El estado actual del empaquetado en Python está un poco confuso con varias "
"herramientas. Para este tutorial vamos a usar setuptools_ para construir "
"nuestro paquete. Es la herramienta recomendada (unida al fork de "
"``distribute``). Vamos a usar también `pip`_ para instalarlo y "
"desinstalarlo. Deberías instalar estos dos paquetes ahora. Si necesitaras "
"ayuda, podés chequear `cómo instalar Django con pip <https://docs."
"djangoproject.com/en/1.8/topics/install/#installing-official-release>`_. De "
"la misma manera se puede instalar ``setuptools``."

#: ../../intro/reusable-apps.txt:118
msgid "Packaging your app"
msgstr "Empaquetando nuestra app"

#: ../../intro/reusable-apps.txt:120
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""
"El *empaquetar* Python se refiere a preparar nuestra app en un formato "
"específico que pueda ser fácilmente instalable para su uso. Django mismo "
"viene empaquetado de forma muy similar. Para una app pequeña como ``polls``, "
"el proceso no es muy complicado."

#: ../../intro/reusable-apps.txt:124
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""
"Primero, creamos un directorio padre para ``polls``, fuera del proyecto "
"Django. Llamaremos a este directorio ``django-polls``."

#: ../../intro/reusable-apps.txt:127
msgid "Choosing a name for your app"
msgstr "Eligiendo un nombre para nuestra app"

#: ../../intro/reusable-apps.txt:129
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""
"Cuando uno elige un nombre para un paquete es buena idea chequear fuentes "
"como PyPI para evitar conflictos de nombre con paquetes existentes. A menudo "
"es útil usar el prefijo ``django-`` para el nombre cuando uno crea un "
"paquete para distruirlo. Esto ayuda a que aquellos que buscan apps de Django "
"identifiquen la app como específica para Django."

#: ../../intro/reusable-apps.txt:135
msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django `contrib packages <https://docs."
"djangoproject.com/en/1.8/ref/contrib/index>`_, for example ``auth``, "
"``admin``, or ``messages``."
msgstr ""
"El nombre de una aplicación (es decir, la parte final del path de "
"importación) *debe* ser único en :setting:`INSTALLED_APPS`. Evitá usar el "
"mismo nombre que cualquiera de los `paquetes contrib de Django <https://docs."
"djangoproject.com/en/1.8/ref/contrib/index>`_, como ``auth``, ``admin``, o "
"``messages``."

#: ../../intro/reusable-apps.txt:140
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr "Movemos el directorio ``polls`` dentro de ``django-polls``."

#: ../../intro/reusable-apps.txt:142
msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""
"Creamos un archivo ``django-polls/README.rst`` con el siguiente contenido:"

#: ../../intro/reusable-apps.txt:177
msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to "
"use your code."
msgstr ""
"Creamos un archivo ``django-polls/LICENSE``. Elegir una licencia está más "
"allá del alcance de este tutorial, pero vale decir que código liberado "
"públicamente sin una licencia es *inútil*. Django y muchas aplicaciones "
"Django se distribuyen bajo la licencia BSD; sin embargo, uno puede elegir su "
"propia licencia, teniendo en cuenta que ésta afecta quién puede utilizar "
"nuestro código."

#: ../../intro/reusable-apps.txt:184
msgid ""
"Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `setuptools docs <http://pythonhosted.org/"
"setuptools/setuptools.html>`_ have a good explanation. Create a file "
"``django-polls/setup.py`` with the following contents:"
msgstr ""
"Luego vamos a crear un archivo ``setup.py`` que provee los detalles sobre "
"cómo construir e instalar la app. Escapa a este tutorial una explicación más "
"detallada sobre este archivo, pero `la documentación de setuptools <http://"
"pythonhosted.org/setuptools/setuptools.html>`_ tiene una buena explicación. "
"Creamos el archivo ``django-polls/setup.py`` con el siguiente contenido:"

#: ../../intro/reusable-apps.txt:230
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"setuptools docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following contents:"
msgstr ""
"Solamente módulos y paquetes Python se incluyen por defecto en el paquete. "
"Para incluir archivos adicionales, necesitamos crear un archivo ``MANIFEST."
"in``. La documentación sobre distribute referida en el paso anterior revisa "
"este archivo en más detalle. Para incluir los templates y nuestro archivo "
"LICENSE, creamos el archivo ``django-polls/MANIFEST.in`` con el siguiente "
"contenido:"

#: ../../intro/reusable-apps.txt:245
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""
"Es opcional, pero se recomienda, incluir documentación detallada con una "
"app. Creamos un directorio vacío ``django-polls/docs`` para la futura "
"documentación. Agregamos una línea adicional al archivo ``django-polls/"
"MANIFEST.in``::"

#: ../../intro/reusable-apps.txt:251
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""
"Notemos que el directorio ``docs`` no se va a incluir en nuestro paquete a "
"menos que agreguemos algunos archivos dentro. Muchas apps Django también "
"proveen su documentación de forma online mediante sitios como `readthedocs."
"org <https://readthedocs.org>`_."

#: ../../intro/reusable-apps.txt:255
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""
"Intentemos construir nuestro paquete con ``python setup.py sdist`` "
"(corriendo desde dentro de ``django-polls``). Esto crea un directorio "
"llamado ``dist`` y crea un nuevo paquete, ``django-polls-0.1.tar.gz``."

#: ../../intro/reusable-apps.txt:259
msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects <https://packaging.python.org/en/latest/distributing."
"html>`_."
msgstr ""
"Para más información sobre empaquetar, podés ver el `Tutorial sobre "
"empaquetar y distribuir proyectos <https://packaging.python.org/en/latest/"
"distributing.html>`_."

#: ../../intro/reusable-apps.txt:263
msgid "Using your own package"
msgstr "Usando nuestro paquete"

#: ../../intro/reusable-apps.txt:265
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""
"Como movimos el directorio ``polls`` fuera de nuestro proyecto, no funciona "
"más. Vamos a solucionar esto instalando nuestro nuevo paquete, ``django-"
"polls``."

#: ../../intro/reusable-apps.txt:268
msgid "Installing as a user library"
msgstr "Instalando como librería de usuario"

#: ../../intro/reusable-apps.txt:270
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as "
"well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""
"Los siguientes pasos instalan ``django-polls`` como una librería de usuario. "
"Las instalaciones por usuario tienen muchas ventajas sobre las instalaciones "
"a nivel sistema, como por ejemplo permitir usar un paquete en sistemas donde "
"no se tiene acceso de administrador o también prevenir que un paquete afecte "
"servicios de sistema y/o otros usuarios en la máquina."

#: ../../intro/reusable-apps.txt:276
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""
"Notar que las instalaciones por usuario pueden incluso afectar herramientas "
"del sistema que corren bajo ese usuario, entonces ``virtualenv`` es un "
"solución más robusta (ver más abajo)."

#: ../../intro/reusable-apps.txt:280
msgid ""
"To install the package, use pip (you already `installed it <https://docs."
"djangoproject.com/en/1.8/topics/install/#installing-official-release>`_, "
"right?)::"
msgstr ""
"Para instalar el paquete usamos pip (ya lo `instalamos <https://docs."
"djangoproject.com/en/1.8/topics/install/#installing-official-release>`_, "
"no?)::"

#: ../../intro/reusable-apps.txt:284
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""
"Con suerte, nuestro proyecto Django debería funcionar correctamente de "
"nuevo. Levantamos el servidor de desarrollo para confirmarlo."

#: ../../intro/reusable-apps.txt:287
msgid "To uninstall the package, use pip::"
msgstr "Para desinstalar el paquete, usamos pip::"

#: ../../intro/reusable-apps.txt:294
msgid "Publishing your app"
msgstr "Publicando nuestra app"

#: ../../intro/reusable-apps.txt:296
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""
"Ahora que ya empaquetamos y testeamos ``django-polls``, está lista para "
"compartirla con el mundo! Si este no fuera sólo un ejemplo, uno podría:"

#: ../../intro/reusable-apps.txt:299
msgid "Email the package to a friend."
msgstr "Enviar el paquete vía email a un amigo."

#: ../../intro/reusable-apps.txt:301
msgid "Upload the package on your Web site."
msgstr "Subir el paquete al sitio web propio."

#: ../../intro/reusable-apps.txt:303
msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good "
"tutorial <https://packaging.python.org/en/latest/distributing.html#uploading-"
"your-project-to-pypi>`_ for doing this."
msgstr ""
"Subir el paquete a un repositorio público, como ser `Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ tiene `un "
"buen tutorial <https://packaging.python.org/en/latest/distributing."
"html#uploading-your-project-to-pypi>`_ para esto."

#: ../../intro/reusable-apps.txt:309
msgid "Installing Python packages with virtualenv"
msgstr "Instalando paquetes Python con virtualenv"

#: ../../intro/reusable-apps.txt:311
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""
"Instalar la app polls como librería de usuario tiene algunas desventajas:"

#: ../../intro/reusable-apps.txt:314
msgid ""
"Modifying the user libraries can affect other Python software on your system."
msgstr ""
"Modificar las librerías de usuario puede afectar otro software Python de "
"nuestro sistema."

#: ../../intro/reusable-apps.txt:316
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""
"No podemos correr múltiples versiones de nuestro paquete (u otros con el "
"mismo nombre)."

#: ../../intro/reusable-apps.txt:319
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""
"Típicamente, estas situaciones sólo se presentan si uno mantiene varios "
"proyectos Django. En ese caso, la mejor solución es usar `virtualenv <http://"
"www.virtualenv.org/>`_. Esta herramienta permite mantener múltiples "
"ambientes Python aislados, cada uno con su propia copia de librerías y "
"paquetes."

#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr "Escribiendo tu primera Django app, parte 1"

#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr "Vamos a aprender mediante un ejemplo."

#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""
"A lo largo de este tutorial vamos a recorrer la creación de una aplicación "
"de encuestas básica."

#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr "Consistirá de dos partes:"

#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr "Un sitio público que permite a la gente ver y votar encuestas."

#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""
"Un sitio de administración que nos permite agregar, cambiar y borrar "
"encuestas."

#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""
"Vamos a asumir que tenés :doc:`Django ya instalado </intro/install>`. Podés "
"chequear esto, así como también la versión, corriendo el siguiente comando:"

#: ../../intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""
"Si Django está instalado, deberías ver la versión de tu instalación. Si no, "
"obtendrás un error diciendo \"No module named django\"."

#: ../../intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 3.2 or later. If "
"the Django version doesn't match, you can refer to the tutorial for your "
"version of Django by using the version switcher at the bottom right corner "
"of this page, or update Django to the newest version. If you are still using "
"Python 2.7, you will need to adjust the code samples slightly, as described "
"in comments."
msgstr ""
"Este tutorial está escrito para Django |version| y Python 3.2 o mayor. Si la "
"versión de Django no coincide, te podés remitir a la versión del tutorial "
"que corresponda, o actualizar Django a la versión más reciente. Si todavía "
"usás Python 2.7, vas a necesitar ajustar los ejemplos ligeramente como se "
"describe en los comentarios.s"

#: ../../intro/tutorial01.txt:32
msgid ""
"See `How to install Django <https://docs.djangoproject.com/en/1.8/topics/"
"install>`_ for advice on how to remove older versions of Django and install "
"a newer one."
msgstr ""
"Ver `Cómo instalar Django <https://docs.djangoproject.com/en/1.8/topics/"
"install>`_ para leer sobre cómo borrar versiones anteriores de Django e "
"instalar una más reciente."

#: ../../intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users mailing list <http://groups.google.com/group/django-users/"
">`_ or drop by `#django on irc.freenode.net <irc://irc.freenode.net/"
"django>`_ to chat with other Django users who might be able to help."
msgstr ""
"Si tenés problemas siguiendo este tutorial, por favor posteá un mensaje a "
"`lista de correo django-users <http://groups.google.com/group/django-users/"
">`_ o date una vuelta por `#django en irc.freenode.net <irc://irc.freenode."
"net/django>`_ para chatear con otros usuarios de Django que quizás te puedan "
"ayudar."

#: ../../intro/tutorial01.txt:43
msgid "Creating a project"
msgstr "Creando un proyecto"

#: ../../intro/tutorial01.txt:45
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""
"Si esta es tu primera vez usando Django, tenés que hacer un setup inicial. "
"En particular, necesitás auto-generar algo de código que define un Django :"
"term:`project` -- una colección de settings para una instancia de Django, "
"que incluye la configuración de la base de datos, opciones específicas de "
"Django y settings específicos de las aplicaciones."

#: ../../intro/tutorial01.txt:51
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""
"Desde la línea de comandos, ``cd`` al directorio donde quisieras guardar tu "
"código, y corré el siguiente comando:"

#: ../../intro/tutorial01.txt:58
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see `Problems running django-admin.py <https://docs."
"djangoproject.com/en/1.8/faq/troubleshooting/#troubleshooting-django-admin-"
"py>`_."
msgstr ""
"Esto creará el directorio ``mysite`` en tu directorio actual. Si no "
"funcionó, podés ver `Problemas corriendo django-admin.py <https://docs."
"djangoproject.com/en/1.8/faq/troubleshooting/#troubleshooting-django-admin-"
"py>`_."

#: ../../intro/tutorial01.txt:63
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""
"Hay que evitar nombrar los proyectos que coincidan con componentes built-in "
"de Python o Django. En particular, significa que uno no debería usar nombres "
"tales como ``django`` (en conflicto con Django mismo) o ``test`` (en "
"conflicto con el paquete built-in ``test`` de Python)."

#: ../../intro/tutorial01.txt:68
msgid "Where should this code live?"
msgstr "Dónde debería estar este código?"

#: ../../intro/tutorial01.txt:70
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document "
"root, because it risks the possibility that people may be able to view your "
"code over the Web. That's not good for security."
msgstr ""
"Si tu background es en PHP (sin usar un framework moderno), probablemente "
"estés acostumbrado a poner el código en la raíz del servidor web (un lugar "
"como ``/var/www``). Con Django no se hace así. No es una buena idea poner "
"código Python en dicho lugar, porque existe el riesgo de que la gente pueda "
"ver tu código en la web. Eso no es bueno en relación a la seguridad."

#: ../../intro/tutorial01.txt:77
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""
"Uno pone el código en algún directorio **fuera** de la raíz del servidor "
"web, como :file:`/home/mycode`."

#: ../../intro/tutorial01.txt:80
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr "Veamos lo que creó :djadmin:`startproject`::"

#: ../../intro/tutorial01.txt:90
msgid "These files are:"
msgstr "Estos archivos son:"

#: ../../intro/tutorial01.txt:92
msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""
"El directorio :file:`mysite/` de más afuera es sólo un contenedor para tu "
"proyecto. El nombre no afecta a Django; lo podés renombrar libremente como "
"quieras."

#: ../../intro/tutorial01.txt:96
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in `/ref/django-admin <https://docs.djangoproject.com/en/1.8/ref/"
"django-admin>`_."
msgstr ""
":file:`manage.py`: Una utilidad de línea de comandos que te permite "
"interactuar con este proyecto Django de varias maneras. Podés leer todos los "
"detalles sobre :file:`manage.py` en `/ref/django-admin <https://docs."
"djangoproject.com/en/1.8/ref/django-admin>`_."

#: ../../intro/tutorial01.txt:100
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""
"El directorio :file:`mysite/` interno es el paquete Python para tu proyecto. "
"Su nombre es el nombre de paquete Python que necesitarás usar para importar "
"cualquier cosa adentro del mismo (e.g. ``mysite.urls``)."

#: ../../intro/tutorial01.txt:104
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""
":file:`mysite/__init__.py`: Un archivo vacío que le dice a Python que este "
"directorio debe considerarse un paquete Python (si sos nuevo con Python, "
"podés `leer más sobre paquetes`_ en la documentación oficial de Python)."

#: ../../intro/tutorial01.txt:108
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django project.  "
"`/topics/settings <https://docs.djangoproject.com/en/1.8/topics/settings>`_ "
"will tell you all about how settings work."
msgstr ""
":file:`mysite/settings.py`: Settings/configuración de este proyecto Django. "
"`/topics/settings <https://docs.djangoproject.com/en/1.8/topics/settings>`_  "
"describe cómo funcionan estos settings."

#: ../../intro/tutorial01.txt:112
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in `/topics/http/urls <https://docs.djangoproject.com/en/1.8/topics/"
"http/urls>`_."
msgstr ""
":file:`mysite/urls.py`: Declaración de las URL de este proyecto Django; una "
"\"tabla de contenidos\" de tu sitio Django. Podés leer más sobre URLs en `/"
"topics/http/urls <https://docs.djangoproject.com/en/1.8/topics/http/urls>`_."

#: ../../intro/tutorial01.txt:116
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See `/howto/deployment/wsgi/index <https://docs."
"djangoproject.com/en/1.8/howto/deployment/wsgi/index>`_ for more details."
msgstr ""
":file:`mysite/wsgi.py`: Punto de entrada para servir tu proyecto mediante "
"servidores web compatibles con WSGI. Podés ver `/howto/deployment/wsgi/index "
"<https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/index>`_ para "
"más detalles."

#: ../../intro/tutorial01.txt:122
msgid "Database setup"
msgstr "Configurar la base de datos"

#: ../../intro/tutorial01.txt:124
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""
"Ahora editemos :file:`mysite/settings.py`. Es un módulo Python normal, que "
"define variables a nivel módulo que representan los settings de Django."

#: ../../intro/tutorial01.txt:127
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support "
"your database. When starting your first real project, however, you may want "
"to use a more robust database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""
"Por defecto, la configuración usa SQLite. Si sos nuevo en lo que a base de "
"datos se refiere, o solamente te interesa probar Django, está es la opción "
"más simple. SQLite está incluido en Python, entonces no es necesario "
"instalar nada extra. Sin embargo, cuando empieces un proyecto más serio "
"quizás quieras considerar una base de datos más robusta como PostgreSQL, "
"para evitar dolores de cabeza cambiando el motor de base de datos durante el "
"camino."

#: ../../intro/tutorial01.txt:134
msgid ""
"If you wish to use another database, install the appropriate `database "
"bindings <https://docs.djangoproject.com/en/1.8/topics/install/#database-"
"installation>`_, and change the following keys in the :setting:`DATABASES` "
"``'default'`` item to match your database connection settings:"
msgstr ""
"Si querés usar otro motor de base de datos, instalá los `bindings apropiados "
"<https://docs.djangoproject.com/en/1.8/topics/install/#database-"
"installation>`_ y cambiá las siguientes claves en :setting:`DATABASES` "
"``'default'`` para que coincidan con la configuración de tu conexión a la "
"base de datos:"

#: ../../intro/tutorial01.txt:139
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"sqlite3'``, ``'django.db.backends.postgresql_psycopg2'``, ``'django.db."
"backends.mysql'``, or ``'django.db.backends.oracle'``. Other backends are "
"`also available <https://docs.djangoproject.com/en/1.8/ref/databases/#third-"
"party-notes>`_."
msgstr ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Puede ser ``'django.db.backends."
"postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db."
"backends.sqlite3'`` o ``'django.db.backends.oracle'``. También hay :setting:"
"`otros backends disponibles <https://docs.djangoproject.com/en/1.8/ref/"
"databases/#third-party-notes>`_."

#: ../../intro/tutorial01.txt:145
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file "
"in your project directory."
msgstr ""
":setting:`NAME` -- El nombre de la base de datos. Si estás usando SQLite, tu "
"base de datos será un archivo en tu computadora; en ese caso, :setting:"
"`NAME` debería ser un path absoluto, incluyendo el nombre del archivo de "
"base de datos. Si no existiera, se creará automáticamente cuando se "
"sincronice la base de datos por primera vez."

#: ../../intro/tutorial01.txt:151
msgid ""
"If you are not using SQLite as your database, additional settings such as :"
"setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For more "
"details, see the reference documentation for :setting:`DATABASES`."
msgstr ""
"Si no estás usando SQLite, tenés que agregar parámetros adicionales como :"
"setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`. Para más detalles, ver "
"la documentación de referencia para :setting:`DATABASES`."

#: ../../intro/tutorial01.txt:156
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""
"Si usás PostgreSQL o MySQL, fijate de crear una base de datos antes de "
"seguir. Para ello bastará con hacer \\\"``CREATE DATABASE database_name;``\\"
"\" en el intérprete del motor correspondiente."

#: ../../intro/tutorial01.txt:160
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""
"Si usás SQLite, no es necesario crear nada de antemano - el archivo de la "
"base de datos se creará automáticamente cuando haga falta."

#: ../../intro/tutorial01.txt:163
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to "
"your time zone."
msgstr ""
"Mientras editás :file:`settings.py`, podés setear :setting:`TIME_ZONE` a tu "
"zona horaria."

#: ../../intro/tutorial01.txt:166
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""
"También podés mirar el setting :setting:`INSTALLED_APPS` hacia el final del "
"archivo. Éste registra los nombres de todas las aplicaciones Django que "
"están activadas en esta instancia Django. Las apps se pueden usar en "
"múltiples proyectos, y podés empaquetarlas y distribuirlas para su uso por "
"otros en sus respectivos proyectos."

#: ../../intro/tutorial01.txt:171
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""
"Por defecto, :setting:`INSTALLED_APPS` contiene las siguientes apps, todas "
"provistas por Django:"

#: ../../intro/tutorial01.txt:174
msgid ""
":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2 "
"of this tutorial </intro/tutorial02>`."
msgstr ""
":mod:`django.contrib.admin` -- El sitio de administración. Lo vamos a usar "
"en :doc:`la parte 2 de este tutorial </intro/tutorial02>`."

#: ../../intro/tutorial01.txt:177
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ":mod:`django.contrib.auth` -- Sistema de autenticación."

#: ../../intro/tutorial01.txt:179
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""
":mod:`django.contrib.contenttypes` -- Un framework para tipos de contenido."

#: ../../intro/tutorial01.txt:181
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""
":mod:`django.contrib.sessions` -- Un framework para manejo de sesiones."

#: ../../intro/tutorial01.txt:183
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ":mod:`django.contrib.messages` -- Un framework de mensajes."

#: ../../intro/tutorial01.txt:185
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""
":mod:`django.contrib.staticfiles` -- Un framework para manejar los archivos "
"estáticos."

#: ../../intro/tutorial01.txt:188
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""
"Estas aplicaciones están incluidas por defecto como conveniencia para el "
"caso común."

#: ../../intro/tutorial01.txt:190
msgid ""
"Some of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""
"Algunas de estas aplicaciones hace uso de al menos una tabla de la base de "
"datos, entonces necesitaremos crear las respectivas tablas antes de poder "
"usarlas. Para ello corremos el siguiente comando:"

#: ../../intro/tutorial01.txt:198
msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations "
"shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client "
"for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), "
"or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""
"El comando :djadmin:`migrate` se fija en el setting :setting:"
"`INSTALLED_APPS` y crea las tablas necesarias en la base de datos "
"determinada por los parámetros establecidos en el archivo :file:`mysite/"
"settings.py`. Verás un mensaje por cada migración que se aplica. Si estás "
"interesado, podés correr el cliente de línea de comandos de tu base de datos "
"y tipear ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), o ``.schema`` "
"(SQLite) para ver las tablas que Django creó."

#: ../../intro/tutorial01.txt:206
msgid "For the minimalists"
msgstr "Para los minimalistas"

#: ../../intro/tutorial01.txt:208
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`migrate`. The :djadmin:`migrate` "
"command will only run migrations for apps in :setting:`INSTALLED_APPS`."
msgstr ""
"Como dijimos arriba, las aplicaciones incluidas por defecto son para el caso "
"común, pero no todos las necesitan. Si no necesitás alguna o ninguna de las "
"mismas, sos libre de comentar o borrar las líneas apropiadas de :setting:"
"`INSTALLED_APPS` antes de correr :djadmin:`migrate`. El comando :djadmin:"
"`migrate` sólo creará las tablas para las apps en :setting:`INSTALLED_APPS`."

#: ../../intro/tutorial01.txt:216
msgid "The development server"
msgstr "El servidor de desarrollo"

#: ../../intro/tutorial01.txt:218
msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite` "
"directory, if you haven't already, and run the following commands:"
msgstr ""
"Verifiquemos que el proyecto Django funciona. Cambiamos al directorio :file:"
"`mysite` de más afuera, si no lo habías hecho, y corremos los siguientes "
"comandos:"

#: ../../intro/tutorial01.txt:225
msgid "You'll see the following output on the command line:"
msgstr "Veremos la siguiente salida en la línea de comandos:"

#: ../../intro/tutorial01.txt:237
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""
"Hemos levantado el servidor de desarrollo de Django, un servidor web liviano "
"escrito puramente en Python. Viene incluido con Django para permitir "
"desarrollar rápidamente, sin necesidad de configurar un servidor de "
"producción -- como Apache -- hasta el momento en que todo esté listo para "
"producción."

#: ../../intro/tutorial01.txt:242
msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""
"Este es un buen momento para notar: **NO** hay que usar este servidor para "
"nada que se parezca a un entorno de producción. Está pensado solamente para "
"desarrollo (Django es un framework web, no un servidor)."

#: ../../intro/tutorial01.txt:246
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""
"Ahora que el servidor está corriendo, podemos visitar http://127.0.0.1:8000/ "
"en nuestro browser. Deberíamos ver una página con el mensaje \\\"Welcome to "
"Django\\\". Funcionó!"

#: ../../intro/tutorial01.txt:250
msgid "Changing the port"
msgstr "Cambiando el puerto"

#: ../../intro/tutorial01.txt:252
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""
"Por defecto, el comando :djadmin:`runserver` levanta el servidor de "
"desarrollo en una IP interna en el puerto 8000."

#: ../../intro/tutorial01.txt:255
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""
"Si uno quisiera cambiar el puerto, se puede pasar como argumento en la línea "
"de comandos. Por ejemplo, para levantar el servidor escuchando en el puerto "
"8080:"

#: ../../intro/tutorial01.txt:263
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""
"Para cambiar la dirección IP del servidor, se pasa junto con el puerto. "
"Entonces, para escuchar en todas las IP públicas (útil para mostrarle "
"nuestro trabajo en otras computadoras), podemos usar:"

#: ../../intro/tutorial01.txt:271
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""
"La documentación completa sobre el servidor de desarrollo se puede encontrar "
"en :djadmin:`runserver`."

#: ../../intro/tutorial01.txt:274
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr "Recarga automática de :djadmin:`runserver`"

#: ../../intro/tutorial01.txt:276
msgid ""
"The development server automatically reloads Python code for each request as "
"needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""
"El servidor de desarrollo recarga automáticamente el código Python en cada "
"request según sea necesario. No es necesario reiniciar el servidor para que "
"los cambios al código tengan efecto. Sin embargo, algunas acciones como "
"agregar archivos no producen un reinicio automático y entonces será "
"necesario reiniciar el servidor a mano en esos casos."

#: ../../intro/tutorial01.txt:284
msgid "Creating models"
msgstr "Creando modelos"

#: ../../intro/tutorial01.txt:286
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""
"Ahora que hemos levantado nuestro entorno -- un \\\"proyecto\\\" --, estamos "
"listos para empezar a trabajar."

#: ../../intro/tutorial01.txt:289
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically "
"generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""
"Cada aplicación que uno escribe en Django consiste de un paquete Python que "
"sigue una ciera convención. Django trae una utilidad que automáticamente "
"genera la estructura de directorios básica de una app, de tal manera que uno "
"pueda concentrarse en escribir código en lugar de directorios."

#: ../../intro/tutorial01.txt:294
msgid "Projects vs. apps"
msgstr "Proyectos vs. apps"

#: ../../intro/tutorial01.txt:296
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""
"Cuál es la diferencia entre un proyecto y una app? Una app es una aplicación "
"web que hace algo -- e.g., un sistema de blog, una base de datos de "
"registros públicos o una aplicación simple de encuestas. Un proyecto es una "
"colección de configuración y apps para un sitio web particular. Un proyecto "
"puede contener múltiples app. Una app puede estar en múltiples proyectos."

#: ../../intro/tutorial01.txt:302
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""
"Las apps viven en cualquier lugar del `Python path`_. En este tutorial, "
"vamos a crear nuestra app en el directorio donde se encuentra el archivo :"
"file:`manage.py`, para que pueda ser importada como módulo de primer nivel, "
"en lugar de ser un submódulo de ``mysite``."

#: ../../intro/tutorial01.txt:306
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""
"Para crear una app, nos aseguramos de estar en el mismo directorio que :file:"
"`manage.py` y corremos el comando:"

#: ../../intro/tutorial01.txt:313
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr "Esto creará el directorio :file:`polls`, con la siguiente estructura::"

#: ../../intro/tutorial01.txt:324
msgid "This directory structure will house the poll application."
msgstr "Esta estructura de directorio va a almacenar la aplicación ``poll``."

#: ../../intro/tutorial01.txt:326
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""
"El primer paso al escribir una app web en Django es definir los modelos -- "
"esencialmente, el esquema de base de datos, con metadata adicional."

#: ../../intro/tutorial01.txt:329 ../../intro/tutorial01.txt:413
#: ../../intro/tutorial02.txt:9 ../../intro/tutorial03.txt:10
#: ../../intro/tutorial03.txt:484
msgid "Philosophy"
msgstr "Filosofía"

#: ../../intro/tutorial01.txt:331
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the `DRY Principle <https://docs.djangoproject.com/en/1.8/"
"misc/design-philosophies/#dry>`_. The goal is to define your data model in "
"one place and automatically derive things from it."
msgstr ""
"Un modelo es la única y definitiva fuente de datos de nuestra información. "
"Contiene los campos y comportamientos esenciales de los datos que vamos a "
"guardar. Django sigue el :ref:`principio DRY <https://docs.djangoproject.com/"
"en/1.8/misc/design-philosophies/#dry>`_. El objetivo es definir el modelo de "
"datos en un lugar y automáticamente derivar lo demás a partir de éste."

#: ../../intro/tutorial01.txt:336
msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""
"Esto incluye las migraciones - a diferencia de Ruby On Rails, por ejemplo, "
"las migraciones son completamente derivadas del archivo de modelos, y son "
"esencialmente una historia que Django puede seguir para actualizar la base "
"de datos y mantenerla en sincronía con tus modelos."

#: ../../intro/tutorial01.txt:341
msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""
"En nuestra simple app poll, vamos a crear dos modelos: ``Question`` and "
"``Choice``. Una ``Question`` tiene una pregunta y una fecha de publicación. "
"Una ``Choice`` tiene dos campos: el texto de la opción y un contador de "
"votos. Cada ``Choice`` está asociada a una ``Question``."

#: ../../intro/tutorial01.txt:346
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this:"
msgstr ""
"Estos conceptos se representan mediante clases Python. Editamos el archivo :"
"file:`polls/models.py` para que se vea así:"

#: ../../intro/tutorial01.txt:365
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""
"El código es directo. Cada modelo se representa por una clase que hereda de :"
"class:`django.db.models.Model`. Cada modelo tiene ciertas variables de "
"clase, cada una de las cuales representa un campo de la base de datos en el "
"modelo."

#: ../../intro/tutorial01.txt:369
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""
"Cada campo se representa como una instancia de una clase :class:`~django.db."
"models.Field` -- e.g., :class:`~django.db.models.CharField` para campos de "
"caracteres y :class:`~django.db.models.DateTimeField` para fecha y hora. "
"Esto le dice a Django qué tipo de datos almacena cada campo."

#: ../../intro/tutorial01.txt:374
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""
"El nombre de cada instancia de :class:`~django.db.models.Field` (e.g. "
"``question_text`` o ``pub_date``) es el nombre del campo, en formato "
"amigable (a nivel código). Vamos a usar este valor en nuestro código, y la "
"base de datos lo va a usar como nombre de columna."

#: ../../intro/tutorial01.txt:378
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Question.pub_date``. "
"For all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""
"Se puede usar un primer argumento, opcional, de :class:`~django.db.models."
"Field` para designar un nombre legible (a nivel ser humano). Se usa en "
"algunas partes en que Django hace introspección, y funciona como "
"documentación. Si no se provee este argumento, Django usa el nombre del "
"campo. En el ejemplo, solamente definimos un nombre descriptivo para "
"``Question.pub_date``. Para todos los demás campos en el modelo, el nombre "
"del campo será suficiente."

#: ../../intro/tutorial01.txt:386
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. :"
"class:`~django.db.models.CharField`, for example, requires that you give it "
"a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""
"Algunas clases de :class:`~django.db.models.Field` tienen argumentos "
"requeridos. Por ejemplo, :class:`~django.db.models.CharField` requiere que "
"se pase :attr:`~django.db.models.CharField.max_length`. Esto se usa no sólo "
"en el esquema de la base de datos sino también en la validación de los "
"datos, como veremos más adelante."

#: ../../intro/tutorial01.txt:391
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments; "
"in this case, we've set the :attr:`~django.db.models.Field.default` value of "
"``votes`` to 0."
msgstr ""
"Un :class:`~django.db.models.Field` puede tener también varios argumentos "
"opcionales; en este caso, seteamos el valor :attr:`~django.db.models.Field."
"default` de ``votes`` a 0."

#: ../../intro/tutorial01.txt:395
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each ``Choice`` is related to a single "
"``Question``. Django supports all the common database relationships: many-to-"
"one, many-to-many and one-to-one."
msgstr ""
"Finalmente, notemos que se define una relación, usando :class:`~django.db."
"models.ForeignKey`. Esto le dice a Django que cada ``Choice`` está "
"relacionada a una única ``Question``. Django soporta todos los tipos de "
"relación comunes en una base de datos: muchos-a-uno, muchos-a-muchos y uno-a-"
"uno."

#: ../../intro/tutorial01.txt:403
msgid "Activating models"
msgstr "Activando modelos"

#: ../../intro/tutorial01.txt:405
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""
"Ese poquito código le da a Django un montón de información. A partir de él, "
"Django puede:"

#: ../../intro/tutorial01.txt:408
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""
"Crear el esquema de base de datos (las sentencias ``CREATE TABLE``) para la "
"app."

#: ../../intro/tutorial01.txt:409
msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""
"Crear la API Python de acceso a la base de datos para acceder a los objetos "
"``Question`` y ``Choice``."

#: ../../intro/tutorial01.txt:411
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""
"Pero primero debemos informarle a nuestro proyecto que la app ``polls`` está "
"instalada."

#: ../../intro/tutorial01.txt:415
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""
"Las apps Django son \"pluggable\": podés usar una app en múltiples "
"proyectos, y distribuirlas, porque no necesitan estar ligadas a una "
"instancia de Django particular."

#: ../../intro/tutorial01.txt:419
msgid ""
"Edit the :file:`mysite/settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this:"
msgstr ""
"Editamos de nuevo el archivo :file:`mysite/settings.py`, y cambiamos el "
"setting :setting:`INSTALLED_APPS` para incluir ``'polls'``. Se verá algó "
"así::"

#: ../../intro/tutorial01.txt:436
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr "Ahora Django sabe sobre nuestra app ``polls``. Corramos otro comando:"

#: ../../intro/tutorial01.txt:442
msgid "You should see something similar to the following:"
msgstr "\"Deberíamos ver algo similar a lo siguiente:"

#: ../../intro/tutorial01.txt:452
msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""
"Corriendo ``makemigrations``, le estamos diciendo a Django que hemos hecho "
"algunos cambios a nuestros modelos (en este caso, nuevos modelos) y que "
"quisiéramos registrar esos cambios en una *migración*."

#: ../../intro/tutorial01.txt:456
msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file ``polls/"
"migrations/0001_initial.py``. Don't worry, you're not expected to read them "
"every time Django makes one, but they're designed to be human-editable in "
"case you want to manually tweak how Django changes things."
msgstr ""
"Las migraciones es como DJango guarda los cambios a nuestros modelos (y por "
"lo tanto al esquema de base de datos) - son solamente archivos en disco. "
"Podríamos leer la migración de nuestro nuevo modelo si quisiéramos; es el "
"archivo ``polls/migrations/0001_initial.py``. No te preocupes, no se espera "
"que uno las lea cada vez que Django crea una nueva, pero están diseñadas "
"para ser editables a mano en caso de que se quiera hacer alguna modificación "
"en la forma que Django aplica los cambios."

#: ../../intro/tutorial01.txt:463
msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""
"Existe un comando que corre las migraciones y administra el esquema de base "
"de datos automáticamente - se llama :djadmin:`migrate`, y llegaremos a él en "
"un momento - pero primero, veamos cuál es el SQL que la migración correría. "
"El comando :djadmin:`sqlmigrate` toma nombres de migraciones y devuelve el "
"SQL respectivo:"

#: ../../intro/tutorial01.txt:472
msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""
"Deberías ver algo similar a lo siguiente (reformateado aquí por legibilidad):"

#: ../../intro/tutorial01.txt:499
msgid "Note the following:"
msgstr "Notemos lo siguiente:"

#: ../../intro/tutorial01.txt:501
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""
"La salida exacta varía de acuerdo a la base de datos que se esté usando. El "
"ejemplo anterior está generado para PostgreSQL."

#: ../../intro/tutorial01.txt:504
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""
"Los nombres de las tablas se generan automáticamente combinando el nombre de "
"la app (``polls``) con el nombre, en minúsculas del modelo -- ``question`` y "
"``choice`` (se puede modificar este comportamientos)."

#: ../../intro/tutorial01.txt:508
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""
"Las claves primarias (IDs) se agregan automáticamente (esto también se puede "
"modificar)."

#: ../../intro/tutorial01.txt:510
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""
"Por convención, Django añade ``\"_id\"`` al nombre del campo de clave "
"foránea (sí, se puede modificar esto también)."

#: ../../intro/tutorial01.txt:513
msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""
"La relación de clave foránea se hace explícita mediante un constraint "
"``FOREIGN KEY``. No te preocupes por la parte del ``DEFERRABLE``; indica a "
"PostgreSQL no forzar la clave foránea hasta el final de la transacción."

#: ../../intro/tutorial01.txt:517
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same "
"goes for quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""
"Se ajusta a la base de datos que se esté usando, y entonces los tipos de "
"campos específicos de la base de datos como ``auto_increment`` (MySQL), "
"``serial`` (PostgreSQL), o ``integer primary key`` (SQLite) se manejan por "
"uno automáticamente. Lo mismo aplica para los nombres de los campos -- e.g., "
"el uso de comillas dobles o simples."

#: ../../intro/tutorial01.txt:523
msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your "
"database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""
"El comando :djadmin:`sqlmigrate` no corre la migración en la base de datos - "
"solamente imprime por pantalla para mostrar cuál es el SQL que Django piensa "
"es requerido. Es útil para chequear lo que Django va a hacer o si uno tiene "
"administradores de base de datos que requieren el SQL para aplicar los "
"cambios."

#: ../../intro/tutorial01.txt:529
msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""
"Si te interesa, también podés correr :djadmin:`python manage.py check "
"<check>`; este comando chequea por cualqueir problema en tu proyecto sin "
"aplicar las migraciones ni tocar la base de datos."

#: ../../intro/tutorial01.txt:533
msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""
"Ahora corramos :djadmin:`migrate` de nuevo para crear las tablas "
"correspondientes a nuestros modelos en la base de datos:"

#: ../../intro/tutorial01.txt:549
msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database - "
"essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""
"El comando :djadmin:`migrate` toma todas las migraciones que no se aplicaron "
"(Django lleva registro de cuáles se aplicaron usando una tabla especial en "
"la base de datos llamada ``django_migrations``) y las corre contra la base "
"de datos - esencialmente, sincroniza el esquema de la base de datos con los "
"cambios hechos a nuestros modelos."

#: ../../intro/tutorial01.txt:555
msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables "
"and make new ones - it specializes in upgrading your database live, without "
"losing data. We'll cover them in more depth in a later part of the tutorial, "
"but for now, remember the three-step guide to making model changes:"
msgstr ""
"Las migraciones son muy poderosas y nos permiten cambiar nuestros modelos a "
"lo largo del tiempo, mientras se avanza con el proyecto, sin necesidad de "
"borrar la base de datos o las tablas, y crear nuevas - se especializa en "
"actualizar la base de datos sin perder información. Las veremos en más "
"detalle en una parte más adelante del tutorial, pero por ahora, recordermos "
"los 3 pasos para hacer cambios a nuestros modelos:"

#: ../../intro/tutorial01.txt:561
msgid "Change your models (in ``models.py``)."
msgstr "Cambiar nuestros modelos (en ``models.py``)."

#: ../../intro/tutorial01.txt:562
msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""
"Correr :djadmin:`python manage.py makemigrations <makemigrations>` para "
"crear las migraciones correspondientes a esos cambios"

#: ../../intro/tutorial01.txt:564
msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""
"Correr :djadmin:`python manage.py migrate <migrate>` para aplicar esos "
"cambios a la base de datos."

#: ../../intro/tutorial01.txt:567
msgid ""
"The reason there's separate commands to make and apply migrations is because "
"you'll commit migrations to your version control system and ship them with "
"your app; they not only make your development easier, they're also useable "
"by other developers and in production."
msgstr ""
"La razón por la que hay comandos separados para crear y aplicar migraciones "
"es porque vas a necesitar hacer commit de las migraciones en tu sistema de "
"control de versiones y distribuirlas con tu app; no solamente hacen tu "
"desarrollo más simple, también son reusables por otros desarrolladores y en "
"producción."

#: ../../intro/tutorial01.txt:572
msgid ""
"Read the `django-admin documentation <https://docs.djangoproject.com/en/1.8/"
"ref/django-admin>`_ for full information on what the ``manage.py`` utility "
"can do."
msgstr ""
"Para tener la información completa de qué puede hacer la utilidad ``manage."
"py``, podés leer la documentación de `django-admin.py <https://docs."
"djangoproject.com/en/1.8/ref/django-admin>`_."

#: ../../intro/tutorial01.txt:576
msgid "Playing with the API"
msgstr "Jugando con la API"

#: ../../intro/tutorial01.txt:578
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""
"Ahora pasemos al intérprete interactivo de Python y juguemos con la API que "
"Django nos provee. Para invocar el shell de Python, usamos este comando:"

#: ../../intro/tutorial01.txt:585
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`mysite/settings.py` file."
msgstr ""
"Usamos esto en lugar de simplemente tipear \\\"python\\\" porque :file:"
"`manage.py` setea la variable de entorno ``DJANGO_SETTINGS_MODULE``, que le "
"da a Django el import path al archivo :file:`mysite/settings.py`."

#: ../../intro/tutorial01.txt:589
msgid "Bypassing manage.py"
msgstr "Evitando manage.py"

#: ../../intro/tutorial01.txt:591
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the :envvar:"
"`DJANGO_SETTINGS_MODULE` environment variable to ``mysite.settings``, start "
"a plain Python shell, and set up Django:"
msgstr ""
"Si preferís no usar :file:`manage.py`, no hay problema. Basta setear la "
"variable de entorno :envvar:`DJANGO_SETTINGS_MODULE` a ``mysite.settings``, "
"levantar un shell de Python, y configurar Django:"

#: ../../intro/tutorial01.txt:600
msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""
"Si esto levanta una excepción :exc:`AttributeError`, probablemente estás "
"usando una versión de Django que no coincide con la de este tutorial. "
"Deberías cambiar a la versión del tutorial (o conseguir la versión de "
"Django) correspondiente."

#: ../../intro/tutorial01.txt:604
msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` works."
msgstr ""
"Tenés que correr ``python`` en el mismo directorio que está :file:`manage."
"py`, o asegurarte de que ese directorio está en el Python path, para que "
"``import mysite`` funcione."

#: ../../intro/tutorial01.txt:608
msgid ""
"For more information on all of this, see the `django-admin documentation "
"<https://docs.djangoproject.com/en/1.8/ref/django-admin>`_."
msgstr ""
"Para más información sobre todo esto, ver `la documentación de django-admin "
"<https://docs.djangoproject.com/en/1.8/ref/django-admin>`_."

#: ../../intro/tutorial01.txt:611
msgid ""
"Once you're in the shell, explore the `database API <https://docs."
"djangoproject.com/en/1.8/topics/db/queries>`_::"
msgstr ""
"Una vez en el shell, exploramos la `API de base de datos <https://docs."
"djangoproject.com/en/1.8/topics/db/queries>`_::"

#: ../../intro/tutorial01.txt:651
msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a :meth:`~django.db."
"models.Model.__str__` method to both ``Question`` and ``Choice``:"
msgstr ""
"Un minuto. ``<Question: Question object>`` es, definitivamente, una "
"representación poco útil de este objeto. Arreglemos esto editando los "
"modelos (en el archivo ``polls/models.py``) y agregando el método :meth:"
"`~django.db.models.Model.__str__` a ``Question`` y ``Choice``:"

#: ../../intro/tutorial01.txt:672
msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""
"Es importante agregar el método :meth:`~django.db.models.Model.__str__` a "
"nuestros modelos, no sólo por nuestra salud al tratar con el intérprete, "
"sino también porque es la representación usada por Django en la interfaz de "
"administración autogenerada."

#: ../../intro/tutorial01.txt:677
msgid "``__str__`` or ``__unicode__``?"
msgstr "``__str__`` o ``__unicode__``?"

#: ../../intro/tutorial01.txt:679
msgid ""
"On Python 3, it's easy, just use :meth:`~django.db.models.Model.__str__`."
msgstr "En Python 3, es fácil, usamos :meth:`~django.db.models.Model.__str__`."

#: ../../intro/tutorial01.txt:682
msgid ""
"On Python 2, you should define :meth:`~django.db.models.Model.__unicode__` "
"methods returning ``unicode`` values instead. Django models have a default :"
"meth:`~django.db.models.Model.__str__` method that calls :meth:`~django.db."
"models.Model.__unicode__` and converts the result to a UTF-8 bytestring. "
"This means that ``unicode(p)`` will return a Unicode string, and ``str(p)`` "
"will return a bytestring, with characters encoded as UTF-8. Python does the "
"opposite: ``object`` has a ``__unicode__`` method that calls ``__str__`` and "
"interprets the result as an ASCII bytestring. This difference can create "
"confusion."
msgstr ""
"En Python 2, deberíamos en vez definir el método :meth:`~django.db.models."
"Model.__unicode__` que devuelva valores ``unicode``. Los modelos de Django "
"tienen una implementación por defecto de :meth:`~django.db.models.Model."
"__str__` que llama a :meth:`~django.db.models.Model.__unicode__` y convierte "
"el resultado a un bytestring UTF-8. Esto quiere decir que ``unicode(p)`` "
"devuelve un string Unicode, y ``str(p)`` devuelve un bytestring, encodeado "
"en UTF-8. Python hace lo contrario: ``object`` tiene un método "
"``__unicode__`` que llama a ``__str__`` e interpreta el resultado como un "
"bytestring ASCII. Esta diferencia puede generar confusión."

#: ../../intro/tutorial01.txt:692
msgid "If all of this is gibberish to you, just use Python 3."
msgstr "Si todo esto es mucho ruido, usá Python 3."

#: ../../intro/tutorial01.txt:694
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""
"Notar que estos son métodos Python normales. Agreguemos uno más, como "
"demostración:"

#: ../../intro/tutorial01.txt:711
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the `time zone support docs <https://docs.djangoproject."
"com/en/1.8/topics/i18n/timezones>`_."
msgstr ""
"Notar que agregamos ``import datetime`` y ``from django.utils import "
"timezone``, para referenciar el módulo :mod:`datetime` de la librería "
"estándar de Python y las utilidades de Django relacionadas a zonas horarias "
"en :mod:`django.utils.timezone`, respectivamente. Si no estás familiarizado "
"con el manejo de zonas horarias en Python, podés aprender más en la "
"`documentación de time zone <https://docs.djangoproject.com/en/1.8/topics/"
"i18n/timezones>`_."

#: ../../intro/tutorial01.txt:717
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""
"Guardamos los cambios y empezamos una nueva sesión en el shell corriendo "
"``python manage.py shell`` nuevamente::"

#: ../../intro/tutorial01.txt:796
msgid ""
"For more information on model relations, see `Accessing related objects "
"<https://docs.djangoproject.com/en/1.8/ref/models/relations>`_. For more on "
"how to use double underscores to perform field lookups via the API, see "
"`Field lookups <https://docs.djangoproject.com/en/1.8/topics/db/queries/"
"#field-lookups-intro>`_. For full details on the database API, see our "
"`Database API reference <https://docs.djangoproject.com/en/1.8/topics/db/"
"queries>`_."
msgstr ""
"Para más información sobre relaciones en modelos, ver `Acceder objetos "
"relacionados <https://docs.djangoproject.com/en/1.8/ref/models/relations>`_. "
"Para más detalles sobre cómo usar los doble guión bajo para efectuar "
"búsquedas usando la API, ver `Field lookups <https://docs.djangoproject.com/"
"en/1.8/topics/db/queries/#field-lookups-intro>`_. Para el detalle completo "
"de la API de base de datos, ver `Database API reference <https://docs."
"djangoproject.com/en/1.8/topics/db/queries>`_."

#: ../../intro/tutorial01.txt:800
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""
"Cuando te sientas confortable con la API, podés pasar a :doc:`parte 2 del "
"tutorial </intro/tutorial02>` para tener funcionando la interfaz automática "
"de administración de Django."

#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr "Escribiendo tu primera Django app, parte 2"

#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""
"Este tutorial comienza donde dejó :doc:`Tutorial 1 </intro/tutorial01>`. "
"Continuaremos con la aplicación de encuestas y nos concentraremos en la "
"interfaz de administración (que llamaremos 'admin') que Django genera "
"automáticamente."

#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""
"Generar sitios de administración para que gente de staff o clientes "
"agreguen, cambien y borren contenido es un trabajo tedioso que no requiere "
"mucha creatividad. Por esta razón, Django automatiza completamente la "
"creación de una interfaz de administración para los modelos."

#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""
"Django fue escrito en el ambiente de una sala de noticias, con una "
"separación muy clara entre \"administradores de contenido\" y el sitio "
"\"público\". Los administradores del sitio usan el sistema para agregar "
"noticias, eventos, resultados deportivos, etc., y el contenido se muestra en "
"el sitio público. Django resuelve el problema de crear una interfaz "
"unificada para que los administradores editen contenido."

#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""
"El admin no está pensado para ser usado por los visitantes de un sitio, sino "
"para los administradores del mismo."

#: ../../intro/tutorial02.txt:25
msgid "Creating an admin user"
msgstr "Creando un usuario admin"

#: ../../intro/tutorial02.txt:27
msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""
"Primero vamos a necesitar crear un usuario que pueda loguearse al sitio de "
"administración. Corremos el siguiente comando:"

#: ../../intro/tutorial02.txt:34
msgid "Enter your desired username and press enter."
msgstr "Ingresamos el nombre usuario que querramos y presionamos enter."

#: ../../intro/tutorial02.txt:40
msgid "You will then be prompted for your desired email address:"
msgstr "Deberemos ingresar la dirección de email:"

#: ../../intro/tutorial02.txt:46
msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""
"El último paso es ingresar el password. Deberemos ingresarlo dos veces, la "
"segunda como una confirmación de la primera."

#: ../../intro/tutorial02.txt:56
msgid "Start the development server"
msgstr "Levantar el servidor de desarrollo"

#: ../../intro/tutorial02.txt:58
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""
"El sitio de admin de Django está habilitado por defecto. Levantemos el "
"servidor de desarrollo y exploremoslo."

#: ../../intro/tutorial02.txt:61
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""
"Recordemos del Tutorial 1 que para empezar el servidor de desarrollo debemos "
"correr:"

#: ../../intro/tutorial02.txt:67
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""
"Ahora, abrimos un browser y vamos a \"/admin/\" en el dominio local -- e.g., "
"http://127.0.0.1:8000/admin/. Deberíamos ver la pantalla de login del admin:"

#: ../../intro/tutorial02.txt:73
msgid ""
"Since `translation <https://docs.djangoproject.com/en/1.8/topics/i18n/"
"translation>`_ is turned on by default, the login screen may be displayed in "
"your own language, depending on your browser's settings and on whether "
"Django has a translation for this language."
msgstr ""
"Dado que `translation <https://docs.djangoproject.com/en/1.8/topics/i18n/"
"translation>`_ está activado por defecto, la pantalla de login podría "
"mostrarse en tu propio idioma, dependiendo de la configuración de tu browser "
"y de si Django tiene las traducciones para dicho idioma."

#: ../../intro/tutorial02.txt:77 ../../intro/tutorial03.txt:118
msgid "Doesn't match what you see?"
msgstr "No coincide con lo que ves?"

#: ../../intro/tutorial02.txt:79
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""
"Si en este punto en lugar de la pantalla de login de arriba obtenés una "
"página de error reportando algo como::"

#: ../../intro/tutorial02.txt:86
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""
"entonces probablemente estás usando una versión de Django que no coincide "
"con la de este tutorial. Deberías cambiar a una versión anterior del "
"tutorial o a una versión más nueva de Django."

#: ../../intro/tutorial02.txt:91
msgid "Enter the admin site"
msgstr "Ingresar al admin"

#: ../../intro/tutorial02.txt:93
msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""
"Ahora intentemos loguearnos con la cuenta de superusuario que creamos en el "
"paso anterior. Deberíamos ver la página inicial del admin de Django:"

#: ../../intro/tutorial02.txt:99
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped "
"by Django."
msgstr ""
"Deberíamos ver unos pocos tipos de contenido editable: grupos y usuarios. "
"Éstos vienen provistos por :mod:`django.contrib.auth`, el framework de "
"autenticación que viene con Django."

#: ../../intro/tutorial02.txt:104
msgid "Make the poll app modifiable in the admin"
msgstr "Hacer la app poll modificable en el admin"

#: ../../intro/tutorial02.txt:106
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr "Dónde está nuestra app poll? No se muestra en la página del admin."

#: ../../intro/tutorial02.txt:108
msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""
"Hay una cosa que hacer: necesitamos decirle al admin que los objetos "
"``Question`` tengan una interfaz de administración. Para esto abrimos el "
"archivo :file:`polls/admin.py`, y lo editamos para que tenga el siguiente "
"contenido:"

#: ../../intro/tutorial02.txt:122
msgid "Explore the free admin functionality"
msgstr "Explorar la funcionalidad del admin"

#: ../../intro/tutorial02.txt:124
msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""
"Ahora que registramos ``Question``, Django sabe que se debe mostrar en la "
"página del admin:"

#: ../../intro/tutorial02.txt:130
msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one "
"to change it. There's the \"What's up?\" question we created in the first "
"tutorial:"
msgstr ""
"Hacemos click en \"Questions\". Ahora estamos en la página de listado "
"(change list) de preguntas. Esta página muestra todas las preguntas en la "
"base de datos y nos permite elegir una para modificarla. Está la pregunta "
"\"What's up\" que creamos en la primera parte:"

#: ../../intro/tutorial02.txt:137
msgid "Click the \"What's up?\" question to edit it:"
msgstr "Cliqueamos en ella para editarla:"

#: ../../intro/tutorial02.txt:142
msgid "Things to note here:"
msgstr "Cosas para notar aquí:"

#: ../../intro/tutorial02.txt:144
msgid "The form is automatically generated from the ``Question`` model."
msgstr "El form es generado automáticamente a partir del modelo ``Question``."

#: ../../intro/tutorial02.txt:146
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""
"Los diferentes tipos de campo del modelo (:class:`~django.db.models."
"DateTimeField`, :class:`~django.db.models.CharField`) se corresponden con el "
"widget HTML apropiado. Cada tipo de campo sabe cómo mostrarse en el admin de "
"Django."

#: ../../intro/tutorial02.txt:151
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""
"Cada :class:`~django.db.models.DateTimeField` tiene atajos JavaScript. La "
"fecha tienen un atajo para \"Hoy\" (Today) y un popup de calendario, y la "
"hora un \"Ahora\" (Now) y un popup que lista las horas más comunes."

#: ../../intro/tutorial02.txt:155
msgid "The bottom part of the page gives you a couple of options:"
msgstr "El cierre de la página nos da algunas opciones:"

#: ../../intro/tutorial02.txt:157
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""
"Guardar (Save) -- Guarda los cambios y nos devuelve a la página listado para "
"este tipo de objeto."

#: ../../intro/tutorial02.txt:160
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""
"Grabar y continuar editando (Save and continue editing) -- Guarda los "
"cambios y recarga la página del admin de este objeto."

#: ../../intro/tutorial02.txt:163
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""
"Grabar y agregar otro (Save and add another) -- Guarda los cambios y carga "
"un form nuevo, en blanco, que permite agregar un nuevo objeto de este tipo."

#: ../../intro/tutorial02.txt:166
msgid "Delete -- Displays a delete confirmation page."
msgstr "Eliminar (Delete) -- Muestra una página de confirmación de borrado."

#: ../../intro/tutorial02.txt:168
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""
"Si el valor de \"Date published\" no coincide con el establecido durante la "
"creación del objeto en Tutorial 1, probablemente sea que olvidaste setear el "
"valor correcto para el :setting:`TIME_ZONE`. Revisalo, recargá la página y "
"chequeá que se muestra el valor correcto."

#: ../../intro/tutorial02.txt:173
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""
"Cambiamos el valor de \"Date published\" haciendo click en \"Today\" y \"Now"
"\". Luego hacemos click en \"Save and continue editing\". Si hacemos click "
"en \"History\" arriba a la derecha, podemos ver una página que lista todos "
"los cambios hechos a este objeto a través del admin, con la fecha/hora y el "
"nombre de usuario de la persona que hizo el cambio:"

#: ../../intro/tutorial02.txt:182
msgid "Customize the admin form"
msgstr "Personalizar el form del admin"

#: ../../intro/tutorial02.txt:184
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the ``Question`` model with ``admin.site.register(Question)``, "
"Django was able to construct a default form representation. Often, you'll "
"want to customize how the admin form looks and works. You'll do this by "
"telling Django the options you want when you register the object."
msgstr ""
"Lleva unos pocos minutos maravillarse por todo el código que no tuvimos que "
"escribir. Sólo registrando el modelo ``Question`` con ``admin.site."
"register(Question)``, Django fue capaz de construir una representación con "
"un form por defecto. A menudo uno querrá personalizar cómo este form se ve y "
"funciona. Esto lo hacemos pasando algunas opciones a Django cuando "
"registramos el modelo."

#: ../../intro/tutorial02.txt:190
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Question)`` line with:"
msgstr ""
"Veamos cómo funciona reordenando los campos en el form de edición. "
"Reemplazamos la línea ``admin.site.register(Question)`` por:"

#: ../../intro/tutorial02.txt:206
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""
"Seguiremos este patrón -- creamos un objeto model admin, que luego pasamos "
"como segundo argumento de ``admin.site.register()`` -- cada vez que "
"necesitemos cambiar alguna opción del admin para un modelo."

#: ../../intro/tutorial02.txt:210
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""
"Este cambio en particular hace que \"Publication date\" se muestre antes que "
"el campo \"Question\":"

#: ../../intro/tutorial02.txt:216
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""
"No es muy impresionante con sólo dos campos, pero para forms con docenas de "
"campos, elegir un orden intuitivo es un detalle de usabilidad importante."

#: ../../intro/tutorial02.txt:219
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""
"Y hablando de forms con docenas de campos, podríamos querer dividir el form "
"en fieldsets:"

#: ../../intro/tutorial02.txt:238
msgid ""
"The first element of each tuple in :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` is the title of the fieldset. Here's what our form looks like now:"
msgstr ""
"El primer argumento de cada tupla en :attr:`~django.contrib.admin.ModelAdmin."
"fieldsets` es el título del fieldset. Ahora nuestro form se vería así:"

#: ../../intro/tutorial02.txt:245
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used:"
msgstr ""
"Podemos asignar clases HTML arbitrarias a cada fieldset. Django provee una "
"clase ``\"collapse\"`` que muestra el fieldset inicialmente plegado. Esto es "
"útil cuando uno tiene un form largo que contiene ciertos campos que no se "
"usan normalmente:"

#: ../../intro/tutorial02.txt:270
msgid "Adding related objects"
msgstr "Agregando objetos relacionados"

#: ../../intro/tutorial02.txt:272
msgid ""
"OK, we have our Question admin page. But a ``Question`` has multiple "
"``Choices``, and the admin page doesn't display choices."
msgstr ""
"OK, tenemos nuestra página de admin para el modelo Question. Pero un objeto "
"``Question`` tiene múltiple ``Choices``, y la página de admin no nos muestra "
"estas opciones."

#: ../../intro/tutorial02.txt:275
msgid "Yet."
msgstr "Todavía."

#: ../../intro/tutorial02.txt:277
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""
"Hay dos formas de resolver este problema. La primera es registrar ``Choice`` "
"con el admin como hicimos con ``Question``. Esto es fácil:"

#: ../../intro/tutorial02.txt:289
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""
"Ahora \"Choices\" está disponible en el admin de Django. El form de \"Add "
"choice\" se vería como esto:"

#: ../../intro/tutorial02.txt:295
msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a :class:`~django.db.models."
"ForeignKey` should be represented in the admin as a ``<select>`` box. In our "
"case, only one question exists at this point."
msgstr ""
"En ese form, el campo \"Question\" es un desplegable que contiene todas las "
"encuestas en la base de datos. Django sabe que un :class:`~django.db.models."
"ForeignKey` debe mostrarse como un ``<select>`` en el admin. En nuestro "
"caso, existe solamente una encuesta en este momento."

#: ../../intro/tutorial02.txt:300
msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save,\" Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""
"Notemos también el link \"Add Another\" al lado de \"Question\". Todo objeto "
"con una relación de ``ForeignKey`` a otro tiene esta opción, gratis. Cuando "
"uno hace click en \"Add Another\", se obtiene un popup con el form de \"Add "
"question\". Si uno agrega una pregunta mediante este form y hace click en "
"\"Save\", Django va a guardar la pregunta en la base de datos y "
"dinámicamente seleccionarla como valor en el form de \"Add choice\" que "
"estábamos viendo."

#: ../../intro/tutorial02.txt:307
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the ``Question`` object. Let's make that happen."
msgstr ""
"Pero, la verdad, esta es una manera ineficiente de agregar objetos "
"``Choice`` al sistema. Sería mejor su uno pudiera agregar varias Choices "
"directamente cuando se crea un objeto ``Question``. Hagamos que eso ocurra."

#: ../../intro/tutorial02.txt:311
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""
"Borramos la llamada a ``register()`` para el modelo ``Choice``. Editamos el "
"código que registra ``Question`` para que se vea así:"

#: ../../intro/tutorial02.txt:336
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin "
"page. By default, provide enough fields for 3 choices.\""
msgstr ""
"Esto le dice a Django: \"los objetos ``Choice`` se editan en la página de "
"admin de ``Question``. Por defecto, proveer los campos para 3 choices\"."

#: ../../intro/tutorial02.txt:339
msgid "Load the \"Add question\" page to see how that looks:"
msgstr "Cargamos la página de \"Add question\" para ver cómo se ve:"

#: ../../intro/tutorial02.txt:344
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""
"Funciona así: hay 3 slots para Choices relacionados -- como especifica "
"``extra`` -- y cada vez que uno vuelve a la página de \"Change\" para un "
"objeto ya creado, se muestran otros 3 slots extra."

#: ../../intro/tutorial02.txt:348
msgid ""
"At the end of the three current slots you will find an \"Add another Choice"
"\" link.  If you click on it, a new slot will be added. If you want to "
"remove the added slot, you can click on the X to the top right of the added "
"slot. Note that you can't remove the original three slots. This image shows "
"an added slot:"
msgstr ""
"Al final de los 3 slots actuales se encuentra un link para agregar una nueva "
"Choice (\"Add another Choice\"). Si se hace click en el mismo, se agrega un "
"nuevo slot. Si uno quisiera borar uno de los slots agregados, se puede hacer "
"click en la X en la esquina superior derecha del slot. Notar que no se puede "
"borrar de esta manera los slots originales. Esta imagen muestra un slot "
"agregado como se describió:"

#: ../../intro/tutorial02.txt:356
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""
"Un pequeño problema. Ocupa mucho espacio en pantalla mostrar todos los "
"campos para ingresar los objetos ``Choice`` relacionados. Por esa razón, "
"Django ofrece una forma tabular para mostrar objetos relacionados \"inline"
"\"; solamente necesitamos cambiar la declaración de ``ChoiceInline`` de esta "
"manera:"

#: ../../intro/tutorial02.txt:367
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""
"Con ``TabularInline`` (en lugar de ``StackedInline``), los objetos "
"relacionados se muestran de forma más compacta, en forma de tabla:"

#: ../../intro/tutorial02.txt:373
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""
"Notemos que hay una columna extra con la opción \"Delete?\" que nos permite "
"borrar filas que hayamos agregado usando el botón \"Add Another Choice\" y "
"filas que ya hayan sido guardadas."

#: ../../intro/tutorial02.txt:377
msgid "Customize the admin change list"
msgstr "Personalizar la página listado"

#: ../../intro/tutorial02.txt:379
msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""
"Ahora que la página de admin de Question se ve bien, hagamos algunos tweaks "
"a la página de listado -- la que lista todas las preguntas en el sistema."

#: ../../intro/tutorial02.txt:382
msgid "Here's what it looks like at this point:"
msgstr "Así se ve ahora:"

#: ../../intro/tutorial02.txt:387
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the :"
"attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is "
"a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""
"Por defecto, Django muestra el ``str()`` de cada objeto. Pero algunas veces "
"es más útil si podemos mostrar campos individuales. Para eso usamos la "
"opción :attr:`~django.contrib.admin.ModelAdmin.list_display` del admin, que "
"es una tupla de los nombres de campo a mostrar, como columnas, en la página "
"de listado:"

#: ../../intro/tutorial02.txt:400
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1:"
msgstr ""
"Sólo por si acaso, incluyamos también el método ``was_published_recently`` "
"que definimos en la primera parte:"

#: ../../intro/tutorial02.txt:410
msgid "Now the question change list page looks like this:"
msgstr "Ahora la página de listado de encuestas se vería así:"

#: ../../intro/tutorial02.txt:415
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""
"Podemos hacer click en los encabezados de las columnas para ordenar por los "
"respectivos valores -- salvo en el caso de ``was_published_recently``, "
"porque ordenar por la salida de un método arbitrario no está soportado. "
"Notemos también que el encabezado para la columna de "
"``was_published_recently`` es por defecto el nombre del método (reemplazando "
"guiones bajos por espacios), y que cada línea contiene la representación "
"como string del valor devuelto por el método."

#: ../../intro/tutorial02.txt:422
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""
"Esto se puede mejorar definiendo un par de atributos del método (en :file:"
"`polls/models.py`) como sigue:"

#: ../../intro/tutorial02.txt:436
msgid ""
"For more information on these method properties, see :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."
msgstr ""
"Para más información sobre estas propiedades, ver :attr:`~django.contrib."
"admin.ModelAdmin.list_display`."

#: ../../intro/tutorial02.txt:439
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Add the following line to ``QuestionAdmin``::"
msgstr ""
"Editamos el archivo :file:`polls/admin.py` de nuevo y agregamos una mejora a "
"la página de listado de preguntas: filtros usando :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`. Agregamos la siguiente línea a "
"``QuestionAdmin``:"

#: ../../intro/tutorial02.txt:446
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""
"Esto agrega un \"Filtro\" en la barra lateral que permite filtrar el listado "
"por el campo ``pub_date``:"

#: ../../intro/tutorial02.txt:452
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""
"El tipo de filtro depende del tipo de campo sobre el cual se filtra. Como "
"``pub_date`` es un :class:`~django.db.models.DateTimeField`, Django sabe "
"darnos opciones de filtro apropiadas: \"Any date\", \"Today\", \"Past 7 days"
"\", \"This month\", \"This year\"."

#: ../../intro/tutorial02.txt:457
msgid "This is shaping up well. Let's add some search capability::"
msgstr "Esto está tomando buena forma. Agreguemos campacidad de búsqueda:"

#: ../../intro/tutorial02.txt:461
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as "
"many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""
"Esto agrega un campo de búsqueda al tope del listado. Cuando alguien ingresa "
"términos de búsqueda, Django va a buscar sobre el campo ``question_text``. "
"Se pueden usar tantos campos como uno quiera -- aunque como por detrás se "
"trata de una consulta del tipo ``LIKE`` hay que ser razonables para "
"hacérselo simple a la base de datos."

#: ../../intro/tutorial02.txt:467
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters <django."
"contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies <django."
"contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-ordering "
"<django.contrib.admin.ModelAdmin.list_display>` all work together like you "
"think they should."
msgstr ""
"Es un buen momento para observar también que el listado es paginado. Por "
"defecto se muestran 100 items por página. :attr:`Paginación <django.contrib."
"admin.ModelAdmin.list_per_page>`, :attr:`búsqueda <django.contrib.admin."
"ModelAdmin.search_fields>`, :attr:`filtros <django.contrib.admin.ModelAdmin."
"list_filter>`, :attr:`jerarquía de fechas <django.contrib.admin.ModelAdmin."
"date_hierarchy>`, y :attr:`ordenamiento desde columnas <django.contrib.admin."
"ModelAdmin.list_display>` funcionan como uno esperaría."

#: ../../intro/tutorial02.txt:477
msgid "Customize the admin look and feel"
msgstr "Personalizar el \"look and feel\" del admin"

#: ../../intro/tutorial02.txt:479
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""
"Claramente tener el título \"Django administration\" al tope de cada página "
"del admin es ridículo. Es un \"placeholder\"."

#: ../../intro/tutorial02.txt:482
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""
"Es fácil de cambiar usando el sistema de templates de Django. El admin de "
"Django funciona gracias a Django mismo, y la interfaz provista usa el "
"sistema de templates de Django."

#: ../../intro/tutorial02.txt:489
msgid "Customizing your *project's* templates"
msgstr "Personalizando los templates de tu *proyecto*"

#: ../../intro/tutorial02.txt:491
msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that "
"Django can access. (Django runs as whatever user your server runs.) However, "
"keeping your templates within the project is a good convention to follow."
msgstr ""
"Creamos un directorio ``templates`` en el directorio del proyecto (el que "
"contiene ``manage.py``). Los templates pueden estar en cualquier lugar de "
"nuestro sistema de archivos al que Django tenga acceso (Django corre como el "
"usuario que corra el servidor). Sin embargo, mantener los templates dentro "
"del proyecto es una buena convención a seguir."

#: ../../intro/tutorial02.txt:496
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a :"
"setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""
"Abrimos el archivo de settings (recordemos, ``mysite/settings.py``) y "
"agregamos la opción :setting:`DIRS <TEMPLATE-DIRS>` en el setting :setting:"
"`TEMPLATES`:"

#: ../../intro/tutorial02.txt:518
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""
":setting:`DIRS <TEMPLATES-DIRS>` es una lista de directorios en los que "
"Django chequea para cargar templates; es un path de búsqueda."

#: ../../intro/tutorial02.txt:521
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself (``django/contrib/"
"admin/templates``) into that directory."
msgstr ""
"Ahora creamos un directorio llamado ``admin`` dentro de ``templates``, y "
"copiamos el template ``admin/base_site.html`` del directorio de templates "
"del admin de Django por defecto, del código fuente de Django mismo (``django/"
"contrib/admin/templates``), a ese directorio."

#: ../../intro/tutorial02.txt:526
msgid "Where are the Django source files?"
msgstr "Dónde están los archivos del código fuente de Django?"

#: ../../intro/tutorial02.txt:528
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""
"Si tenés problemas encontrando dónde están los archivos de Django, podés "
"correr el siguiente comando:"

#: ../../intro/tutorial02.txt:539
msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name "
"as you see fit. You should end up with a section of code like:"
msgstr ""
"Luego, basta editar el archivo y reemplazar ``{{ site_header|default:"
"_('Django administration') }}`` (incluyendo las llaves) por el nombre de "
"nuestro sitio. Deberías terminar con una sección de código como:"

#: ../../intro/tutorial02.txt:550
msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the :attr:`django.contrib.admin.AdminSite."
"site_header` attribute to more easily make this particular customization."
msgstr ""
"Usamos esta metodología para enseñarte la manera en que se personalizan "
"templates. En un proyecto real, probablemente usaríamos el atributo :attr:"
"`django.contrib.admin.AdminSite.site_header` para cambiar este valor en "
"particular."

#: ../../intro/tutorial02.txt:555
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""
"Este archivo de template contiene varios textos de la forma ``{% block "
"branding %}`` y and ``{{ title }}``. Los tags ``{%`` y ``{{`` son parte del "
"lenguaje de templates de Django. Cuando Django renderiza ``admin/base_site."
"html``, este lenguaje se evalúa para producir la página HTML final. No nos "
"preocupemos de esto por ahora -- veremos en detalle el lenguaje de templates "
"de Django en Tutorial 3."

#: ../../intro/tutorial02.txt:562
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""
"Notemos que cualquier template del admin de Django se puede \"sobreescribir"
"\". Para esto sólo basta repetir lo que hicimos con ``base_site.html`` -- "
"copiar el template desde el directorio de Django a nuestro directorio de "
"templates y aplicar los cambios."

#: ../../intro/tutorial02.txt:568
msgid "Customizing your *application's* templates"
msgstr "Personalizando los templates de tu *aplicación*"

#: ../../intro/tutorial02.txt:570
msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that ``django."
"contrib.admin`` is an application)."
msgstr ""
"Los lectores astutos se estarán preguntando: si :setting:`DIRS <TEMPLATES-"
"DIRS>` estaba vacío por defecto, cómo es que Django encuentra los templates "
"del admin? La respuesta es que, como :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` está seteado en ``True``, Django automáticamente busca un "
"subdirectorio ``templates/`` en cada paquete de aplicación, para usar como "
"fallback (no olvidarse que ``django.contrib.admin`` es una aplicación)."

#: ../../intro/tutorial02.txt:577
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be "
"more sensible to modify the *application's* templates, rather than those in "
"the *project*. That way, you could include the polls application in any new "
"project and be assured that it would find the custom templates it needed."
msgstr ""
"Nuestra aplicación no es muy compleja y no necesita personalizar templates "
"del admin. Pero si creciera de forma más sofisticada y requiriera cambios a "
"los templates base del admin para alguna funcionalidad, sería más razonable "
"modificar los templates a nivel *aplicación* en lugar de *proyecto*. De esta "
"manera, se podría incluir la aplicación ``polls`` en cualquier nuevo "
"proyecto y asegurarse de que los templates personalizados estuvieran "
"disponibles."

#: ../../intro/tutorial02.txt:584
msgid ""
"See the `template loading documentation <https://docs.djangoproject.com/"
"en/1.8/topics/templates/#template-loading>`_ for more information about how "
"Django finds its templates."
msgstr ""
"Ver la `documentación de carga de templates <https://docs.djangoproject.com/"
"en/1.8/topics/templates/#template-loading>`_ para más información sobre cómo "
"Django busca los templates. "

#: ../../intro/tutorial02.txt:588
msgid "Customize the admin index page"
msgstr "Personalizar la página inicial del admin"

#: ../../intro/tutorial02.txt:590
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""
"De forma similar uno podría querer personalizar el look and feel de la "
"página inicial del admin."

#: ../../intro/tutorial02.txt:593
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""
"Por defecto, muestra todas las apps en :setting:`INSTALLED_APPS` que se "
"registraron con la aplicación admin, en orden alfabético. Uno podría querer "
"hacer cambios significativos al layout. Después de todo, la inicial es "
"probablemente la página más importante del admin, y debería ser fácil de "
"usar."

#: ../../intro/tutorial02.txt:598
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""
"El template a personalizar es ``admin/index.html`` (habría que hacer lo "
"mismo que hicimos en la sección anterior con ``admin/base_site.html`` -- "
"copiar el template a nuestro directorio de templates). Editamos el archivo, "
"y veremos que usa una variable de template llamada ``app_list``. Esta "
"variable contiene cada app instalada. En lugar de usarla, uno podría "
"escribir los links de manera explícita a las páginas de objetos específicas "
"del admin de la manera en que a uno le parezca mejor. De nuevo, no "
"preocuparse si no se entiende el lenguaje de templates -- lo cubriremos en "
"detalle en Tutorial 3."

#: ../../intro/tutorial02.txt:607
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""
"Una vez que te sientas cómodo con el sitio de admin, podés empezar con la :"
"doc:`parte 3 del tutorial </intro/tutorial03>` donde comenzamos a trabajar "
"con las vistas públicas de nuestra aplicación."

#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr "Escribiendo tu primera Django app, parte 3"

#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""
"Este tutorial empieza donde quedó el :doc:`Tutorial 2 </intro/tutorial02>`. "
"Continuamos con la aplicación web de preguntas y nos concentraremos en la "
"creación de la interfaz pública -- \"views\"."

#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""
"Una view es un \"tipo\" de página web en nuestra aplicación Django que "
"generalmente provee una función específica y tiene un template particular. "
"Por ejemplo, en una aplicación de blog, uno podría tener las siguientes "
"views:"

#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr "Blog homepage -- muestra las últimas entradas."

#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr "Detalle de una entrada -- página correspondiente a una entrada o post."

#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""
"Archivo anual -- muestra los meses de una año con sus correspondientes "
"entradas."

#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""
"Archivo mensual -- muestra los días de un mes con las correspondientes "
"entradas."

#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr "Archivo diario -- muestra todas las entradas en un día dado."

#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""
"Acción de comentar -- maneja el posteo de comentarios en una entrada dada."

#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""
"En nuestra aplicación de preguntas, vamos a tener las siguientes cuatro "
"views:"

#: ../../intro/tutorial03.txt:32
msgid "Question \"index\" page -- displays the latest few questions."
msgstr "Página índice -- muestra las últimas preguntas."

#: ../../intro/tutorial03.txt:34
msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""
"Detalle de pregunta -- muestra el texto de la pregunta, sin resultados, "
"junto con un form para votar."

#: ../../intro/tutorial03.txt:37
msgid ""
"Question \"results\" page -- displays results for a particular question."
msgstr ""
"Página de resultados -- muestra los resultados para una pregunta particular."

#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr ""
"Acción de votar -- maneja el voto por una opción particular en una pregunta "
"dada."

#: ../../intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""
"En Django, las páginas web y otro contenido se manejan mediante views. Cada "
"view se representa por una simple función Python (o método, en el caso de "
"views basadas en clases). Django elige una view examinando la URL que se "
"pidió (para ser precisos, la parte de la URL después del nombre de dominio)."

#: ../../intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as \"ME2/"
"Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". "
"You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""
"En la web puede que te hayas encontrado con cosas como \"ME2/Sites/dirmod."
"asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\". Estarás "
"encantado de saber que Django permite definir *patrones de URL* mucho más "
"elegantes."

#: ../../intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: ``/"
"newsarchive/<year>/<month>/``."
msgstr ""
"Un patrón de URL es simplemente la forma genérica de una URL - por ejemplo: "
"``/newsarchive/<year>/<month>/``."

#: ../../intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""
"Para llegar de una URL a una view, Django usa lo que se conoce como "
"'URLconfs'. Un URLconf mapea patrones de URL (descriptos como expresiones "
"regulares) a views."

#: ../../intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can "
"refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""
"Este tutorial provee las instrucciones básicas para el uso de URLconfs, para "
"más información referirse a :mod:`django.core.urlresolvers`."

#: ../../intro/tutorial03.txt:62
msgid "Write your first view"
msgstr "Escribiendo nuestra primera view"

#: ../../intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""
"Escribamos nuestra primera view. Abrimos el archivo ``polls/views.py`` y "
"ponemos el siguiente código Python:"

#: ../../intro/tutorial03.txt:76
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""
"Esta es la view más simple posible en Django. Para llamar a esta view, "
"necesitamos mapearla a una URL - y para ello necesitamos un URLconf."

#: ../../intro/tutorial03.txt:79
msgid ""
"To create a URLconf in the polls directory, create a file called ``urls."
"py``. Your app directory should now look like::"
msgstr ""
"Para crear un URLconf, en el directorio polls creamos un archivo llamado "
"``urls.py``. La estructura de directorios de nuestra app ahora debería verse "
"así::"

#: ../../intro/tutorial03.txt:90
msgid "In the ``polls/urls.py`` file include the following code:"
msgstr "En el archivo ``polls/urls.py`` incluimos el siguiente código:"

#: ../../intro/tutorial03.txt:103
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with:"
msgstr ""
"El próximo paso es apuntar el URLconf raíz al módulo ``polls.urls``. En "
"``mysite/urls.py`` insertamos un :func:`~django.conf.urls.include`, con lo "
"que nos quedaría:"

#: ../../intro/tutorial03.txt:120
msgid ""
"If you're seeing ``admin.autodiscover()`` before the definition of "
"``urlpatterns``, you're probably using a version of Django that doesn't "
"match this tutorial version.  You'll want to either switch to the older "
"tutorial or the newer Django version."
msgstr ""
"Si estás viendo ``admin.autodiscover()`` antes de la definición de "
"``urlpatterns``, probablemente estás usando una versión de Django que no "
"coincide con la de este tutorial. Deberías cambiar a una versión anterior "
"del tutorial o a una versión más nueva de Django."

#: ../../intro/tutorial03.txt:125
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to http://"
"localhost:8000/polls/ in your browser, and you should see the text \"*Hello, "
"world. You're at the polls index.*\", which you defined in the ``index`` "
"view."
msgstr ""
"Hemos conectado una view ``index`` en el URLconf. Si vamos a la dirección "
"http://localhost:8000/polls/ en nuestro browser, deberíamos ver el texto "
"\"*Hello, world. You're at the polls index.*\", que definimos la view "
"``index``."

#: ../../intro/tutorial03.txt:130
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""
"La función :func:`~django.conf.urls.url` toma cuatro argumentos, dos "
"requeridos: ``regex`` y ``view``, y dos opcionales: ``kwargs``, y ``name``. "
"En este punto vale la pena revisar para que es cada uno de ellos."

#: ../../intro/tutorial03.txt:135
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ":func:`~django.conf.urls.url`: argumento regex"

#: ../../intro/tutorial03.txt:137
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular expression"
"\", which is a syntax for matching patterns in strings, or in this case, url "
"patterns. Django starts at the first regular expression and makes its way "
"down the list,  comparing the requested URL against each regular expression "
"until it finds one that matches."
msgstr ""
"El término \"regex\" se usa comúnmente como abreviatura para `expresión "
"regular` (`regular expression`, en inglés), que es una forma de describir "
"patrones que se verifiquen en un string, o en este caso patrones de url. "
"Django comienza en la primera expresión regular y va recorriendo la lista "
"hacia abajo, comparando la URL solicitada contra cada expresión regular "
"hasta encontrar una cuyo patrón coincida."

#: ../../intro/tutorial03.txt:143
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``http://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www."
"example.com/myapp/?page=3``, the URLconf will also look for ``myapp/``."
msgstr ""
"Notar que estas expresiones regulares no chequean parámetros de GET o POST, "
"o el nombre de dominio. Por ejemplo, en un pedido por ``http://www.example."
"com/myapp/``, el URLconf buscará por ``myapp/``. En un pedido por ``http://"
"www.example.com/myapp/?page=3``, el URLconf también buscará por ``myapp/``."

#: ../../intro/tutorial03.txt:149
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""
"Si necesitaras ayuda con las expresiones regulares, podés ver `Wikipedia`_ y "
"la documentación del módulo :mod:`re`. También es fantástico, el libro de "
"O'Reilly \"Mastering Regular Expressions\", de Jeffrey Friedl. En la "
"práctica, sin embargo, no hace falta ser un experto en expresiones "
"regulares, ya que lo que realmente es necesario saber es cómo capturar "
"patrones simples. De hecho, expresiones regulares complejas pueden afectar "
"la performance de búsqueda, por lo que uno no debería confiar en todo el "
"poder de las expresiones regulares."

#: ../../intro/tutorial03.txt:156
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""
"Finalmente, una nota sobre performance: estas expresiones regulares se "
"compilan la primera vez que el módulo URLconf se carga. Son súper rápidas "
"(mientras que no sean complejas como se menciona arriba)."

#: ../../intro/tutorial03.txt:163
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ":func:`~django.conf.urls.url`: argumento view"

#: ../../intro/tutorial03.txt:165
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first "
"argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""
"Cuando Django encuentra una expresión regular que coincide, se llama a la "
"función view especificada, con un objeto :class:`~django.http.HttpRequest` "
"como primer argumento y los valores que se hayan “capturado” a partir de la "
"expresión regular como argumentos restantes. Si la regex usa capturas "
"simples (sin nombre), los valores se pasan como argumentos posicionales; si "
"se usan capturas con nombre, los valores se pasan como argumentos nombrados. "
"Veremos un ejemplo en breve."

#: ../../intro/tutorial03.txt:173
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ":func:`~django.conf.urls.url`: argumento kwargs"

#: ../../intro/tutorial03.txt:175
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""
"Se pueden pasar argumentos arbitrarios en un diccionario a la view de "
"destino. No vamos a usar esta opción en el tutorial."

#: ../../intro/tutorial03.txt:179
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ":func:`~django.conf.urls.url`: argumento name"

#: ../../intro/tutorial03.txt:181
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""
"Nombrar las URL nos permite referirnos a ellas de forma unívoca desde "
"distintas partes del código, especialmente en los templates. Esta "
"característica nos permite hacer cambios globales a los patrones de url del "
"proyecto cambiando tan sólo un archivo (ya que el nombre permanece sin "
"cambios, y nos referimos a una URL por su nombre)."

#: ../../intro/tutorial03.txt:186
msgid "Writing more views"
msgstr "Escribiendo más views"

#: ../../intro/tutorial03.txt:188
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""
"Ahora agreguemos algunas views más a ``polls/views.py``. Estas views van a "
"ser un poco diferentes porque van a tomar un argumento:"

#: ../../intro/tutorial03.txt:204
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following :"
"func:`~django.conf.urls.url` calls:"
msgstr ""
"Conectemos estas nuevas views en el módulo ``polls.urls`` agregando las "
"siguientes llamadas a :func:`~django.conf.urls.url`:"

#: ../../intro/tutorial03.txt:225
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""
"Veamos en nuestro browser \"/polls/34/\". Se ejecutará la función "
"``detail()`` y nos mostrará el ID que pasamos en la URL. Probemos también \"/"
"polls/34/results/\" y \"/polls/34/vote/\" -- esto nos debería mostrar los "
"placeholder que definimos para las páginas de resultados y para votar."

#: ../../intro/tutorial03.txt:230
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The :func:"
"`~django.conf.urls.include` functions we are using simply reference other "
"URLconfs. Note that the regular expressions for the :func:`~django.conf.urls."
"include` functions don't have a ``$`` (end-of-string match character) but "
"rather a trailing slash. Whenever Django encounters :func:`~django.conf.urls."
"include`, it chops off whatever part of the URL matched up to that point and "
"sends the remaining string to the included URLconf for further processing."
msgstr ""
"Cuando alguien pide por una página de nuestro sitio -- supongamos \"/"
"polls/34/\", Django va a cargar el módulo ``mysite.urls``, al que apunta el "
"setting :setting:`ROOT_URLCONF`. Encuentra la variable ``urlpatterns`` y "
"recorre las expresiones regulares en orden. Las llamadas a :func:`~django."
"conf.urls.include` simplemente referencian otros URLconf. Notar que las "
"expresiones regulares para los :func:`~django.conf.urls.include` no tienen "
"un ``$`` (caracter que indica el fin de string en un patrón), sino que "
"terminan en una barra. Cada vez que Django encuentra un :func:`~django.conf."
"urls.include`, recorta la parte de la URL que coincide hasta ese punto y "
"envía el string restante al URLconf relacionado para continuar el proceso."

#: ../../intro/tutorial03.txt:242
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to plug-"
"and-play URLs. Since polls are in their own URLconf (``polls/urls.py``), "
"they can be placed under \"/polls/\", or under \"/fun_polls/\", or under \"/"
"content/polls/\", or any other path root, and the app will still work."
msgstr ""
"La idea detrás de :func:`~django.conf.urls.include` es hacer fácil tener "
"URLs plug-and-play. Como polls tiene su propio URLconf (``polls/urls.py``), "
"las URLs de la app se pueden poner bajo \"/polls/\", o bajo \"/fun_polls/\", "
"o bajo \"/content/polls/\", o cualquier otro camino, y la app seguirá "
"funcionando."

#: ../../intro/tutorial03.txt:248
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr "Esto es lo que pasa si un usuario va a \"/polls/34/\" en este sistema:"

#: ../../intro/tutorial03.txt:250
msgid "Django will find the match at ``'^polls/'``"
msgstr "Django encontrará coincidencia en ``'^polls/'``"

#: ../../intro/tutorial03.txt:252
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<question_id>[0-9]+)/$'`` resulting in a "
"call to the ``detail()`` view like so::"
msgstr ""
"Entonces, Django va a recortar el texto que coincide (``\"polls/\"``) y "
"enviar el texto restante -- ``\"34/\"`` -- al URLconf 'polls.urls' para "
"seguir el proceso, donde coincidirá con ``r'^(?P<question_id>[0-9]+)/$'``, "
"resultando en una llamada a la view ``detail()`` de la forma::"

#: ../../intro/tutorial03.txt:259
msgid ""
"The ``question_id='34'`` part comes from ``(?P<question_id>[0-9]+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<question_id>`` "
"defines the name that will be used to identify the matched pattern; and "
"``[0-9]+`` is a regular expression to match a sequence of digits (i.e., a "
"number)."
msgstr ""
"La parte ``question_id='34'`` surge de ``(?P<question_id>[0-9]+)``. Usando "
"paréntesis alrededor de un patrón se \"captura\" el texto que coincida con "
"el patrón y ese valor se pasas como argumento a la función view; ``?"
"P<question_id>`` define el nombre que se usará para identificar la "
"coincidencia; y ``[0-9]+`` es una expresión regular para buscar una "
"secuencia de dígitos (i.e., un número)."

#: ../../intro/tutorial03.txt:265
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""
"Como los patrones de URL son expresiones regulares, no hay realmente un "
"límite de lo que se puede hacer con ellos. Y no hay necesidad de agregar "
"cosas como ``.html`` -- a menos que uno quisiera, en cuyo caso nos quedaría "
"algo como::"

#: ../../intro/tutorial03.txt:272
msgid "But, don't do that. It's silly."
msgstr "Pero no hagan esto. No tiene sentido."

#: ../../intro/tutorial03.txt:275
msgid "Write views that actually do something"
msgstr "Escribiendo views que hacen algo"

#: ../../intro/tutorial03.txt:277
msgid ""
"Each view is responsible for doing one of two things: returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""
"Cada view es responsable de hacer una de dos cosas: devolver un objeto :"
"class:`~django.http.HttpResponse` con el contenido de la página solicitada, "
"o levantar una excepción, por ejemplo :exc:`~django.http.Http404`. El resto "
"depende de uno."

#: ../../intro/tutorial03.txt:282
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""
"Una view puede leer registros de una base de datos, o no. Puede usar un "
"sistema de templates como el de Django -- o algún otro basado en Python --, "
"o no. Puede generar un archivo PDF, una salida XML, crear un archivo ZIP, "
"cualquier cosa que uno quiera, usando cualquier librería Python que uno "
"quiera."

#: ../../intro/tutorial03.txt:287
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""
"Todo lo que Django espera es un :class:`~django.http.HttpResponse`. O una "
"excepción."

#: ../../intro/tutorial03.txt:289
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""
"Por ser conveniente, vamos a usar la API de Django para base de datos, que "
"vimos en el :doc:`Tutorial 1 </intro/tutorial01>`. Aquí tenemos una "
"aproximación a la view ``index()`` que muestra las 5 preguntas más recientes "
"en el sistema, separadas por comas, de acuerdo a la fecha de publicación:"

#: ../../intro/tutorial03.txt:309
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""
"Pero tenemos un problema: el diseño de la página está escrito explícitamente "
"en la view. Si uno quisiera cambiar cómo se ve la página, debería editar el "
"código Python. Entonces vamos a usar el sistema de templates de Django para "
"separar el diseño del código Python, creando un template que la view pueda "
"usar."

#: ../../intro/tutorial03.txt:314
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""
"Primero, creamos un directorio llamado ``templates`` en nuestro directorio "
"``polls``. Django va a buscar los templates allí."

#: ../../intro/tutorial03.txt:317
msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`. This is "
"how Django knows to find the polls templates even though we didn't modify "
"the :setting:`DIRS <TEMPLATES-DIRS>` option, as we did in :ref:`Tutorial 2 "
"<ref-customizing-your-projects-templates>`."
msgstr ""
"El setting :setting:`TEMPLATES` de nuestro proyecto describe cómo Django va "
"a cargar y renderizar templates. Por defecto se configura como backend "
"``DjangoTemplates``, con la opción :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"en True. Por convención ``DjangoTemplates`` busca por un subdirectorio "
"\"templates\" en cada una de las aplicaciones en :setting:`INSTALLED_APPS`. "
"Esta es la manera en que Django sabe encontrar los templates de nuestra "
"aplicación polls sin tener que modificar la opción :setting:`DIRS <TEMPLATES-"
"DIRS>`, como hicimos en :ref:`Tutorial 2 <ref-customizing-your-projects-"
"templates>`."

#: ../../intro/tutorial03.txt:325
msgid "Organizing templates"
msgstr "Organizando los templates"

#: ../../intro/tutorial03.txt:327
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""
"*Podríamos* tener todos nuestros templates juntos, en un gran directorio "
"templates y funcionaría perfectamente bien. Sin embargo, este template "
"pertenece a la aplicación polls entonces, a diferencia del template del "
"admin que creamos en la parte anterior, vamos a poner este en el directorio "
"de templates de la aplicación (``polls/templates``) en lugar de aquel del "
"proyecto (``templates``). Discutiremos más en detalle en :doc:`el tutorial "
"de apps reusables </intro/reusable-apps>` el *por qué* de esto."

#: ../../intro/tutorial03.txt:334
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called ``index."
"html``. In other words, your template should be at ``polls/templates/polls/"
"index.html``. Because of how the ``app_directories`` template loader works "
"as described above, you can refer to this template within Django simply as "
"``polls/index.html``."
msgstr ""
"En el directorio ``templates`` que acabamos de crear, creamos otro "
"directorio llamado ``polls``, y allí creamos un archivo ``index.html``. En "
"otras palabras, nuestro template debería estar en ``polls/templates/polls/"
"index.html``. Como la carga de templates basada en ``app_directories`` "
"funciona como se describió arriba, nos podemos referir a este template en "
"Django simplemente como ``polls/index.html``."

#: ../../intro/tutorial03.txt:341
msgid "Template namespacing"
msgstr "Espacio de nombre en templates"

#: ../../intro/tutorial03.txt:343
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in "
"a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""
"Ahora *podríamos* continuar poniendo nuestros templates directamente en "
"``polls/templates`` (en lugar de crear otro subdirectorio ``polls``), pero "
"no sería una buena idea. Django elegirá el primer template que encuentre tal "
"que el nombre coincida, y si tenemos un template con el mismo nombre en una "
"aplicación *diferente*, Django no podrá distinguir entre ellos. Necesitamos "
"apuntar a Django al correcto, y la forma más fácil de asegurarse de esto es "
"usando *espacio de nombres* para ellos. Esto es, poner los templates dentro "
"de *otro* directorio llamado como la aplicación correspondiente."

#: ../../intro/tutorial03.txt:352
msgid "Put the following code in that template:"
msgstr "Pongamos el siguiente código en ese template:"

#: ../../intro/tutorial03.txt:367
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""
"Ahora actualicemos nuestra view ``index`` en ``polls/views.py`` para usar el "
"template:"

#: ../../intro/tutorial03.txt:386
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""
"Ese código carga el template llamado ``polls/index.html`` y le pasa un "
"contexto. El contexto es un diccionario que mapea nombres de variable a "
"objetos Python."

#: ../../intro/tutorial03.txt:390
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from Tutorial 1. The "
"link points to the question's detail page."
msgstr ""
"Carguemos la página apuntando el browser a \"/polls/\", y deberíamos ver una "
"lista conteniendo la pregunta \"What's up\" del Tutorial 1. El link apunta a "
"la página de detall de la pregunta."

#: ../../intro/tutorial03.txt:395
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr "Un atajo: :func:`~django.shortcuts.render`"

#: ../../intro/tutorial03.txt:397
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""
"La acción de cargar un template, armar un contexto y devolver un objeto :"
"class:`~django.http.HttpResponse` con el resultado de renderizar el template "
"es muy común. Django provee un atajo. Aquí está la view ``index()`` "
"reescrita:"

#: ../../intro/tutorial03.txt:415
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template."
"RequestContext` and :class:`~django.http.HttpResponse` (you'll want to keep "
"``HttpResponse`` if you still have the stub methods for ``detail``, "
"``results``, and ``vote``)."
msgstr ""
"Una vez que hayamos hecho esto para todas estas views, ya no necesitamos "
"importar :mod:`~django.template.loader`, :class:`~django.template."
"RequestContext` y :class:`~django.http.HttpResponse` (habrá que mantener "
"``HttpResponse``  si es que todavía tenemos métodos stub para ``detail``, "
"``results`` y ``vote``)."

#: ../../intro/tutorial03.txt:420
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an :class:`~django.http."
"HttpResponse` object of the given template rendered with the given context."
msgstr ""
"La función :func:`~django.shortcuts.render` toma un objeto ``request`` como "
"primer un argumento, un nombre de template como segundo argumento y un "
"diccionario como tercer argumento opcional. Devuelve un objeto :class:"
"`~django.http.HttpResponse` con el template renderizado con el contexto dado."

#: ../../intro/tutorial03.txt:426
msgid "Raising a 404 error"
msgstr "Levantando un error 404"

#: ../../intro/tutorial03.txt:428
msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""
"Ahora veamos la view de detalle de una pregunta -- la página que muestra el "
"texto de la pregunta. Aquí está la view:"

#: ../../intro/tutorial03.txt:446
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""
"El nuevo concepto aquí: la view levanta una excepción :exc:`~django.http."
"Http404` si no existe una pregunta con el ID dado."

#: ../../intro/tutorial03.txt:449
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""
"Veremos qué podríamos poner en el template ``polls/detail.html`` luego, pero "
"si quisiéramos tener el ejemplo arriba funcionando rápidamente, esto alcanza "
"para empezar:"

#: ../../intro/tutorial03.txt:458
msgid "will get you started for now."
msgstr "para ponernos en marcha por ahora."

#: ../../intro/tutorial03.txt:461
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr "Un atajo: :func:`~django.shortcuts.get_object_or_404`"

#: ../../intro/tutorial03.txt:463
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""
"Es muy común usar el método :meth:`~django.db.models.query.QuerySet.get` y "
"levantar un :exc:`~django.http.Http404` si el objeto no existe. Django "
"provee un atajo. Esta la view ``detail()``, actualizada:"

#: ../../intro/tutorial03.txt:478
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function "
"of the model's manager. It raises :exc:`~django.http.Http404` if the object "
"doesn't exist."
msgstr ""
"La función :func:`~django.shortcuts.get_object_or_404` toma un modelo Django "
"como primer argumento y un número arbitrario de argumentos nombrados, que se "
"pasan a la función :meth:`~django.db.models.query.QuerySet.get` del manager "
"del modelo. Levanta un :exc:`~django.http.Http404` si el objeto no existe."

#: ../../intro/tutorial03.txt:486
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""
"Por qué usamos una función :func:`~django.shortcuts.get_object_or_404` en "
"lugar de manejar automáticamente la excepción :exc:`~django.core.exceptions."
"ObjectDoesNotExist` a un nivel más arriba, o hacer que la API a nivel modelo "
"levante :exc:`~django.http.Http404` en lugar de :exc:`~django.core."
"exceptions.ObjectDoesNotExist`?"

#: ../../intro/tutorial03.txt:492
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""
"Porque esto acoplaría la capa de modelos a la capa de views. Uno de los "
"objetivos de diseño de Django es mantener bajo acoplamiento. Cierto "
"acoplamiento controlado se introduce en el módulo :mod:`django.shortcuts`."

#: ../../intro/tutorial03.txt:496
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""
"Existe también una función :func:`~django.shortcuts.get_list_or_404`, que "
"funciona como :func:`~django.shortcuts.get_object_or_404` -- excepto que "
"usa :meth:`~django.db.models.query.QuerySet.filter` en lugar de :meth:"
"`~django.db.models.query.QuerySet.get`. Levanta un :exc:`~django.http."
"Http404` si la lista es vacía."

#: ../../intro/tutorial03.txt:503
msgid "Use the template system"
msgstr "Usando el sistema de templates"

#: ../../intro/tutorial03.txt:505
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""
"Volvamos a la view ``detail()`` de nuestra aplicación. Dada la variable de "
"contexto ``question``, veamos como podría lucir el template ``polls/detail."
"html``:"

#: ../../intro/tutorial03.txt:519
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""
"El sistema de templates usa sintaxis de punto para acceder a los atributos "
"de variable. En el ejemplo de ``{{ question.question_text }}``, Django "
"primero hace una búsqueda de diccionario sobre el objeto ``question``. Si "
"eso falla, intenta una búsqueda de atributo -- que en este caso, funciona. "
"Si hubiera fallado, se hubiera intentado una búsqueda por índice de lista."

#: ../../intro/tutorial03.txt:525
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``question."
"choice_set.all`` is interpreted as the Python code ``question.choice_set."
"all()``, which returns an iterable of ``Choice`` objects and is suitable for "
"use in the :ttag:`{% for %}<for>` tag."
msgstr ""
"Una llamada de método se da en el loop :ttag:`{% for %}<for>`: ``question."
"choice_set.all`` se interpreta como el código Python ``question.choice_set."
"all()``, que devuelve un iterable de objetos ``Choice`` y usable para el "
"tag :ttag:`{% for %}<for>`."

#: ../../intro/tutorial03.txt:530
msgid ""
"See the `template guide <https://docs.djangoproject.com/en/1.8/topics/"
"templates>`_ for more about templates."
msgstr ""
"Para más detalles sobre templates, se puede ver `template guide <https://"
"docs.djangoproject.com/en/1.8/topics/templates>`_."

#: ../../intro/tutorial03.txt:533
msgid "Removing hardcoded URLs in templates"
msgstr "Borrando URLs escritas explícitamente en templates"

#: ../../intro/tutorial03.txt:535
msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""
"Recordemos que cuando escribimos el link a una encuesta en el template "
"``polls/index.html``, el link estaba parcialmente escrito \"a mano\":"

#: ../../intro/tutorial03.txt:542
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes "
"challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""
"El problema con esto, es que es una aproximación muy acoplada que hace que "
"sea un desafío cambiar las URLs en un proyecto con muchos templates. Sin "
"embargo, como definimos el argumento ``name`` en las llamadas a :func:"
"`~django.conf.urls.url` en el módulo ``polls.urls``, podemos eliminar la "
"dependencia de URLs fijas usando el template tag ``{% url %}``:"

#: ../../intro/tutorial03.txt:552
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is "
"defined below::"
msgstr ""
"La forma en que esto funciona es buscando la definición de la URL "
"especificada en el módulo ``polls.urls``. Podemos ver dónde se define el "
"nombre 'detail' de la URL aquí::"

#: ../../intro/tutorial03.txt:561
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the "
"template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""
"Si uno quisiera cambiar la URL de la view de detalle de pregunta a algo "
"distinto, tal vez algo como ``polls/specifics/12/``, en lugar de hacerlo en "
"el template (o templates), bastaría con cambiarlo en ``polls/urls.py``::"

#: ../../intro/tutorial03.txt:571
msgid "Namespacing URL names"
msgstr "Espacio de nombres en URLs"

#: ../../intro/tutorial03.txt:573
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate "
"the URL names between them? For example, the ``polls`` app has a ``detail`` "
"view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""
"El proyecto de este tutorial tiene sólo una app, ``polls``. En proyectos "
"Django reales, podría haber cinco, diez, veinte o más apps. Cómo Django "
"distingue los nombres de las URLs entre todas las apps? Por ejemplo, la app "
"``polls`` tiene una view ``detail``, y podría ser que otra app para un blog "
"en el mismo proyecto también. Cómo hace Django para saber la view de qué app "
"usar al resolver un template tag ``{% url %}``?"

#: ../../intro/tutorial03.txt:580
msgid ""
"The answer is to add namespaces to your root URLconf. In the ``mysite/urls."
"py`` file, go ahead and change it to include namespacing:"
msgstr ""
"La respuesta es agregar espacios de nombres al URLconf raíz. Cambiamos el "
"archivo ``mysite/urls.py`` para incluir espacios de nombres:"

#: ../../intro/tutorial03.txt:594
msgid "Now change your ``polls/index.html`` template from:"
msgstr "Ahora cambiamos el template ``polls/index.html`` de:"

#: ../../intro/tutorial03.txt:601
msgid "to point at the namespaced detail view:"
msgstr "a que apunte a la view de detalle con el espacio de nombres:"

#: ../../intro/tutorial03.txt:608
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""
"Una vez que estés cómodo escribiendo views, podés pasar a la :doc:`parte 4 "
"del tutorial</intro/tutorial04>` para aprender sobre procesamiento simple de "
"forms y views genéricas."

#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr "Escribiendo tu primera Django app, parte 4"

#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"Este tutorial comienza donde dejó el :doc:`Tutorial 3 </intro/tutorial03>`. "
"Vamos a continuar la aplicación de preguntas concentrándonos en procesar "
"forms simples y reducir nuestro código."

#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr "Escribir un form simple"

#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"Actualicemos el template de detalle de una encuesta (\"polls/detail.html\") "
"del último tutorial para que contenga un elemento HTML ``<form>``:"

#: ../../intro/tutorial04.txt:31
msgid "A quick rundown:"
msgstr "Un repaso rápido:"

#: ../../intro/tutorial04.txt:33
msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""
"El template de arriba muestra un radio button para cada opción de la "
"pregunta. El ``value`` de cada radio es el ID asociado a cada opción de la "
"pregunta. El ``name``, es ``\"choice\"``. Esto significa que cuando alguien "
"elige una de las opciones y envía el form, se envía ``choice=#`` como data "
"del POST, donde # es el ID de la opción elegida. Este es un concepto básico "
"de forms HTML."

#: ../../intro/tutorial04.txt:40
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""
"Establecemos como ``action`` del form ``{% url 'polls:vote' question.id %}"
"``, y ``method=\"post\"``. Usar ``method=\"post\"`` (en contraposición a "
"``method=\"get\"``) es muy importante, porque la acción de enviar el form va "
"a modificar datos del lado del servidor. Cada vez que uno crea un form que "
"altere datos del lado del servidor, usar ``method=\"post\"``. Este consejo "
"no es particular para Django; es una buena práctica de desarrollo web."

#: ../../intro/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""
"``forloop.counter`` indica cuantas veces el tag :ttag:`for` iteró en el ciclo"

#: ../../intro/tutorial04.txt:50
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"Como estamos creando un form POST (que puede tener el efecto de modificar "
"datos), necesitamos preocuparnos por Cross Site Request Forgeries (CSRF). "
"Afortunadamente no hace falta demasiado, porque Django viene con un sistema "
"fácil de usar para protegerse contra este tipo de ataques. Simplemente todos "
"los forms que hagan POST contra una URL interna deberían usar el template "
"tag :ttag:`{% csrf_token %}<csrf_token>`."

#: ../../intro/tutorial04.txt:57
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""
"Ahora vamos a crear una view Django que maneje los datos enviados y haga "
"algo con ellos. Recordemos que en el :doc:`Tutorial 3 </intro/tutorial03>` "
"creamos un URLconf para nuestra app que incluía la siguiente línea:"

#: ../../intro/tutorial04.txt:66
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""
"También habíamos creado una implementación boba de la función ``vote()``. "
"Hagamos una implementación real. Agregamos lo siguiente a ``polls/views.py``:"

#: ../../intro/tutorial04.txt:96
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""
"Este código incluye algunas cosas que no hemos cubierto hasta el momento:"

#: ../../intro/tutorial04.txt:98
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` es un objeto diccionario-"
"like que nos permite acceder a los datos enviados usando los nombres como "
"clave. En este caso ``request.POST['choice']`` devuelve el ID de la opción "
"elegida, como string. Los valores de :attr:`request.POST <django.http."
"HttpRequest.POST>` son siempre strings."

#: ../../intro/tutorial04.txt:104
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""
"Notar que Django también provee :attr:`request.GET <django.http.HttpRequest."
"GET>` para acceder a los datos en el GET de la misma manera -- pero estamos "
"usando explícitamente :attr:`request.POST <django.http.HttpRequest.POST>` en "
"nuestro código para asegurarnos de que los datos solamente se alteren vía "
"una llamada POST."

#: ../../intro/tutorial04.txt:110
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't given."
msgstr ""
"``request.POST['choice']`` va a levantar :exc:`KeyError` si ``choice`` no "
"estuviera en los datos del POST. El código de arriba chequea por esta "
"excepción y en ese caso vuelve a mostrar el form con un mensaje de error."

#: ../../intro/tutorial04.txt:115
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"Después de incrementar el contador de la opción, el código devuelve un :"
"class:`~django.http.HttpResponseRedirect` en lugar de un :class:`~django."
"http.HttpResponse`. :class:`~django.http.HttpResponseRedirect` toma un único "
"argumento: la URL a la que el usuario será redirigido (ver el punto "
"siguiente sobre cómo construir la URL en este caso)."

#: ../../intro/tutorial04.txt:122
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""
"Como dice el comentario en el código de arriba, uno siempre debería devolver "
"un :class:`~django.http.HttpResponseRedirect` después de manejar "
"exitosamente un POST. Este consejo no es específico a Django; es una buena "
"práctica de desarrollo web."

#: ../../intro/tutorial04.txt:127
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""
"Estamos usando la función :func:`~django.core.urlresolvers.reverse` en el "
"constructor de :class:`~django.http.HttpResponseRedirect`. Esta función nos "
"ayuda a no escribir explícitamente una URL en la función de view. Se le pasa "
"el nombre de la view a la que queremos pasar el control y los argumentos "
"variables del patrón de URL que apunta a esa view. En este caso, usando el "
"URLconf que configuramos en el Tutorial 3, esta llamada a :func:`~django."
"core.urlresolvers.reverse` devolvería un string como el siguiente::"

#: ../../intro/tutorial04.txt:138
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""
"... donde ``3`` es el valor de ``p.id``. Esta URL nos va a redirigir, "
"llamando a la view ``'results'`` para mostrar la página final."

#: ../../intro/tutorial04.txt:141
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the `request and response documentation <https://docs.djangoproject.com/"
"en/1.8/ref/request-response>`_."
msgstr ""
"Como se mencionó en el Tutorial 3, ``request`` es un objeto :class:`~django."
"http.HttpRequest`. Para más detalles sobre este tipo de objetos, se puede "
"ver la `documentación sobre request y response <https://docs.djangoproject."
"com/en/1.8/ref/request-response>`_."

#: ../../intro/tutorial04.txt:145
msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""
"Después de que alguien vota en una encuesta, la view ``vote()`` lo redirige "
"a la página de resultados de la pregunta. Escribamos esta view:"

#: ../../intro/tutorial04.txt:158
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
"Esto es casi exactamente igual a la view ``detail()`` del :doc:`Tutorial 3 </"
"intro/tutorial03>`. La única diferencia es el nombre del template. Vamos a "
"solucionar esta redundancia luego."

#: ../../intro/tutorial04.txt:161
msgid "Now, create a ``polls/results.html`` template:"
msgstr "Ahora, creamos el template ``polls/results.html``:"

#: ../../intro/tutorial04.txt:176
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""
"Vamos a ``/polls/1/`` en el browser y votamos en la encuesta. Deberíamos ver "
"una página de resultados que se actualiza cada vez que uno vota. Si se envía "
"el form sin elegir una opción, se debería mostrar un mensaje de error."

#: ../../intro/tutorial04.txt:181
msgid "Use generic views: Less code is better"
msgstr "Usando views genéricas (generic views): Menos código es mejor"

#: ../../intro/tutorial04.txt:183
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view (also from Tutorial 3), which displays a list of polls, "
"is similar."
msgstr ""
"Las views ``detail()`` (del :doc:`Tutorial 3 </intro/tutorial03>`) y "
"``results()`` son súper simples -- y, cómo se menciona arriba, redundantes. "
"La view ``index()`` (también del Tutorial 3), que muestra una lista de "
"preguntas, es similar."

#: ../../intro/tutorial04.txt:187
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"Estas views representan un caso común en el desarrollo web básico: obtener "
"datos de una base de datos de acuerdo a un parámetro pasado en la URL, "
"cargar un template y devolver el template renderizado. Por ser tan usual, "
"Django provee un atajo, el sistema de \"generic views\" (views genéricas)."

#: ../../intro/tutorial04.txt:192
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""
"Las views genéricas abstraen patrones comunes, al punto en que uno no "
"necesita prácticamente escribir código Python en una app."

#: ../../intro/tutorial04.txt:195
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"Vamos a convertir nuestra app para usar views genéricas, y poder borrar "
"parte de nuestro código original. Son solamente unos pocos pasos:"

#: ../../intro/tutorial04.txt:199
msgid "Convert the URLconf."
msgstr "Convertir el URLconf."

#: ../../intro/tutorial04.txt:201
msgid "Delete some of the old, unneeded views."
msgstr "Borrar algunas de las views que teníamos, ya no necesarias."

#: ../../intro/tutorial04.txt:203
msgid "Introduce new views based on Django's generic views."
msgstr "Arreglar el manejo de URL para las nuevas views."

#: ../../intro/tutorial04.txt:205
msgid "Read on for details."
msgstr "Para más detalles, seguir leyendo."

#: ../../intro/tutorial04.txt:207
msgid "Why the code-shuffle?"
msgstr "Por qué cambiar nuestro código?"

#: ../../intro/tutorial04.txt:209
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""
"Generalmente, cuando uno escribe una app Django, evaluará si usar views "
"genéricas es una buena solución para el problema en cuestión, y las "
"utilizará desde el comienzo, en lugar de refactorear el código a mitad de "
"camino. Este tutorial intencionalmente se centró en escribir views \"sin "
"ayuda\" hasta ahora, para aprender los conceptos principales."

#: ../../intro/tutorial04.txt:215
msgid "You should know basic math before you start using a calculator."
msgstr ""
"Uno debería aprender matemática básica antes de empezar a usar una "
"calculadora."

#: ../../intro/tutorial04.txt:218
msgid "Amend URLconf"
msgstr "Arreglando URLconf"

#: ../../intro/tutorial04.txt:220
msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr ""
"Primero, abrimos el URLconf ``polls/urls.py`` y lo cambiamos de la siguiente "
"manera:"

#: ../../intro/tutorial04.txt:236
msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""
"Notar que el nombre del patrón que se busca en las segunda y tercera "
"expresiones regulares cambió de ``<question_id>`` a ``<pk>``."

#: ../../intro/tutorial04.txt:242
msgid "Amend views"
msgstr "Arreglando views"

#: ../../intro/tutorial04.txt:244
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the ``polls/"
"views.py`` file and change it like so:"
msgstr ""
"A continuación vamos a borrar nuestras viejas views ``index``, ``detail``, y "
"``results`` para usar las generic views de Django en vez. Para ello, abrimos "
"el archivo ``polls/views.py`` y cambiamos:"

#: ../../intro/tutorial04.txt:281
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""
"Estamos usando dos views genéricas: :class:`~django.views.generic.list."
"ListView` y :class:`~django.views.generic.detail.DetailView`. Estas dos "
"views nos abstraen de los conceptos de \"mostrar una lista de objetos\" y "
"\"mostrar el detalle de un objeto particular\", respectivamente."

#: ../../intro/tutorial04.txt:287
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""
"Cada view genérica necesita saber sobre qué modelo actuar. Esto se define "
"usando el atributo ``model``."

#: ../../intro/tutorial04.txt:290
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""
"La view genérica :class:`~django.views.generic.detail.DetailView` espera el "
"valor de clave primaria capturado de la URL con nombre ``\\\"pk\\\"``, "
"entonces cambiamos ``question_id`` a ``pk``."

#: ../../intro/tutorial04.txt:295
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a :class:`~django.views.generic.detail."
"DetailView` behind the scenes."
msgstr ""
"Por defecto, la view genérica :class:`~django.views.generic.detail."
"DetailView` usa un template llamado ``<app name>/<model name>_detail.html``. "
"En nuestro caso, usará el template ``\"polls/question_detail.html\"``. El "
"argumento ``template_name`` es usado para indicarle a Django que use un "
"template de nombre específico en lugar de usar el nombre de template "
"autogenerado por defecto. También especificamos ``template_name`` para la "
"view ``results`` -- esto nos asegura que la view de resultados y la de "
"detalle tiene un aspecto diferente al renderizarse, aún cuando ambas usan :"
"class:`~django.views.generic.detail.DetailView` por detrás."

#: ../../intro/tutorial04.txt:305
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"De forma similar, la view genérica :class:`~django.views.generic.list."
"ListView` usa un template por defecto llamado ``<app name>/<model name>_list."
"html``; usamos ``template_name`` para indicarle a :class:`~django.views."
"generic.list.ListView` que use el template ya existente ``\"polls/index.html"
"\"``."

#: ../../intro/tutorial04.txt:311
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``question_list``. "
"To override this we provide the ``context_object_name`` attribute, "
"specifying that we want to use ``latest_question_list`` instead. As an "
"alternative approach, you could change your templates to match the new "
"default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""
"En partes anteriores de este tutorial, los templates recibían un contexto "
"que contenía las variables ``question`` y ``latest_question_list``. Para "
"``DetailView`` la variable ``question`` es provista automáticamente -- como "
"estamos usando un modelo Django (``Question``), Django puede determinar un "
"nombre adecuado para la variable de contexto. Sin embargo, para ListView, el "
"nombre de variable de contexto generado automáticamente es "
"``question_list``. Para sobreescribir este valor, pasamos la opción "
"``context_object_name``, especificando que queremos usar "
"``latest_question_list`` como nombre. Otra alternativa sería cambiar los "
"templates para adecuarlos a los nombres por defecto -- pero es mucho más "
"fácil decirle a Django que use el nombre de variable que queremos."

#: ../../intro/tutorial04.txt:323
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""
"Corremos el servidor, y usamos nuestra app, ahora basada en views genéricas."

#: ../../intro/tutorial04.txt:325
msgid ""
"For full details on generic views, see the `generic views documentation "
"<https://docs.djangoproject.com/en/1.8/topics/class-based-views/index>`_."
msgstr ""
"Para más detalles sobre views genéricas, se puede ver la `documentación "
"sobre views genéricas <https://docs.djangoproject.com/en/1.8/topics/class-"
"based-views/index>`_."

#: ../../intro/tutorial04.txt:327
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial </intro/tutorial05>` to learn about testing our polls app."
msgstr ""
"Una vez que estés cómodo con forms y views genéricas, podés leer la :doc:"
"`parte 5 de este tutorial </intro/tutorial05>` para aprender sobre cómo "
"testear nuestra app de preguntas."

#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr "Escribiendo tu primera Django app, parte 5"

#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/"
"tutorial01>`, using the :djadmin:`shell` to examine the behavior of a "
"method, or running the application and entering data to check how it behaves."
msgstr ""

#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""

#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""

#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""

#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""

#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""

#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""

#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a question whose date lies in the "
"future; you'll see that the ``Question`` change list claims it was published "
"recently."
msgstr ""

#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""

#: ../../intro/tutorial05.txt:159
msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""

#: ../../intro/tutorial05.txt:163
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""

#: ../../intro/tutorial05.txt:187
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Question`` instance with a ``pub_date`` in "
"the future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

#: ../../intro/tutorial05.txt:193
msgid "Running tests"
msgstr ""

#: ../../intro/tutorial05.txt:195
msgid "In the terminal, we can run our test::"
msgstr ""

#: ../../intro/tutorial05.txt:199
msgid "and you'll see something like::"
msgstr ""

#: ../../intro/tutorial05.txt:217
msgid "What happened is this:"
msgstr ""

#: ../../intro/tutorial05.txt:219
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

#: ../../intro/tutorial05.txt:221
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

#: ../../intro/tutorial05.txt:223
msgid "it created a special database for the purpose of testing"
msgstr ""

#: ../../intro/tutorial05.txt:225
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

#: ../../intro/tutorial05.txt:227
msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

#: ../../intro/tutorial05.txt:230
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""

#: ../../intro/tutorial05.txt:234
msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""

#: ../../intro/tutorial05.txt:238
msgid "Fixing the bug"
msgstr ""

#: ../../intro/tutorial05.txt:240
msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past:"
msgstr ""

#: ../../intro/tutorial05.txt:252
msgid "and run the test again::"
msgstr ""

#: ../../intro/tutorial05.txt:262
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

#: ../../intro/tutorial05.txt:265
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

#: ../../intro/tutorial05.txt:271
msgid "More comprehensive tests"
msgstr ""

#: ../../intro/tutorial05.txt:273
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""

#: ../../intro/tutorial05.txt:277
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""

#: ../../intro/tutorial05.txt:301
msgid ""
"And now we have three tests that confirm that ``Question."
"was_published_recently()`` returns sensible values for past, recent, and "
"future questions."
msgstr ""

#: ../../intro/tutorial05.txt:304
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

#: ../../intro/tutorial05.txt:309
msgid "Test a view"
msgstr ""

#: ../../intro/tutorial05.txt:311
msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""

#: ../../intro/tutorial05.txt:317
msgid "A test for a view"
msgstr ""

#: ../../intro/tutorial05.txt:319
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""

#: ../../intro/tutorial05.txt:323
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""

#: ../../intro/tutorial05.txt:327
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

#: ../../intro/tutorial05.txt:330
msgid "The Django test client"
msgstr ""

#: ../../intro/tutorial05.txt:332
msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""

#: ../../intro/tutorial05.txt:336
msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:343
msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available. "
"Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly "
"depending on what questions you already created."
msgstr ""

#: ../../intro/tutorial05.txt:350
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

#: ../../intro/tutorial05.txt:358
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

#: ../../intro/tutorial05.txt:391
msgid "Improving our view"
msgstr ""

#: ../../intro/tutorial05.txt:393
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

#: ../../intro/tutorial05.txt:396
msgid ""
"In :ref:`Tutorial 4 <tutorial04-amend-views>` we introduced a class-based "
"view, based on :class:`~django.views.generic.list.ListView`:"
msgstr ""

#: ../../intro/tutorial05.txt:410
msgid ""
"``response.context_data['latest_question_list']`` extracts the data this "
"view places into the context."
msgstr ""

#: ../../intro/tutorial05.txt:413
msgid ""
"We need to amend the ``get_queryset`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""

#: ../../intro/tutorial05.txt:422
msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr ""

#: ../../intro/tutorial05.txt:436
msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset "
"containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""

#: ../../intro/tutorial05.txt:441
msgid "Testing our new view"
msgstr ""

#: ../../intro/tutorial05.txt:443
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""

#: ../../intro/tutorial05.txt:450
msgid "Add the following to ``polls/tests.py``:"
msgstr ""

#: ../../intro/tutorial05.txt:457
msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""

#: ../../intro/tutorial05.txt:533
msgid "Let's look at some of these more closely."
msgstr ""

#: ../../intro/tutorial05.txt:535
msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""

#: ../../intro/tutorial05.txt:538
msgid ""
"``test_index_view_with_no_questions`` doesn't create any questions, but "
"checks the message: \"No polls are available.\" and verifies the "
"``latest_question_list`` is empty. Note that the :class:`django.test."
"TestCase` class provides some additional assertion methods. In these "
"examples, we use :meth:`~django.test.SimpleTestCase.assertContains()` and :"
"meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""

#: ../../intro/tutorial05.txt:545
msgid ""
"In ``test_index_view_with_a_past_question``, we create a question and verify "
"that it appears in the list."
msgstr ""

#: ../../intro/tutorial05.txt:548
msgid ""
"In ``test_index_view_with_a_future_question``, we create a question with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first question is no longer there, and so again the index shouldn't have "
"any questions in it."
msgstr ""

#: ../../intro/tutorial05.txt:553
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

#: ../../intro/tutorial05.txt:558
msgid "Testing the ``DetailView``"
msgstr ""

#: ../../intro/tutorial05.txt:560
msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""

#: ../../intro/tutorial05.txt:575
msgid ""
"And of course, we will add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""

#: ../../intro/tutorial05.txt:608
msgid "Ideas for more tests"
msgstr ""

#: ../../intro/tutorial05.txt:610
msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have "
"just created; in fact there will be a lot of repetition."
msgstr ""

#: ../../intro/tutorial05.txt:614
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""

#: ../../intro/tutorial05.txt:621
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""

#: ../../intro/tutorial05.txt:627
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

#: ../../intro/tutorial05.txt:631
msgid "When testing, more is better"
msgstr ""

#: ../../intro/tutorial05.txt:633
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

#: ../../intro/tutorial05.txt:637
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

#: ../../intro/tutorial05.txt:641
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

#: ../../intro/tutorial05.txt:646
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

#: ../../intro/tutorial05.txt:650
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""

#: ../../intro/tutorial05.txt:653
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

#: ../../intro/tutorial05.txt:654
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

#: ../../intro/tutorial05.txt:655
msgid "test method names that describe their function"
msgstr ""

#: ../../intro/tutorial05.txt:658
msgid "Further testing"
msgstr ""

#: ../../intro/tutorial05.txt:660
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""

#: ../../intro/tutorial05.txt:664
msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

#: ../../intro/tutorial05.txt:673
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

#: ../../intro/tutorial05.txt:677
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See `integration with "
"coverage.py <https://docs.djangoproject.com/en/1.8/topics/testing/advanced/"
"#topics-testing-code-coverage>`_ for details."
msgstr ""

#: ../../intro/tutorial05.txt:683
msgid ""
"`Testing in Django <https://docs.djangoproject.com/en/1.8/topics/testing/"
"index>`_ has comprehensive information about testing."
msgstr ""

#: ../../intro/tutorial05.txt:692
msgid ""
"For full details on testing, see `Testing in Django <https://docs."
"djangoproject.com/en/1.8/topics/testing/index>`_."
msgstr ""

#: ../../intro/tutorial05.txt:694
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this "
"tutorial </intro/tutorial06>` to learn about static files management."
msgstr ""

#: ../../intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

#: ../../intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

#: ../../intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need "
"to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

#: ../../intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

#: ../../intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

#: ../../intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

#: ../../intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

#: ../../intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

#: ../../intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called ``style."
"css``. In other words, your stylesheet should be at ``polls/static/polls/"
"style.css``. Because of how the ``AppDirectoriesFinder`` staticfile finder "
"works, you can refer to this static file in Django simply as ``polls/style."
"css``, similar to how you reference the path for templates."
msgstr ""

#: ../../intro/tutorial06.txt:45
msgid "Static file namespacing"
msgstr ""

#: ../../intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

#: ../../intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet (``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:66
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

#: ../../intro/tutorial06.txt:75
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

#: ../../intro/tutorial06.txt:79
msgid ""
"That's all you need to do for development. Reload ``http://localhost:8000/"
"polls/`` and you should see that the question links are green (Django "
"style!) which means that your stylesheet was properly loaded."
msgstr ""

#: ../../intro/tutorial06.txt:84
msgid "Adding a background-image"
msgstr ""

#: ../../intro/tutorial06.txt:86
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

#: ../../intro/tutorial06.txt:91
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:100
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

#: ../../intro/tutorial06.txt:105
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the :ttag:"
"`static` template tag to generate its URLs) without having to modify a bunch "
"of paths in your static files as well."
msgstr ""

#: ../../intro/tutorial06.txt:112
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see `the static files howto <https://docs."
"djangoproject.com/en/1.8/howto/static-files/index>`_ and `the staticfiles "
"reference <https://docs.djangoproject.com/en/1.8/ref/contrib/staticfiles>`_. "
"`Deploying static files <https://docs.djangoproject.com/en/1.8/howto/static-"
"files/deployment>`_ discusses how to use static files on a real server."
msgstr ""

#: ../../intro/tutorial06.txt:122
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here </intro/"
"whatsnext>`."
msgstr ""

#: ../../intro/tutorial06.txt:125
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps </intro/reusable-apps>`."
msgstr ""

#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""

#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the search and the genindex."
msgstr ""

#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

#: ../../intro/whatsnext.txt:43
msgid ""
"The `topic guides <https://docs.djangoproject.com/en/1.8/topics/index>`_, on "
"the other hand, dive deep into individual parts of Django. There are "
"complete guides to Django's `model system <https://docs.djangoproject.com/"
"en/1.8/topics/db/index>`_, `template engine <https://docs.djangoproject.com/"
"en/1.8/topics/templates>`_, `forms framework <https://docs.djangoproject.com/"
"en/1.8/topics/forms/index>`_, and much more."
msgstr ""

#: ../../intro/whatsnext.txt:48
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

#: ../../intro/whatsnext.txt:52
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of `how-to guides <https://docs.djangoproject.com/en/1.8/"
"howto/index>`_ that answer common \"How do I ...?\" questions. Here you'll "
"find information about `generating PDFs with Django <https://docs."
"djangoproject.com/en/1.8/howto/outputting-pdf>`_, `writing custom template "
"tags <https://docs.djangoproject.com/en/1.8/howto/custom-template-tags>`_, "
"and more."
msgstr ""

#: ../../intro/whatsnext.txt:58
msgid ""
"Answers to really common questions can also be found in the `FAQ <https://"
"docs.djangoproject.com/en/1.8/faq/index>`_."
msgstr ""

#: ../../intro/whatsnext.txt:60
msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the `reference <https://docs.djangoproject.com/en/1.8/"
"ref/index>`_. This is where you'll turn to find the details of a particular "
"function or whatever you need."
msgstr ""

#: ../../intro/whatsnext.txt:67
msgid ""
"If you are interested in deploying a project for public use, our docs have "
"`several guides <https://docs.djangoproject.com/en/1.8/howto/deployment/"
"index>`_ for various deployment setups as well as a `deployment checklist "
"<https://docs.djangoproject.com/en/1.8/howto/deployment/checklist>`_ for "
"some things you'll need to think about."
msgstr ""

#: ../../intro/whatsnext.txt:72
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the `release notes <https://docs."
"djangoproject.com/en/1.8/releases/index>`_ and `internals documentation "
"<https://docs.djangoproject.com/en/1.8/internals/index>`_ for those who want "
"to add code to Django itself, and a `few other things that simply don't fit "
"elsewhere <https://docs.djangoproject.com/en/1.8/misc/index>`_."
msgstr ""

#: ../../intro/whatsnext.txt:80
msgid "How documentation is updated"
msgstr ""

#: ../../intro/whatsnext.txt:82
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

#: ../../intro/whatsnext.txt:86
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

#: ../../intro/whatsnext.txt:88
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

#: ../../intro/whatsnext.txt:91
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

#: ../../intro/whatsnext.txt:94
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

#: ../../intro/whatsnext.txt:97
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document "
"online is a separate text file in the repository."
msgstr ""

#: ../../intro/whatsnext.txt:104
msgid "Where to get it"
msgstr ""

#: ../../intro/whatsnext.txt:106
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

#: ../../intro/whatsnext.txt:110
msgid "On the Web"
msgstr ""

#: ../../intro/whatsnext.txt:112
msgid ""
"The most recent version of the Django documentation lives at https://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""

#: ../../intro/whatsnext.txt:120
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""

#: ../../intro/whatsnext.txt:124
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list <http://groups."
"google.com/group/django-users/>`_ mailing list or the `#django IRC channel`_ "
"instead."
msgstr ""

#: ../../intro/whatsnext.txt:133
msgid "In plain text"
msgstr ""

#: ../../intro/whatsnext.txt:135
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

#: ../../intro/whatsnext.txt:138
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""

#: ../../intro/whatsnext.txt:142
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that "
"the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

#: ../../intro/whatsnext.txt:146
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

#: ../../intro/whatsnext.txt:156
msgid "As HTML, locally"
msgstr ""

#: ../../intro/whatsnext.txt:158
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

#: ../../intro/whatsnext.txt:160
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

#: ../../intro/whatsnext.txt:168
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

#: ../../intro/whatsnext.txt:176
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

#: ../../intro/whatsnext.txt:178
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

#: ../../intro/whatsnext.txt:185
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

#: ../../intro/whatsnext.txt:189
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

#: ../../intro/whatsnext.txt:198
msgid "Differences between versions"
msgstr ""

#: ../../intro/whatsnext.txt:200
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

#: ../../intro/whatsnext.txt:207
msgid "We follow this policy:"
msgstr ""

#: ../../intro/whatsnext.txt:209
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

#: ../../intro/whatsnext.txt:214
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

#: ../../intro/whatsnext.txt:217
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

#: ../../intro/whatsnext.txt:221
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is `no longer supported <https://docs.djangoproject.com/en/1.8/"
"internals/release-process/#backwards-compatibility-policy>`_, that version "
"of the docs won't get any further updates."
msgstr ""

#: ../../intro/whatsnext.txt:226
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
