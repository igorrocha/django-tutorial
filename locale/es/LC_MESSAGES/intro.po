# 
msgid ""
msgstr ""
"Project-Id-Version: Django tutorial 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-11 17:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../intro/contributing.txt:3
msgid "Writing your first patch for Django"
msgstr ""

#: ../../intro/contributing.txt:6
msgid "Introduction"
msgstr ""

#: ../../intro/contributing.txt:8
msgid ""
"Interested in giving back to the community a little? Maybe you've found a "
"bug in Django that you'd like to see fixed, or maybe there's a small feature"
" you want added."
msgstr ""

#: ../../intro/contributing.txt:12
msgid ""
"Contributing back to Django itself is the best way to see your own concerns "
"addressed. This may seem daunting at first, but it's really pretty simple. "
"We'll walk you through the entire process, so you can learn by example."
msgstr ""

#: ../../intro/contributing.txt:17
msgid "Who's this tutorial for?"
msgstr ""

#: ../../intro/contributing.txt:19
msgid ""
"For this tutorial, we expect that you have at least a basic understanding of"
" how Django works. This means you should be comfortable going through the "
"existing tutorials on :doc:`writing your first Django app "
"</intro/tutorial01>`. In addition, you should have a good understanding of "
"Python itself. But if you don't, `Dive Into Python`__ is a fantastic (and "
"free) online book for beginning Python programmers."
msgstr ""

#: ../../intro/contributing.txt:26
msgid ""
"Those of you who are unfamiliar with version control systems and Trac will "
"find that this tutorial and its links include just enough information to get"
" started. However, you'll probably want to read some more about these "
"different tools if you plan on contributing to Django regularly."
msgstr ""

#: ../../intro/contributing.txt:31
msgid ""
"For the most part though, this tutorial tries to explain as much as "
"possible, so that it can be of use to the widest audience."
msgstr ""

#: ../../intro/contributing.txt:34 ../../intro/tutorial01.txt:35
msgid "Where to get help:"
msgstr ""

#: ../../intro/contributing.txt:36
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-developers <https://docs.djangoproject.com/en/dev/internals"
"/mailing-lists/#django-developers-mailing-list>`_ or drop by `#django-dev on"
" irc.freenode.net`__ to chat with other Django users who might be able to "
"help."
msgstr ""

#: ../../intro/contributing.txt:44
msgid "What does this tutorial cover?"
msgstr ""

#: ../../intro/contributing.txt:46
msgid ""
"We'll be walking you through contributing a patch to Django for the first "
"time. By the end of this tutorial, you should have a basic understanding of "
"both the tools and the processes involved. Specifically, we'll be covering "
"the following:"
msgstr ""

#: ../../intro/contributing.txt:50
msgid "Installing Git."
msgstr ""

#: ../../intro/contributing.txt:51
msgid "How to download a development copy of Django."
msgstr ""

#: ../../intro/contributing.txt:52
msgid "Running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:53
msgid "Writing a test for your patch."
msgstr ""

#: ../../intro/contributing.txt:54
msgid "Writing the code for your patch."
msgstr ""

#: ../../intro/contributing.txt:55
msgid "Testing your patch."
msgstr ""

#: ../../intro/contributing.txt:56
msgid "Generating a patch file for your changes."
msgstr ""

#: ../../intro/contributing.txt:57
msgid "Where to look for more information."
msgstr ""

#: ../../intro/contributing.txt:59
msgid ""
"Once you're done with the tutorial, you can look through the rest of "
"`Django's documentation on contributing "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/index>`_. It "
"contains lots of great information and is a must read for anyone who'd like "
"to become a regular contributor to Django. If you've got questions, it's "
"probably got the answers."
msgstr ""

#: ../../intro/contributing.txt:66
msgid "Installing Git"
msgstr ""

#: ../../intro/contributing.txt:68
msgid ""
"For this tutorial, you'll need Git installed to download the current "
"development version of Django and to generate patch files for the changes "
"you make."
msgstr ""

#: ../../intro/contributing.txt:72
msgid ""
"To check whether or not you have Git installed, enter ``git`` into the "
"command line. If you get messages saying that this command could not be "
"found, you'll have to download and install it, see `Git's download page`__."
msgstr ""

#: ../../intro/contributing.txt:76
msgid ""
"If you're not that familiar with Git, you can always find out more about its"
" commands (once it's installed) by typing ``git help`` into the command "
"line."
msgstr ""

#: ../../intro/contributing.txt:82
msgid "Getting a copy of Django's development version"
msgstr ""

#: ../../intro/contributing.txt:84
msgid ""
"The first step to contributing to Django is to get a copy of the source "
"code. From the command line, use the ``cd`` command to navigate to the "
"directory where you'll want your local copy of Django to live."
msgstr ""

#: ../../intro/contributing.txt:88
msgid ""
"Download the Django source code repository using the following command::"
msgstr ""

#: ../../intro/contributing.txt:94
msgid "For users who wish to use `virtualenv`__, you can use::"
msgstr ""

#: ../../intro/contributing.txt:98
msgid ""
"(where ``django`` is the directory of your clone that contains ``setup.py``)"
" to link your cloned checkout into a virtual environment. This is a great "
"option to isolate your development copy of Django from the rest of your "
"system and avoids potential package conflicts."
msgstr ""

#: ../../intro/contributing.txt:106
msgid "Rolling back to a previous revision of Django"
msgstr ""

#: ../../intro/contributing.txt:108
msgid ""
"For this tutorial, we'll be using ticket :ticket:`17549` as a case study, so"
" we'll rewind Django's version history in git to before that ticket's patch "
"was applied. This will allow us to go through all of the steps involved in "
"writing that patch from scratch, including running Django's test suite."
msgstr ""

#: ../../intro/contributing.txt:113
msgid ""
"**Keep in mind that while we'll be using an older revision of Django's trunk"
" for the purposes of the tutorial below, you should always use the current "
"development revision of Django when working on your own patch for a "
"ticket!**"
msgstr ""

#: ../../intro/contributing.txt:119
msgid ""
"The patch for this ticket was written by Ulrich Petri, and it was applied to"
" Django as `commit ac2052ebc84c45709ab5f0f25e685bf656ce79bc`__. "
"Consequently, we'll be using the revision of Django just prior to that, "
"`commit 39f5bc7fc3a4bb43ed8a1358b17fe0521a1a63ac`__."
msgstr ""

#: ../../intro/contributing.txt:127
msgid ""
"Navigate into Django's root directory (that's the one that contains "
"``django``, ``docs``, ``tests``, ``AUTHORS``, etc.). You can then check out "
"the older revision of Django that we'll be using in the tutorial below::"
msgstr ""

#: ../../intro/contributing.txt:134
msgid "Running Django's test suite for the first time"
msgstr ""

#: ../../intro/contributing.txt:136
msgid ""
"When contributing to Django it's very important that your code changes don't"
" introduce bugs into other areas of Django.  One way to check that Django "
"still works after you make your changes is by running Django's test suite. "
"If all the tests still pass, then you can be reasonably sure that your "
"changes haven't completely broken Django. If you've never run Django's test "
"suite before, it's a good idea to run it once beforehand just to get "
"familiar with what its output is supposed to look like."
msgstr ""

#: ../../intro/contributing.txt:144
msgid ""
"We can run the test suite by simply ``cd``-ing into the Django ``tests/`` "
"directory and, if you're using GNU/Linux, Mac OS X or some other flavor of "
"Unix, run::"
msgstr ""

#: ../../intro/contributing.txt:150
msgid ""
"If you're on Windows, the above should work provided that you are using "
"\"Git Bash\" provided by the default Git install. GitHub has a `nice "
"tutorial`__."
msgstr ""

#: ../../intro/contributing.txt:157
msgid ""
"If you're using ``virtualenv``, you can omit ``PYTHONPATH=..`` when running "
"the tests. This instructs Python to look for Django in the parent directory "
"of ``tests``. ``virtualenv`` puts your copy of Django on the ``PYTHONPATH`` "
"automatically."
msgstr ""

#: ../../intro/contributing.txt:162
msgid ""
"Now sit back and relax. Django's entire test suite has over 4800 different "
"tests, so it can take anywhere from 5 to 15 minutes to run, depending on the"
" speed of your computer."
msgstr ""

#: ../../intro/contributing.txt:166
msgid ""
"While Django's test suite is running, you'll see a stream of characters "
"representing the status of each test as it's run. ``E`` indicates that an "
"error was raised during a test, and ``F`` indicates that a test's assertions"
" failed. Both of these are considered to be test failures. Meanwhile, ``x`` "
"and ``s`` indicated expected failures and skipped tests, respectively. Dots "
"indicate passing tests."
msgstr ""

#: ../../intro/contributing.txt:173
msgid ""
"Skipped tests are typically due to missing external libraries required to "
"run the test; see `Running all the tests "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/unit-tests/#running-unit-tests-dependencies>`_ for a list of dependencies "
"and be sure to install any for tests related to the changes you are making "
"(we won't need any for this tutorial)."
msgstr ""

#: ../../intro/contributing.txt:178
msgid ""
"Once the tests complete, you should be greeted with a message informing you "
"whether the test suite passed or failed. Since you haven't yet made any "
"changes to Django's code, the entire test suite **should** pass. If you get "
"failures or errors make sure you've followed all of the previous steps "
"properly. See `Running the unit tests "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/unit-tests/#running-unit-tests>`_ for more information."
msgstr ""

#: ../../intro/contributing.txt:184
msgid ""
"Note that the latest Django trunk may not always be stable. When developing "
"against trunk, you can check `Django's continuous integration builds`__ to "
"determine if the failures are specific to your machine or if they are also "
"present in Django's official builds. If you click to view a particular "
"build, you can view the \"Configuration Matrix\" which shows failures broken"
" down by Python version and database backend."
msgstr ""

#: ../../intro/contributing.txt:195
msgid ""
"For this tutorial and the ticket we're working on, testing against SQLite is"
" sufficient, however, it's possible (and sometimes necessary) to `run the "
"tests using a different database "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/unit-tests/#running-unit-tests-settings>`_."
msgstr ""

#: ../../intro/contributing.txt:200
msgid "Writing some tests for your ticket"
msgstr ""

#: ../../intro/contributing.txt:202
msgid ""
"In most cases, for a patch to be accepted into Django it has to include "
"tests. For bug fix patches, this means writing a regression test to ensure "
"that the bug is never reintroduced into Django later on. A regression test "
"should be written in such a way that it will fail while the bug still exists"
" and pass once the bug has been fixed. For patches containing new features, "
"you'll need to include tests which ensure that the new features are working "
"correctly. They too should fail when the new feature is not present, and "
"then pass once it has been implemented."
msgstr ""

#: ../../intro/contributing.txt:211
msgid ""
"A good way to do this is to write your new tests first, before making any "
"changes to the code. This style of development is called `test-driven "
"development`__ and can be applied to both entire projects and single "
"patches. After writing your tests, you then run them to make sure that they "
"do indeed fail (since you haven't fixed that bug or added that feature yet)."
" If your new tests don't fail, you'll need to fix them so that they do. "
"After all, a regression test that passes regardless of whether a bug is "
"present is not very helpful at preventing that bug from reoccurring down the"
" road."
msgstr ""

#: ../../intro/contributing.txt:220
msgid "Now for our hands-on example."
msgstr ""

#: ../../intro/contributing.txt:225
msgid "Writing some tests for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:227
msgid ""
"Ticket :ticket:`17549` describes the following, small feature addition:"
msgstr ""

#: ../../intro/contributing.txt:229
msgid ""
"It's useful for URLField to give you a way to open the URL; otherwise you "
"might as well use a CharField."
msgstr ""

#: ../../intro/contributing.txt:232
msgid ""
"In order to resolve this ticket, we'll add a ``render`` method to the "
"``AdminURLFieldWidget`` in order to display a clickable link above the input"
" widget. Before we make those changes though, we're going to write a couple "
"tests to verify that our modification functions correctly and continues to "
"function correctly in the future."
msgstr ""

#: ../../intro/contributing.txt:238
msgid ""
"Navigate to Django's ``tests/regressiontests/admin_widgets/`` folder and "
"open the ``tests.py`` file. Add the following code on line 269 right before "
"the ``AdminFileWidgetTest`` class::"
msgstr ""

#: ../../intro/contributing.txt:272
msgid ""
"The new tests check to see that the ``render`` method we'll be adding works "
"correctly in a couple different situations."
msgstr ""

#: ../../intro/contributing.txt:275
msgid "But this testing thing looks kinda hard..."
msgstr ""

#: ../../intro/contributing.txt:277
msgid ""
"If you've never had to deal with tests before, they can look a little hard "
"to write at first glance. Fortunately, testing is a *very* big subject in "
"computer programming, so there's lots of information out there:"
msgstr ""

#: ../../intro/contributing.txt:281
msgid ""
"A good first look at writing tests for Django can be found in the "
"documentation on `/topics/testing/overview "
"<https://docs.djangoproject.com/en/1.8/topics/testing/overview>`_."
msgstr ""

#: ../../intro/contributing.txt:283
msgid ""
"Dive Into Python (a free online book for beginning Python developers) "
"includes a great `introduction to Unit Testing`__."
msgstr ""

#: ../../intro/contributing.txt:285
msgid ""
"After reading those, if you want something a little meatier to sink your "
"teeth into, there's always the `Python unittest documentation`__."
msgstr ""

#: ../../intro/contributing.txt:292
msgid "Running your new test"
msgstr ""

#: ../../intro/contributing.txt:294
msgid ""
"Remember that we haven't actually made any modifications to "
"``AdminURLFieldWidget`` yet, so our tests are going to fail. Let's run all "
"the tests in the ``model_forms_regress`` folder to make sure that's really "
"what happens. From the command line, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

#: ../../intro/contributing.txt:302
msgid ""
"If the tests ran correctly, you should see three failures corresponding to "
"each of the test methods we added. If all of the tests passed, then you'll "
"want to make sure that you added the new test shown above to the appropriate"
" folder and class."
msgstr ""

#: ../../intro/contributing.txt:308
msgid "Writing the code for your ticket"
msgstr ""

#: ../../intro/contributing.txt:310
msgid ""
"Next we'll be adding the functionality described in ticket :ticket:`17549` "
"to Django."
msgstr ""

#: ../../intro/contributing.txt:314
msgid "Writing the code for ticket #17549"
msgstr ""

#: ../../intro/contributing.txt:316
msgid ""
"Navigate to the ``django/django/contrib/admin/`` folder and open the "
"``widgets.py`` file. Find the ``AdminURLFieldWidget`` class on line 302 and "
"add the following ``render`` method after the existing ``__init__`` method::"
msgstr ""

#: ../../intro/contributing.txt:333
msgid "Verifying your test now passes"
msgstr ""

#: ../../intro/contributing.txt:335
msgid ""
"Once you're done modifying Django, we need to make sure that the tests we "
"wrote earlier pass, so we can see whether the code we wrote above is working"
" correctly. To run the tests in the ``admin_widgets`` folder, ``cd`` into "
"the Django ``tests/`` directory and run::"
msgstr ""

#: ../../intro/contributing.txt:342
msgid ""
"Oops, good thing we wrote those tests! You should still see 3 failures with "
"the following exception::"
msgstr ""

#: ../../intro/contributing.txt:347
msgid ""
"We forgot to add the import for that method.  Go ahead and add the "
"``smart_urlquote`` import at the end of line 13 of "
"``django/contrib/admin/widgets.py`` so it looks as follows::"
msgstr ""

#: ../../intro/contributing.txt:353
msgid ""
"Re-run the tests and everything should pass. If it doesn't, make sure you "
"correctly modified the ``AdminURLFieldWidget`` class as shown above and "
"copied the new tests correctly."
msgstr ""

#: ../../intro/contributing.txt:358
msgid "Running Django's test suite for the second time"
msgstr ""

#: ../../intro/contributing.txt:360
msgid ""
"Once you've verified that your patch and your test are working correctly, "
"it's a good idea to run the entire Django test suite just to verify that "
"your change hasn't introduced any bugs into other areas of Django. While "
"successfully passing the entire test suite doesn't guarantee your code is "
"bug free, it does help identify many bugs and regressions that might "
"otherwise go unnoticed."
msgstr ""

#: ../../intro/contributing.txt:366
msgid ""
"To run the entire Django test suite, ``cd`` into the Django ``tests/`` "
"directory and run::"
msgstr ""

#: ../../intro/contributing.txt:371
msgid ""
"As long as you don't see any failures, you're good to go. Note that this fix"
" also made a `small CSS change`__ to format the new widget. You can make the"
" change if you'd like, but we'll skip it for now in the interest of brevity."
msgstr ""

#: ../../intro/contributing.txt:378
msgid "Writing Documentation"
msgstr ""

#: ../../intro/contributing.txt:380
msgid ""
"This is a new feature, so it should be documented.  Add the following on "
"line 925 of ``django/docs/ref/models/fields.txt`` beneath the existing docs "
"for ``URLField``::"
msgstr ""

#: ../../intro/contributing.txt:389
msgid ""
"For more information on writing documentation, including an explanation of "
"what the ``versionadded`` bit is all about, see `/internals/contributing"
"/writing-documentation "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-"
"documentation>`_. That page also includes an explanation of how to build a "
"copy of the documentation locally, so you can preview the HTML that will be "
"generated."
msgstr ""

#: ../../intro/contributing.txt:396
msgid "Generating a patch for your changes"
msgstr ""

#: ../../intro/contributing.txt:398
msgid ""
"Now it's time to generate a patch file that can be uploaded to Trac or "
"applied to another copy of Django. To get a look at the content of your "
"patch, run the following command::"
msgstr ""

#: ../../intro/contributing.txt:404
msgid ""
"This will display the differences between your current copy of Django (with "
"your changes) and the revision that you initially checked out earlier in the"
" tutorial."
msgstr ""

#: ../../intro/contributing.txt:408
msgid ""
"Once you're done looking at the patch, hit the ``q`` key to exit back to the"
" command line.  If the patch's content looked okay, you can run the "
"following command to save the patch file to your current working directory::"
msgstr ""

#: ../../intro/contributing.txt:414
msgid ""
"You should now have a file in the root Django directory called "
"``17549.diff``. This patch file contains all your changes and should look "
"this:"
msgstr ""

#: ../../intro/contributing.txt:509
msgid "So what do I do next?"
msgstr ""

#: ../../intro/contributing.txt:511
msgid ""
"Congratulations, you've generated your very first Django patch! Now that "
"you've got that under your belt, you can put those skills to good use by "
"helping to improve Django's codebase. Generating patches and attaching them "
"to Trac tickets is useful, however, since we are using git - adopting a more"
" `git oriented workflow "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/working-with-git>`_ is recommended."
msgstr ""

#: ../../intro/contributing.txt:518
msgid ""
"Since we never committed our changes locally, perform the following to get "
"your git branch back to a good starting point::"
msgstr ""

#: ../../intro/contributing.txt:525
msgid "More information for new contributors"
msgstr ""

#: ../../intro/contributing.txt:527
msgid ""
"Before you get too into writing patches for Django, there's a little more "
"information on contributing that you should probably take a look at:"
msgstr ""

#: ../../intro/contributing.txt:530
msgid ""
"You should make sure to read Django's documentation on `claiming tickets and"
" submitting patches "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/submitting-patches>`_. It covers Trac etiquette, how to claim tickets for "
"yourself, expected coding style for patches, and many other important "
"details."
msgstr ""

#: ../../intro/contributing.txt:534
msgid ""
"First time contributors should also read Django's `documentation for first "
"time contributors "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/new-"
"contributors/>`_. It has lots of good advice for those of us who are new to "
"helping out with Django."
msgstr ""

#: ../../intro/contributing.txt:538
msgid ""
"After those, if you're still hungry for more information about contributing,"
" you can always browse through the rest of `Django's documentation on "
"contributing "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/index>`_. It "
"contains a ton of useful information and should be your first source for "
"answering any questions you might have."
msgstr ""

#: ../../intro/contributing.txt:545
msgid "Finding your first real ticket"
msgstr ""

#: ../../intro/contributing.txt:547
msgid ""
"Once you've looked through some of that information, you'll be ready to go "
"out and find a ticket of your own to write a patch for. Pay special "
"attention to tickets with the \"easy pickings\" criterion. These tickets are"
" often much simpler in nature and are great for first time contributors.  "
"Once you're familiar with contributing to Django, you can move on to writing"
" patches for more difficult and complicated tickets."
msgstr ""

#: ../../intro/contributing.txt:554
msgid ""
"If you just want to get started already (and nobody would blame you!), try "
"taking a look at the list of `easy tickets that need patches`__ and the "
"`easy tickets that have patches which need improvement`__. If you're "
"familiar with writing tests, you can also look at the list of `easy tickets "
"that need tests`__. Just remember to follow the guidelines about claiming "
"tickets that were mentioned in the link to Django's documentation on "
"`claiming tickets and submitting patches "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code"
"/submitting-patches>`_."
msgstr ""

#: ../../intro/contributing.txt:567 ../../intro/tutorial05.txt:690
#: ../../intro/tutorial06.txt:120
msgid "What's next?"
msgstr ""

#: ../../intro/contributing.txt:569
msgid ""
"After a ticket has a patch, it needs to be reviewed by a second set of eyes."
" After uploading a patch or submitting a pull request, be sure to update the"
" ticket metadata by setting the flags on the ticket to say \"has patch\", "
"\"doesn't need tests\", etc, so others can find it for review. Contributing "
"doesn't necessarily always mean writing a patch from scratch. Reviewing "
"existing patches is also a very helpful contribution. See "
"`/internals/contributing/triaging-tickets "
"<https://docs.djangoproject.com/en/1.8/internals/contributing/triaging-"
"tickets>`_ for details."
msgstr ""

#: ../../intro/index.txt:2
msgid "Getting started"
msgstr ""

#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right"
" place: read this material to quickly get up and running."
msgstr ""

#: ../../intro/index.txt:24
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what"
" the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

#: ../../intro/index.txt:28
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

#: ../../intro/index.txt:31
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_. If that's not quite your "
"style, there are many other `books about Python`_."
msgstr ""

#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr ""

#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a "
"`complete installation guide "
"<https://docs.djangoproject.com/en/1.8/topics/install>`_ that covers all the"
" possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

#: ../../intro/install.txt:10
msgid "Install Python"
msgstr ""

#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with Python "
"2.7, 3.2, 3.3, or 3.4. All these versions of Python include a lightweight "
"database called SQLite_ so you won't need to set up a database just yet."
msgstr ""

#: ../../intro/install.txt:18
msgid ""
"Get the latest version of Python at https://www.python.org/download/ or with"
" your operating system's package manager."
msgstr ""

#: ../../intro/install.txt:21
msgid "Django on Jython"
msgstr ""

#: ../../intro/install.txt:23
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See `/howto/jython "
"<https://docs.djangoproject.com/en/1.8/howto/jython>`_ for details."
msgstr ""

#: ../../intro/install.txt:28
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

#: ../../intro/install.txt:37
msgid "Set up a database"
msgstr ""

#: ../../intro/install.txt:39
msgid ""
"This step is only necessary if you'd like to work with a \"large\" database "
"engine like PostgreSQL, MySQL, or Oracle. To install such a database, "
"consult the `database installation information "
"<https://docs.djangoproject.com/en/1.8/topics/install/#database-"
"installation>`_."
msgstr ""

#: ../../intro/install.txt:44
msgid "Remove any old versions of Django"
msgstr ""

#: ../../intro/install.txt:46
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to `uninstall the old Django version before installing the new"
" version <https://docs.djangoproject.com/en/1.8/topics/install/#removing-"
"old-versions-of-django>`_."
msgstr ""

#: ../../intro/install.txt:51
msgid "Install Django"
msgstr ""

#: ../../intro/install.txt:53
msgid "You've got three easy options to install Django:"
msgstr ""

#: ../../intro/install.txt:55
msgid ""
"Install a version of Django `provided by your operating system distribution "
"<https://docs.djangoproject.com/en/1.8/misc/distributions>`_. This is the "
"quickest option for those who have operating systems that distribute Django."
msgstr ""

#: ../../intro/install.txt:59
msgid ""
"`Install an official release "
"<https://docs.djangoproject.com/en/1.8/topics/install/#installing-official-"
"release>`_. This is the best approach for users who want a stable version "
"number and aren't concerned about running a slightly older version of "
"Django."
msgstr ""

#: ../../intro/install.txt:63
msgid ""
"`Install the latest development version "
"<https://docs.djangoproject.com/en/1.8/topics/install/#installing-"
"development-version>`_. This is best for users who want the latest-and-"
"greatest features and aren't afraid of running brand-new code."
msgstr ""

#: ../../intro/install.txt:66
msgid ""
"Always refer to the documentation that corresponds to the version of Django "
"you're using!"
msgstr ""

#: ../../intro/install.txt:69
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they"
" likely won't work with an official release."
msgstr ""

#: ../../intro/install.txt:76
msgid "Verifying"
msgstr ""

#: ../../intro/install.txt:78
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django:"
msgstr ""

#: ../../intro/install.txt:87
msgid "You may have another version of Django installed."
msgstr ""

#: ../../intro/install.txt:90
msgid "That's it!"
msgstr ""

#: ../../intro/install.txt:92
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr ""

#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""

#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or `dive right into "
"more detailed documentation "
"<https://docs.djangoproject.com/en/1.8/topics/index>`_."
msgstr ""

#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr ""

#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an `object-"
"relational mapper`_ in which you describe your database layout in Python "
"code."
msgstr ""

#: ../../intro/overview.txt:24
msgid ""
"The `data-model syntax "
"<https://docs.djangoproject.com/en/1.8/topics/db/models>`_ offers many rich "
"ways of representing your models -- so far, it's been solving many years' "
"worth of database-schema problems. Here's a quick example:"
msgstr ""

#: ../../intro/overview.txt:49
msgid "Install it"
msgstr ""

#: ../../intro/overview.txt:51
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""

#: ../../intro/overview.txt:58
msgid ""
"The :djadmin:`migrate` command looks at all your available models and "
"creates tables in your database for whichever tables don't already exist, as"
" well as optionally providing `much richer schema control "
"<https://docs.djangoproject.com/en/1.8/topics/migrations>`_."
msgstr ""

#: ../../intro/overview.txt:63
msgid "Enjoy the free API"
msgstr ""

#: ../../intro/overview.txt:65
msgid ""
"With that, you've got a free, and rich, `Python API "
"<https://docs.djangoproject.com/en/1.8/topics/db/queries>`_ to access your "
"data. The API is created on the fly, no code generation necessary:"
msgstr ""

#: ../../intro/overview.txt:141
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

#: ../../intro/overview.txt:143
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready `administrative interface "
"<https://docs.djangoproject.com/en/1.8/ref/contrib/admin/index>`_ -- a Web "
"site that lets authenticated users add, change and delete objects. It's as "
"easy as registering your model in the admin site:"
msgstr ""

#: ../../intro/overview.txt:168
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

#: ../../intro/overview.txt:172
msgid ""
"One typical workflow in creating Django apps is to create models and get the"
" admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

#: ../../intro/overview.txt:177
msgid "Design your URLs"
msgstr ""

#: ../../intro/overview.txt:179
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

#: ../../intro/overview.txt:183
msgid ""
"To design URLs for an app, you create a Python module called a `URLconf "
"<https://docs.djangoproject.com/en/1.8/topics/http/urls>`_. A table of "
"contents for your app, it contains a simple mapping between URL patterns and"
" Python callback functions. URLconfs also serve to decouple URLs from Python"
" code."
msgstr ""

#: ../../intro/overview.txt:187
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above:"
msgstr ""

#: ../../intro/overview.txt:203
msgid ""
"The code above maps URLs, as simple `regular expressions`_, to the location "
"of Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one"
" that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

#: ../../intro/overview.txt:213
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object --"
" which contains request metadata -- and the values captured in the regex."
msgstr ""

#: ../../intro/overview.txt:217
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

#: ../../intro/overview.txt:222
msgid "Write your views"
msgstr ""

#: ../../intro/overview.txt:224
msgid ""
"Each view is responsible for doing one of two things: Returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as "
":class:`~django.http.Http404`. The rest is up to you."
msgstr ""

#: ../../intro/overview.txt:229
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example"
" view for ``year_archive`` from above:"
msgstr ""

#: ../../intro/overview.txt:245
msgid ""
"This example uses Django's `template system "
"<https://docs.djangoproject.com/en/1.8/topics/templates>`_, which has "
"several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

#: ../../intro/overview.txt:250
msgid "Design your templates"
msgstr ""

#: ../../intro/overview.txt:252
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

#: ../../intro/overview.txt:254
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates with :setting:`DIRS <TEMPLATES-DIRS>`. If a template "
"doesn't exist in the first directory, it checks the second, and so on."
msgstr ""

#: ../../intro/overview.txt:259
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

#: ../../intro/overview.txt:279
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup. They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

#: ../../intro/overview.txt:284
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe\" "
"(the \"|\" character). This is called a template filter, and it's a way to "
"filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date "
"function)."
msgstr ""

#: ../../intro/overview.txt:289
msgid ""
"You can chain together as many filters as you'd like. You can write `custom "
"template filters <https://docs.djangoproject.com/en/1.8/howto/custom-"
"template-tags/#howto-writing-custom-template-filters>`_. You can write "
"`custom template tags <https://docs.djangoproject.com/en/1.8/howto/custom-"
"template-tags>`_, which run custom Python code behind the scenes."
msgstr ""

#: ../../intro/overview.txt:294
msgid ""
"Finally, Django uses the concept of \"template inheritance\". That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template"
" called 'base', which has defined a bunch of blocks, and fill the blocks "
"with the following blocks.\" In short, that lets you dramatically cut down "
"on redundancy in templates: each template has to define only what's unique "
"to that template."
msgstr ""

#: ../../intro/overview.txt:300
msgid ""
"Here's what the \"base.html\" template, including the use of `static files "
"<https://docs.djangoproject.com/en/1.8/howto/static-files/index>`_, might "
"look like:"
msgstr ""

#: ../../intro/overview.txt:316
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site"
" redesign as easy as changing a single file -- the base template."
msgstr ""

#: ../../intro/overview.txt:320
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different mobile versions of sites -- simply "
"by creating a new base template."
msgstr ""

#: ../../intro/overview.txt:325
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that"
" matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views,"
" templates -- is decoupled from the next."
msgstr ""

#: ../../intro/overview.txt:334
msgid "This is just the surface"
msgstr ""

#: ../../intro/overview.txt:336
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

#: ../../intro/overview.txt:339
msgid ""
"A `caching framework <https://docs.djangoproject.com/en/1.8/topics/cache>`_ "
"that integrates with memcached or other backends."
msgstr ""

#: ../../intro/overview.txt:342
msgid ""
"A `syndication framework "
"<https://docs.djangoproject.com/en/1.8/ref/contrib/syndication>`_ that makes"
" creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

#: ../../intro/overview.txt:345
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

#: ../../intro/overview.txt:348
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

#: ../../intro/reusable-apps.txt:3
msgid "Advanced tutorial: How to write reusable apps"
msgstr ""

#: ../../intro/reusable-apps.txt:5
msgid ""
"This advanced tutorial begins where :doc:`Tutorial 6 </intro/tutorial06>` "
"left off. We'll be turning our Web-poll into a standalone Python package you"
" can reuse in new projects and share with other people."
msgstr ""

#: ../../intro/reusable-apps.txt:9
msgid ""
"If you haven't recently completed Tutorials 1–6, we encourage you to review "
"these so that your example project matches the one described below."
msgstr ""

#: ../../intro/reusable-apps.txt:13
msgid "Reusability matters"
msgstr ""

#: ../../intro/reusable-apps.txt:15
msgid ""
"It's a lot of work to design, build, test and maintain a web application. "
"Many Python and Django projects share common problems. Wouldn't it be great "
"if we could save some of this repeated work?"
msgstr ""

#: ../../intro/reusable-apps.txt:19
msgid ""
"Reusability is the way of life in Python. `The Python Package Index (PyPI) "
"<https://pypi.python.org/pypi>`_ has a vast range of packages you can use in"
" your own Python programs. Check out `Django Packages "
"<https://www.djangopackages.com>`_ for existing reusable apps you could "
"incorporate in your project. Django itself is also just a Python package. "
"This means that you can take existing Python packages or Django apps and "
"compose them into your own web project. You only need to write the parts "
"that make your project unique."
msgstr ""

#: ../../intro/reusable-apps.txt:28
msgid ""
"Let's say you were starting a new project that needed a polls app like the "
"one we've been working on. How do you make this app reusable? Luckily, "
"you're well on the way already. In :doc:`Tutorial 3 </intro/tutorial03>`, we"
" saw how we could decouple polls from the project-level URLconf using an "
"``include``. In this tutorial, we'll take further steps to make the app easy"
" to use in new projects and ready to publish for others to install and use."
msgstr ""

#: ../../intro/reusable-apps.txt:35
msgid "Package? App?"
msgstr ""

#: ../../intro/reusable-apps.txt:37
msgid ""
"A Python `package <https://docs.python.org/tutorial/modules.html#packages>`_"
" provides a way of grouping related Python code for easy reuse. A package "
"contains one or more files of Python code (also known as \"modules\")."
msgstr ""

#: ../../intro/reusable-apps.txt:41
msgid ""
"A package can be imported with ``import foo.bar`` or ``from foo import "
"bar``. For a directory (like ``polls``) to form a package, it must contain a"
" special file ``__init__.py``, even if this file is empty."
msgstr ""

#: ../../intro/reusable-apps.txt:45
msgid ""
"A Django *application* is just a Python package that is specifically "
"intended for use in a Django project. An application may use common Django "
"conventions, such as having ``models``, ``tests``, ``urls``, and ``views`` "
"submodules."
msgstr ""

#: ../../intro/reusable-apps.txt:50
msgid ""
"Later on we use the term *packaging* to describe the process of making a "
"Python package easy for others to install. It can be a little confusing, we "
"know."
msgstr ""

#: ../../intro/reusable-apps.txt:55
msgid "Your project and your reusable app"
msgstr ""

#: ../../intro/reusable-apps.txt:57
msgid "After the previous tutorials, our project should look like this::"
msgstr ""

#: ../../intro/reusable-apps.txt:90
msgid ""
"You created ``mysite/templates`` in :doc:`Tutorial 2 </intro/tutorial02>`, "
"and ``polls/templates`` in :doc:`Tutorial 3 </intro/tutorial03>`. Now "
"perhaps it is clearer why we chose to have separate template directories for"
" the project and application: everything that is part of the polls "
"application is in ``polls``. It makes the application self-contained and "
"easier to drop into a new project."
msgstr ""

#: ../../intro/reusable-apps.txt:97
msgid ""
"The ``polls`` directory could now be copied into a new Django project and "
"immediately reused. It's not quite ready to be published though. For that, "
"we need to package the app to make it easy for others to install."
msgstr ""

#: ../../intro/reusable-apps.txt:104
msgid "Installing some prerequisites"
msgstr ""

#: ../../intro/reusable-apps.txt:106
msgid ""
"The current state of Python packaging is a bit muddled with various tools. "
"For this tutorial, we're going to use setuptools_ to build our package. It's"
" the recommended packaging tool (merged with the ``distribute`` fork). We'll"
" also be using `pip`_ to install and uninstall it. You should install these "
"two packages now. If you need help, you can refer to `how to install Django "
"with pip <https://docs.djangoproject.com/en/1.8/topics/install/#installing-"
"official-release>`_. You can install ``setuptools`` the same way."
msgstr ""

#: ../../intro/reusable-apps.txt:118
msgid "Packaging your app"
msgstr ""

#: ../../intro/reusable-apps.txt:120
msgid ""
"Python *packaging* refers to preparing your app in a specific format that "
"can be easily installed and used. Django itself is packaged very much like "
"this. For a small app like polls, this process isn't too difficult."
msgstr ""

#: ../../intro/reusable-apps.txt:124
msgid ""
"First, create a parent directory for ``polls``, outside of your Django "
"project. Call this directory ``django-polls``."
msgstr ""

#: ../../intro/reusable-apps.txt:127
msgid "Choosing a name for your app"
msgstr ""

#: ../../intro/reusable-apps.txt:129
msgid ""
"When choosing a name for your package, check resources like PyPI to avoid "
"naming conflicts with existing packages. It's often useful to prepend "
"``django-`` to your module name when creating a package to distribute. This "
"helps others looking for Django apps identify your app as Django specific."
msgstr ""

#: ../../intro/reusable-apps.txt:135
msgid ""
"Application labels (that is, the final part of the dotted path to "
"application packages) *must* be unique in :setting:`INSTALLED_APPS`. Avoid "
"using the same label as any of the Django `contrib packages "
"<https://docs.djangoproject.com/en/1.8/ref/contrib/index>`_, for example "
"``auth``, ``admin``, or ``messages``."
msgstr ""

#: ../../intro/reusable-apps.txt:140
msgid "Move the ``polls`` directory into the ``django-polls`` directory."
msgstr ""

#: ../../intro/reusable-apps.txt:142
msgid "Create a file ``django-polls/README.rst`` with the following contents:"
msgstr ""

#: ../../intro/reusable-apps.txt:177
msgid ""
"Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the "
"scope of this tutorial, but suffice it to say that code released publicly "
"without a license is *useless*. Django and many Django-compatible apps are "
"distributed under the BSD license; however, you're free to pick your own "
"license. Just be aware that your licensing choice will affect who is able to"
" use your code."
msgstr ""

#: ../../intro/reusable-apps.txt:184
msgid ""
"Next we'll create a ``setup.py`` file which provides details about how to "
"build and install the app.  A full explanation of this file is beyond the "
"scope of this tutorial, but the `setuptools docs "
"<http://pythonhosted.org/setuptools/setuptools.html>`_ have a good "
"explanation. Create a file ``django-polls/setup.py`` with the following "
"contents:"
msgstr ""

#: ../../intro/reusable-apps.txt:230
msgid ""
"Only Python modules and packages are included in the package by default. To "
"include additional files, we'll need to create a ``MANIFEST.in`` file. The "
"setuptools docs referred to in the previous step discuss this file in more "
"details. To include the templates, the ``README.rst`` and our ``LICENSE`` "
"file, create a file ``django-polls/MANIFEST.in`` with the following "
"contents:"
msgstr ""

#: ../../intro/reusable-apps.txt:245
msgid ""
"It's optional, but recommended, to include detailed documentation with your "
"app. Create an empty directory ``django-polls/docs`` for future "
"documentation. Add an additional line to ``django-polls/MANIFEST.in``::"
msgstr ""

#: ../../intro/reusable-apps.txt:251
msgid ""
"Note that the ``docs`` directory won't be included in your package unless "
"you add some files to it. Many Django apps also provide their documentation "
"online through sites like `readthedocs.org <https://readthedocs.org>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:255
msgid ""
"Try building your package with ``python setup.py sdist`` (run from inside "
"``django-polls``). This creates a directory called ``dist`` and builds your "
"new package, ``django-polls-0.1.tar.gz``."
msgstr ""

#: ../../intro/reusable-apps.txt:259
msgid ""
"For more information on packaging, see Python's `Tutorial on Packaging and "
"Distributing Projects "
"<https://packaging.python.org/en/latest/distributing.html>`_."
msgstr ""

#: ../../intro/reusable-apps.txt:263
msgid "Using your own package"
msgstr ""

#: ../../intro/reusable-apps.txt:265
msgid ""
"Since we moved the ``polls`` directory out of the project, it's no longer "
"working. We'll now fix this by installing our new ``django-polls`` package."
msgstr ""

#: ../../intro/reusable-apps.txt:268
msgid "Installing as a user library"
msgstr ""

#: ../../intro/reusable-apps.txt:270
msgid ""
"The following steps install ``django-polls`` as a user library. Per-user "
"installs have a lot of advantages over installing the package system-wide, "
"such as being usable on systems where you don't have administrator access as"
" well as preventing the package from affecting system services and other "
"users of the machine."
msgstr ""

#: ../../intro/reusable-apps.txt:276
msgid ""
"Note that per-user installations can still affect the behavior of system "
"tools that run as that user, so ``virtualenv`` is a more robust solution "
"(see below)."
msgstr ""

#: ../../intro/reusable-apps.txt:280
msgid ""
"To install the package, use pip (you already `installed it "
"<https://docs.djangoproject.com/en/1.8/topics/install/#installing-official-"
"release>`_, right?)::"
msgstr ""

#: ../../intro/reusable-apps.txt:284
msgid ""
"With luck, your Django project should now work correctly again. Run the "
"server again to confirm this."
msgstr ""

#: ../../intro/reusable-apps.txt:287
msgid "To uninstall the package, use pip::"
msgstr ""

#: ../../intro/reusable-apps.txt:294
msgid "Publishing your app"
msgstr ""

#: ../../intro/reusable-apps.txt:296
msgid ""
"Now that we've packaged and tested ``django-polls``, it's ready to share "
"with the world! If this wasn't just an example, you could now:"
msgstr ""

#: ../../intro/reusable-apps.txt:299
msgid "Email the package to a friend."
msgstr ""

#: ../../intro/reusable-apps.txt:301
msgid "Upload the package on your Web site."
msgstr ""

#: ../../intro/reusable-apps.txt:303
msgid ""
"Post the package on a public repository, such as `the Python Package Index "
"(PyPI)`_. `packaging.python.org <https://packaging.python.org>`_ has `a good"
" tutorial <https://packaging.python.org/en/latest/distributing.html"
"#uploading-your-project-to-pypi>`_ for doing this."
msgstr ""

#: ../../intro/reusable-apps.txt:309
msgid "Installing Python packages with virtualenv"
msgstr ""

#: ../../intro/reusable-apps.txt:311
msgid ""
"Earlier, we installed the polls app as a user library. This has some "
"disadvantages:"
msgstr ""

#: ../../intro/reusable-apps.txt:314
msgid ""
"Modifying the user libraries can affect other Python software on your "
"system."
msgstr ""

#: ../../intro/reusable-apps.txt:316
msgid ""
"You won't be able to run multiple versions of this package (or others with "
"the same name)."
msgstr ""

#: ../../intro/reusable-apps.txt:319
msgid ""
"Typically, these situations only arise once you're maintaining several "
"Django projects. When they do, the best solution is to use `virtualenv "
"<http://www.virtualenv.org/>`_. This tool allows you to maintain multiple "
"isolated Python environments, each with its own copy of the libraries and "
"package namespace."
msgstr ""

#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed and which version by running the following "
"command:"
msgstr ""

#: ../../intro/tutorial01.txt:22
msgid ""
"If Django is installed, you should see the version of your installation. If "
"it isn't, you'll get an error telling \"No module named django\"."
msgstr ""

#: ../../intro/tutorial01.txt:25
msgid ""
"This tutorial is written for Django |version| and Python 3.2 or later. If "
"the Django version doesn't match, you can refer to the tutorial for your "
"version of Django by using the version switcher at the bottom right corner "
"of this page, or update Django to the newest version. If you are still using"
" Python 2.7, you will need to adjust the code samples slightly, as described"
" in comments."
msgstr ""

#: ../../intro/tutorial01.txt:32
msgid ""
"See `How to install Django "
"<https://docs.djangoproject.com/en/1.8/topics/install>`_ for advice on how "
"to remove older versions of Django and install a newer one."
msgstr ""

#: ../../intro/tutorial01.txt:37
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users mailing list <http://groups.google.com/group/django-"
"users/>`_ or drop by `#django on irc.freenode.net "
"<irc://irc.freenode.net/django>`_ to chat with other Django users who might "
"be able to help."
msgstr ""

#: ../../intro/tutorial01.txt:43
msgid "Creating a project"
msgstr ""

#: ../../intro/tutorial01.txt:45
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

#: ../../intro/tutorial01.txt:51
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:58
msgid ""
"This will create a ``mysite`` directory in your current directory. If it "
"didn't work, see `Problems running django-admin.py "
"<https://docs.djangoproject.com/en/1.8/faq/troubleshooting/#troubleshooting-"
"django-admin-py>`_."
msgstr ""

#: ../../intro/tutorial01.txt:63
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

#: ../../intro/tutorial01.txt:68
msgid "Where should this code live?"
msgstr ""

#: ../../intro/tutorial01.txt:70
msgid ""
"If your background is in plain old PHP (with no use of modern frameworks), "
"you're probably used to putting code under the Web server's document root "
"(in a place such as ``/var/www``). With Django, you don't do that. It's not "
"a good idea to put any of this Python code within your Web server's document"
" root, because it risks the possibility that people may be able to view your"
" code over the Web. That's not good for security."
msgstr ""

#: ../../intro/tutorial01.txt:77
msgid ""
"Put your code in some directory **outside** of the document root, such as "
":file:`/home/mycode`."
msgstr ""

#: ../../intro/tutorial01.txt:80
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

#: ../../intro/tutorial01.txt:90
msgid "These files are:"
msgstr ""

#: ../../intro/tutorial01.txt:92
msgid ""
"The outer :file:`mysite/` root directory is just a container for your "
"project. Its name doesn't matter to Django; you can rename it to anything "
"you like."
msgstr ""

#: ../../intro/tutorial01.txt:96
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about "
":file:`manage.py` in `/ref/django-admin "
"<https://docs.djangoproject.com/en/1.8/ref/django-admin>`_."
msgstr ""

#: ../../intro/tutorial01.txt:100
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``mysite.urls``)."
msgstr ""

#: ../../intro/tutorial01.txt:104
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

#: ../../intro/tutorial01.txt:108
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django project."
"  `/topics/settings "
"<https://docs.djangoproject.com/en/1.8/topics/settings>`_ will tell you all "
"about how settings work."
msgstr ""

#: ../../intro/tutorial01.txt:112
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in `/topics/http/urls "
"<https://docs.djangoproject.com/en/1.8/topics/http/urls>`_."
msgstr ""

#: ../../intro/tutorial01.txt:116
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible web servers to "
"serve your project. See `/howto/deployment/wsgi/index "
"<https://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/index>`_ for "
"more details."
msgstr ""

#: ../../intro/tutorial01.txt:122
msgid "Database setup"
msgstr ""

#: ../../intro/tutorial01.txt:124
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings."
msgstr ""

#: ../../intro/tutorial01.txt:127
msgid ""
"By default, the configuration uses SQLite. If you're new to databases, or "
"you're just interested in trying Django, this is the easiest choice. SQLite "
"is included in Python, so you won't need to install anything else to support"
" your database. When starting your first real project, however, you may want"
" to use a more robust database like PostgreSQL, to avoid database-switching "
"headaches down the road."
msgstr ""

#: ../../intro/tutorial01.txt:134
msgid ""
"If you wish to use another database, install the appropriate `database "
"bindings <https://docs.djangoproject.com/en/1.8/topics/install/#database-"
"installation>`_, and change the following keys in the :setting:`DATABASES` "
"``'default'`` item to match your database connection settings:"
msgstr ""

#: ../../intro/tutorial01.txt:139
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either "
"``'django.db.backends.sqlite3'``, "
"``'django.db.backends.postgresql_psycopg2'``, "
"``'django.db.backends.mysql'``, or ``'django.db.backends.oracle'``. Other "
"backends are `also available "
"<https://docs.djangoproject.com/en/1.8/ref/databases/#third-party-notes>`_."
msgstr ""

#: ../../intro/tutorial01.txt:145
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. The "
"default value, ``os.path.join(BASE_DIR, 'db.sqlite3')``, will store the file"
" in your project directory."
msgstr ""

#: ../../intro/tutorial01.txt:151
msgid ""
"If you are not using SQLite as your database, additional settings such as "
":setting:`USER`, :setting:`PASSWORD`, :setting:`HOST` must be added. For "
"more details, see the reference documentation for :setting:`DATABASES`."
msgstr ""

#: ../../intro/tutorial01.txt:156
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

#: ../../intro/tutorial01.txt:160
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

#: ../../intro/tutorial01.txt:163
msgid ""
"While you're editing :file:`mysite/settings.py`, set :setting:`TIME_ZONE` to"
" your time zone."
msgstr ""

#: ../../intro/tutorial01.txt:166
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting at the top of the file. "
"That holds the names of all Django applications that are activated in this "
"Django instance. Apps can be used in multiple projects, and you can package "
"and distribute them for use by others in their projects."
msgstr ""

#: ../../intro/tutorial01.txt:171
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

#: ../../intro/tutorial01.txt:174
msgid ""
":mod:`django.contrib.admin` -- The admin site. You'll use it in :doc:`part 2"
" of this tutorial </intro/tutorial02>`."
msgstr ""

#: ../../intro/tutorial01.txt:177
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

#: ../../intro/tutorial01.txt:179
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

#: ../../intro/tutorial01.txt:181
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

#: ../../intro/tutorial01.txt:183
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

#: ../../intro/tutorial01.txt:185
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

#: ../../intro/tutorial01.txt:188
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

#: ../../intro/tutorial01.txt:190
msgid ""
"Some of these applications makes use of at least one database table, though,"
" so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

#: ../../intro/tutorial01.txt:198
msgid ""
"The :djadmin:`migrate` command looks at the :setting:`INSTALLED_APPS` "
"setting and creates any necessary database tables according to the database "
"settings in your :file:`mysite/settings.py` file and the database migrations"
" shipped with the app (we'll cover those later). You'll see a message for "
"each migration it applies. If you're interested, run the command-line client"
" for your database and type ``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL),"
" or ``.schema`` (SQLite) to display the tables Django created."
msgstr ""

#: ../../intro/tutorial01.txt:206
msgid "For the minimalists"
msgstr ""

#: ../../intro/tutorial01.txt:208
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from "
":setting:`INSTALLED_APPS` before running :djadmin:`migrate`. The "
":djadmin:`migrate` command will only run migrations for apps in "
":setting:`INSTALLED_APPS`."
msgstr ""

#: ../../intro/tutorial01.txt:216
msgid "The development server"
msgstr ""

#: ../../intro/tutorial01.txt:218
msgid ""
"Let's verify your Django project works. Change into the outer :file:`mysite`"
" directory, if you haven't already, and run the following commands:"
msgstr ""

#: ../../intro/tutorial01.txt:225
msgid "You'll see the following output on the command line:"
msgstr ""

#: ../../intro/tutorial01.txt:237
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop"
" things rapidly, without having to deal with configuring a production server"
" -- such as Apache -- until you're ready for production."
msgstr ""

#: ../../intro/tutorial01.txt:242
msgid ""
"Now's a good time to note: **don't** use this server in anything resembling "
"a production environment. It's intended only for use while developing. "
"(We're in the business of making Web frameworks, not Web servers.)"
msgstr ""

#: ../../intro/tutorial01.txt:246
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

#: ../../intro/tutorial01.txt:250
msgid "Changing the port"
msgstr ""

#: ../../intro/tutorial01.txt:252
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

#: ../../intro/tutorial01.txt:255
msgid ""
"If you want to change the server's port, pass it as a command-line argument."
" For instance, this command starts the server on port 8080:"
msgstr ""

#: ../../intro/tutorial01.txt:263
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

#: ../../intro/tutorial01.txt:271
msgid ""
"Full docs for the development server can be found in the "
":djadmin:`runserver` reference."
msgstr ""

#: ../../intro/tutorial01.txt:274
msgid "Automatic reloading of :djadmin:`runserver`"
msgstr ""

#: ../../intro/tutorial01.txt:276
msgid ""
"The development server automatically reloads Python code for each request as"
" needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""

#: ../../intro/tutorial01.txt:284
msgid "Creating models"
msgstr ""

#: ../../intro/tutorial01.txt:286
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start"
" doing work."
msgstr ""

#: ../../intro/tutorial01.txt:289
msgid ""
"Each application you write in Django consists of a Python package that "
"follows a certain convention. Django comes with a utility that automatically"
" generates the basic directory structure of an app, so you can focus on "
"writing code rather than creating directories."
msgstr ""

#: ../../intro/tutorial01.txt:294
msgid "Projects vs. apps"
msgstr ""

#: ../../intro/tutorial01.txt:296
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

#: ../../intro/tutorial01.txt:302
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can"
" be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

#: ../../intro/tutorial01.txt:306
msgid ""
"To create your app, make sure you're in the same directory as "
":file:`manage.py` and type this command:"
msgstr ""

#: ../../intro/tutorial01.txt:313
msgid ""
"That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

#: ../../intro/tutorial01.txt:324
msgid "This directory structure will house the poll application."
msgstr ""

#: ../../intro/tutorial01.txt:326
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

#: ../../intro/tutorial01.txt:329 ../../intro/tutorial01.txt:413
#: ../../intro/tutorial02.txt:9 ../../intro/tutorial03.txt:10
#: ../../intro/tutorial03.txt:484
msgid "Philosophy"
msgstr ""

#: ../../intro/tutorial01.txt:331
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the `DRY Principle "
"<https://docs.djangoproject.com/en/1.8/misc/design-philosophies/#dry>`_. The"
" goal is to define your data model in one place and automatically derive "
"things from it."
msgstr ""

#: ../../intro/tutorial01.txt:336
msgid ""
"This includes the migrations - unlike in Ruby On Rails, for example, "
"migrations are entirely derived from your models file, and are essentially "
"just a history that Django can roll through to update your database schema "
"to match your current models."
msgstr ""

#: ../../intro/tutorial01.txt:341
msgid ""
"In our simple poll app, we'll create two models: ``Question`` and "
"``Choice``. A ``Question`` has a question and a publication date. A "
"``Choice`` has two fields: the text of the choice and a vote tally. Each "
"``Choice`` is associated with a ``Question``."
msgstr ""

#: ../../intro/tutorial01.txt:346
msgid ""
"These concepts are represented by simple Python classes. Edit the "
":file:`polls/models.py` file so it looks like this:"
msgstr ""

#: ../../intro/tutorial01.txt:365
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class"
" variables, each of which represents a database field in the model."
msgstr ""

#: ../../intro/tutorial01.txt:369
msgid ""
"Each field is represented by an instance of a "
":class:`~django.db.models.Field` class -- e.g., "
":class:`~django.db.models.CharField` for character fields and "
":class:`~django.db.models.DateTimeField` for datetimes. This tells Django "
"what type of data each field holds."
msgstr ""

#: ../../intro/tutorial01.txt:374
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question_text`` or ``pub_date``) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

#: ../../intro/tutorial01.txt:378
msgid ""
"You can use an optional first positional argument to a "
":class:`~django.db.models.Field` to designate a human-readable name. That's "
"used in a couple of introspective parts of Django, and it doubles as "
"documentation. If this field isn't provided, Django will use the machine-"
"readable name. In this example, we've only defined a human-readable name for"
" ``Question.pub_date``. For all other fields in this model, the field's "
"machine-readable name will suffice as its human-readable name."
msgstr ""

#: ../../intro/tutorial01.txt:386
msgid ""
"Some :class:`~django.db.models.Field` classes have required arguments. "
":class:`~django.db.models.CharField`, for example, requires that you give it"
" a :attr:`~django.db.models.CharField.max_length`. That's used not only in "
"the database schema, but in validation, as we'll soon see."
msgstr ""

#: ../../intro/tutorial01.txt:391
msgid ""
"A :class:`~django.db.models.Field` can also have various optional arguments;"
" in this case, we've set the :attr:`~django.db.models.Field.default` value "
"of ``votes`` to 0."
msgstr ""

#: ../../intro/tutorial01.txt:395
msgid ""
"Finally, note a relationship is defined, using "
":class:`~django.db.models.ForeignKey`. That tells Django each ``Choice`` is "
"related to a single ``Question``. Django supports all the common database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

#: ../../intro/tutorial01.txt:403
msgid "Activating models"
msgstr ""

#: ../../intro/tutorial01.txt:405
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

#: ../../intro/tutorial01.txt:408
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

#: ../../intro/tutorial01.txt:409
msgid ""
"Create a Python database-access API for accessing ``Question`` and "
"``Choice`` objects."
msgstr ""

#: ../../intro/tutorial01.txt:411
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

#: ../../intro/tutorial01.txt:415
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

#: ../../intro/tutorial01.txt:419
msgid ""
"Edit the :file:`mysite/settings.py` file again, and change the "
":setting:`INSTALLED_APPS` setting to include the string ``'polls'``. So "
"it'll look like this:"
msgstr ""

#: ../../intro/tutorial01.txt:436
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

#: ../../intro/tutorial01.txt:442
msgid "You should see something similar to the following:"
msgstr ""

#: ../../intro/tutorial01.txt:452
msgid ""
"By running ``makemigrations``, you're telling Django that you've made some "
"changes to your models (in this case, you've made new ones) and that you'd "
"like the changes to be stored as a *migration*."
msgstr ""

#: ../../intro/tutorial01.txt:456
msgid ""
"Migrations are how Django stores changes to your models (and thus your "
"database schema) - they're just files on disk. You can read the migration "
"for your new model if you like; it's the file "
"``polls/migrations/0001_initial.py``. Don't worry, you're not expected to "
"read them every time Django makes one, but they're designed to be human-"
"editable in case you want to manually tweak how Django changes things."
msgstr ""

#: ../../intro/tutorial01.txt:463
msgid ""
"There's a command that will run the migrations for you and manage your "
"database schema automatically - that's called :djadmin:`migrate`, and we'll "
"come to it in a moment - but first, let's see what SQL that migration would "
"run. The :djadmin:`sqlmigrate` command takes migration names and returns "
"their SQL:"
msgstr ""

#: ../../intro/tutorial01.txt:472
msgid ""
"You should see something similar to the following (we've reformatted it for "
"readability):"
msgstr ""

#: ../../intro/tutorial01.txt:499
msgid "Note the following:"
msgstr ""

#: ../../intro/tutorial01.txt:501
msgid ""
"The exact output will vary depending on the database you are using. The "
"example above is generated for PostgreSQL."
msgstr ""

#: ../../intro/tutorial01.txt:504
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``question`` and "
"``choice``. (You can override this behavior.)"
msgstr ""

#: ../../intro/tutorial01.txt:508
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

#: ../../intro/tutorial01.txt:510
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

#: ../../intro/tutorial01.txt:513
msgid ""
"The foreign key relationship is made explicit by a ``FOREIGN KEY`` "
"constraint. Don't worry about the ``DEFERRABLE`` parts; that's just telling "
"PostgreSQL to not enforce the foreign key until the end of the transaction."
msgstr ""

#: ../../intro/tutorial01.txt:517
msgid ""
"It's tailored to the database you're using, so database-specific field types"
" such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key autoincrement`` (SQLite) are handled for you automatically. Same"
" goes for quoting of field names -- e.g., using double quotes or single "
"quotes."
msgstr ""

#: ../../intro/tutorial01.txt:523
msgid ""
"The :djadmin:`sqlmigrate` command doesn't actually run the migration on your"
" database - it just prints it to the screen so that you can see what SQL "
"Django thinks is required. It's useful for checking what Django is going to "
"do or if you have database administrators who require SQL scripts for "
"changes."
msgstr ""

#: ../../intro/tutorial01.txt:529
msgid ""
"If you're interested, you can also run :djadmin:`python manage.py check "
"<check>`; this checks for any problems in your project without making "
"migrations or touching the database."
msgstr ""

#: ../../intro/tutorial01.txt:533
msgid ""
"Now, run :djadmin:`migrate` again to create those model tables in your "
"database:"
msgstr ""

#: ../../intro/tutorial01.txt:549
msgid ""
"The :djadmin:`migrate` command takes all the migrations that haven't been "
"applied (Django tracks which ones are applied using a special table in your "
"database called ``django_migrations``) and runs them against your database -"
" essentially, synchronizing the changes you made to your models with the "
"schema in the database."
msgstr ""

#: ../../intro/tutorial01.txt:555
msgid ""
"Migrations are very powerful and let you change your models over time, as "
"you develop your project, without the need to delete your database or tables"
" and make new ones - it specializes in upgrading your database live, without"
" losing data. We'll cover them in more depth in a later part of the "
"tutorial, but for now, remember the three-step guide to making model "
"changes:"
msgstr ""

#: ../../intro/tutorial01.txt:561
msgid "Change your models (in ``models.py``)."
msgstr ""

#: ../../intro/tutorial01.txt:562
msgid ""
"Run :djadmin:`python manage.py makemigrations <makemigrations>` to create "
"migrations for those changes"
msgstr ""

#: ../../intro/tutorial01.txt:564
msgid ""
"Run :djadmin:`python manage.py migrate <migrate>` to apply those changes to "
"the database."
msgstr ""

#: ../../intro/tutorial01.txt:567
msgid ""
"The reason there's separate commands to make and apply migrations is because"
" you'll commit migrations to your version control system and ship them with "
"your app; they not only make your development easier, they're also useable "
"by other developers and in production."
msgstr ""

#: ../../intro/tutorial01.txt:572
msgid ""
"Read the `django-admin documentation "
"<https://docs.djangoproject.com/en/1.8/ref/django-admin>`_ for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

#: ../../intro/tutorial01.txt:576
msgid "Playing with the API"
msgstr ""

#: ../../intro/tutorial01.txt:578
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

#: ../../intro/tutorial01.txt:585
msgid ""
"We're using this instead of simply typing \"python\", because "
":file:`manage.py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"which gives Django the Python import path to your :file:`mysite/settings.py`"
" file."
msgstr ""

#: ../../intro/tutorial01.txt:589
msgid "Bypassing manage.py"
msgstr ""

#: ../../intro/tutorial01.txt:591
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
":envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"``mysite.settings``, start a plain Python shell, and set up Django:"
msgstr ""

#: ../../intro/tutorial01.txt:600
msgid ""
"If this raises an :exc:`AttributeError`, you're probably using a version of "
"Django that doesn't match this tutorial version. You'll want to either "
"switch to the older tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial01.txt:604
msgid ""
"You must run ``python`` from the same directory :file:`manage.py` is in, or "
"ensure that directory is on the Python path, so that ``import mysite`` "
"works."
msgstr ""

#: ../../intro/tutorial01.txt:608
msgid ""
"For more information on all of this, see the `django-admin documentation "
"<https://docs.djangoproject.com/en/1.8/ref/django-admin>`_."
msgstr ""

#: ../../intro/tutorial01.txt:611
msgid ""
"Once you're in the shell, explore the `database API "
"<https://docs.djangoproject.com/en/1.8/topics/db/queries>`_::"
msgstr ""

#: ../../intro/tutorial01.txt:651
msgid ""
"Wait a minute. ``<Question: Question object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the ``Question`` "
"model (in the ``polls/models.py`` file) and adding a "
":meth:`~django.db.models.Model.__str__` method to both ``Question`` and "
"``Choice``:"
msgstr ""

#: ../../intro/tutorial01.txt:672
msgid ""
"It's important to add :meth:`~django.db.models.Model.__str__` methods to "
"your models, not only for your own convenience when dealing with the "
"interactive prompt, but also because objects' representations are used "
"throughout Django's automatically-generated admin."
msgstr ""

#: ../../intro/tutorial01.txt:677
msgid "``__str__`` or ``__unicode__``?"
msgstr ""

#: ../../intro/tutorial01.txt:679
msgid ""
"On Python 3, it's easy, just use :meth:`~django.db.models.Model.__str__`."
msgstr ""

#: ../../intro/tutorial01.txt:682
msgid ""
"On Python 2, you should define :meth:`~django.db.models.Model.__unicode__` "
"methods returning ``unicode`` values instead. Django models have a default "
":meth:`~django.db.models.Model.__str__` method that calls "
":meth:`~django.db.models.Model.__unicode__` and converts the result to a "
"UTF-8 bytestring. This means that ``unicode(p)`` will return a Unicode "
"string, and ``str(p)`` will return a bytestring, with characters encoded as "
"UTF-8. Python does the opposite: ``object`` has a ``__unicode__`` method "
"that calls ``__str__`` and interprets the result as an ASCII bytestring. "
"This difference can create confusion."
msgstr ""

#: ../../intro/tutorial01.txt:692
msgid "If all of this is gibberish to you, just use Python 3."
msgstr ""

#: ../../intro/tutorial01.txt:694
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration:"
msgstr ""

#: ../../intro/tutorial01.txt:711
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the `time zone support docs "
"<https://docs.djangoproject.com/en/1.8/topics/i18n/timezones>`_."
msgstr ""

#: ../../intro/tutorial01.txt:717
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

#: ../../intro/tutorial01.txt:796
msgid ""
"For more information on model relations, see `Accessing related objects "
"<https://docs.djangoproject.com/en/1.8/ref/models/relations>`_. For more on "
"how to use double underscores to perform field lookups via the API, see "
"`Field lookups <https://docs.djangoproject.com/en/1.8/topics/db/queries"
"/#field-lookups-intro>`_. For full details on the database API, see our "
"`Database API reference "
"<https://docs.djangoproject.com/en/1.8/topics/db/queries>`_."
msgstr ""

#: ../../intro/tutorial01.txt:800
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial "
"</intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site "
"managers."
msgstr ""

#: ../../intro/tutorial02.txt:25
msgid "Creating an admin user"
msgstr ""

#: ../../intro/tutorial02.txt:27
msgid ""
"First we'll need to create a user who can login to the admin site. Run the "
"following command:"
msgstr ""

#: ../../intro/tutorial02.txt:34
msgid "Enter your desired username and press enter."
msgstr ""

#: ../../intro/tutorial02.txt:40
msgid "You will then be prompted for your desired email address:"
msgstr ""

#: ../../intro/tutorial02.txt:46
msgid ""
"The final step is to enter your password. You will be asked to enter your "
"password twice, the second time as a confirmation of the first."
msgstr ""

#: ../../intro/tutorial02.txt:56
msgid "Start the development server"
msgstr ""

#: ../../intro/tutorial02.txt:58
msgid ""
"The Django admin site is activated by default. Let's start the development "
"server and explore it."
msgstr ""

#: ../../intro/tutorial02.txt:61
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

#: ../../intro/tutorial02.txt:67
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

#: ../../intro/tutorial02.txt:73
msgid ""
"Since `translation "
"<https://docs.djangoproject.com/en/1.8/topics/i18n/translation>`_ is turned "
"on by default, the login screen may be displayed in your own language, "
"depending on your browser's settings and on whether Django has a translation"
" for this language."
msgstr ""

#: ../../intro/tutorial02.txt:77 ../../intro/tutorial03.txt:118
msgid "Doesn't match what you see?"
msgstr ""

#: ../../intro/tutorial02.txt:79
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

#: ../../intro/tutorial02.txt:86
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

#: ../../intro/tutorial02.txt:91
msgid "Enter the admin site"
msgstr ""

#: ../../intro/tutorial02.txt:93
msgid ""
"Now, try logging in with the superuser account you created in the previous "
"step. You should see the Django admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:99
msgid ""
"You should see a few types of editable content: groups and users. They are "
"provided by :mod:`django.contrib.auth`, the authentication framework shipped"
" by Django."
msgstr ""

#: ../../intro/tutorial02.txt:104
msgid "Make the poll app modifiable in the admin"
msgstr ""

#: ../../intro/tutorial02.txt:106
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:108
msgid ""
"Just one thing to do: we need to tell the admin that ``Question`` objects "
"have an admin interface. To do this, open the :file:`polls/admin.py` file, "
"and edit it to look like this:"
msgstr ""

#: ../../intro/tutorial02.txt:122
msgid "Explore the free admin functionality"
msgstr ""

#: ../../intro/tutorial02.txt:124
msgid ""
"Now that we've registered ``Question``, Django knows that it should be "
"displayed on the admin index page:"
msgstr ""

#: ../../intro/tutorial02.txt:130
msgid ""
"Click \"Questions\". Now you're at the \"change list\" page for questions. "
"This page displays all the questions in the database and lets you choose one"
" to change it. There's the \"What's up?\" question we created in the first "
"tutorial:"
msgstr ""

#: ../../intro/tutorial02.txt:137
msgid "Click the \"What's up?\" question to edit it:"
msgstr ""

#: ../../intro/tutorial02.txt:142
msgid "Things to note here:"
msgstr ""

#: ../../intro/tutorial02.txt:144
msgid "The form is automatically generated from the ``Question`` model."
msgstr ""

#: ../../intro/tutorial02.txt:146
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, "
":class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

#: ../../intro/tutorial02.txt:151
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

#: ../../intro/tutorial02.txt:155
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

#: ../../intro/tutorial02.txt:157
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

#: ../../intro/tutorial02.txt:160
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

#: ../../intro/tutorial02.txt:163
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

#: ../../intro/tutorial02.txt:166
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

#: ../../intro/tutorial02.txt:168
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the question in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

#: ../../intro/tutorial02.txt:173
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

#: ../../intro/tutorial02.txt:182
msgid "Customize the admin form"
msgstr ""

#: ../../intro/tutorial02.txt:184
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the ``Question`` model with ``admin.site.register(Question)``, "
"Django was able to construct a default form representation. Often, you'll "
"want to customize how the admin form looks and works. You'll do this by "
"telling Django the options you want when you register the object."
msgstr ""

#: ../../intro/tutorial02.txt:190
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace"
" the ``admin.site.register(Question)`` line with:"
msgstr ""

#: ../../intro/tutorial02.txt:206
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

#: ../../intro/tutorial02.txt:210
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

#: ../../intro/tutorial02.txt:216
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

#: ../../intro/tutorial02.txt:219
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets:"
msgstr ""

#: ../../intro/tutorial02.txt:238
msgid ""
"The first element of each tuple in "
":attr:`~django.contrib.admin.ModelAdmin.fieldsets` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

#: ../../intro/tutorial02.txt:245
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a "
"``\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used:"
msgstr ""

#: ../../intro/tutorial02.txt:270
msgid "Adding related objects"
msgstr ""

#: ../../intro/tutorial02.txt:272
msgid ""
"OK, we have our Question admin page. But a ``Question`` has multiple "
"``Choices``, and the admin page doesn't display choices."
msgstr ""

#: ../../intro/tutorial02.txt:275
msgid "Yet."
msgstr ""

#: ../../intro/tutorial02.txt:277
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Question``. That's easy:"
msgstr ""

#: ../../intro/tutorial02.txt:289
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add "
"choice\" form looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:295
msgid ""
"In that form, the \"Question\" field is a select box containing every "
"question in the database. Django knows that a "
":class:`~django.db.models.ForeignKey` should be represented in the admin as "
"a ``<select>`` box. In our case, only one question exists at this point."
msgstr ""

#: ../../intro/tutorial02.txt:300
msgid ""
"Also note the \"Add Another\" link next to \"Question.\" Every object with a"
" ``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add question\" form. "
"If you add a question in that window and click \"Save,\" Django will save "
"the question to the database and dynamically add it as the selected choice "
"on the \"Add choice\" form you're looking at."
msgstr ""

#: ../../intro/tutorial02.txt:307
msgid ""
"But, really, this is an inefficient way of adding ``Choice`` objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you"
" create the ``Question`` object. Let's make that happen."
msgstr ""

#: ../../intro/tutorial02.txt:311
msgid ""
"Remove the ``register()`` call for the ``Choice`` model. Then, edit the "
"``Question`` registration code to read:"
msgstr ""

#: ../../intro/tutorial02.txt:336
msgid ""
"This tells Django: \"``Choice`` objects are edited on the ``Question`` admin"
" page. By default, provide enough fields for 3 choices.\""
msgstr ""

#: ../../intro/tutorial02.txt:339
msgid "Load the \"Add question\" page to see how that looks:"
msgstr ""

#: ../../intro/tutorial02.txt:344
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page"
" for an already-created object, you get another three extra slots."
msgstr ""

#: ../../intro/tutorial02.txt:348
msgid ""
"At the end of the three current slots you will find an \"Add another "
"Choice\" link.  If you click on it, a new slot will be added. If you want to"
" remove the added slot, you can click on the X to the top right of the added"
" slot. Note that you can't remove the original three slots. This image shows"
" an added slot:"
msgstr ""

#: ../../intro/tutorial02.txt:356
msgid ""
"One small problem, though. It takes a lot of screen space to display all the"
" fields for entering related ``Choice`` objects. For that reason, Django "
"offers a tabular way of displaying inline related objects; you just need to "
"change the ``ChoiceInline`` declaration to read:"
msgstr ""

#: ../../intro/tutorial02.txt:367
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

#: ../../intro/tutorial02.txt:373
msgid ""
"Note that there is an extra \"Delete?\" column that allows removing rows "
"added using the \"Add Another Choice\" button and rows that have already "
"been saved."
msgstr ""

#: ../../intro/tutorial02.txt:377
msgid "Customize the admin change list"
msgstr ""

#: ../../intro/tutorial02.txt:379
msgid ""
"Now that the Question admin page is looking good, let's make some tweaks to "
"the \"change list\" page -- the one that displays all the questions in the "
"system."
msgstr ""

#: ../../intro/tutorial02.txt:382
msgid "Here's what it looks like at this point:"
msgstr ""

#: ../../intro/tutorial02.txt:387
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd"
" be more helpful if we could display individual fields. To do that, use the "
":attr:`~django.contrib.admin.ModelAdmin.list_display` admin option, which is"
" a tuple of field names to display, as columns, on the change list page for "
"the object:"
msgstr ""

#: ../../intro/tutorial02.txt:400
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1:"
msgstr ""

#: ../../intro/tutorial02.txt:410
msgid "Now the question change list page looks like this:"
msgstr ""

#: ../../intro/tutorial02.txt:415
msgid ""
"You can click on the column headers to sort by those values -- except in the"
" case of the ``was_published_recently`` header, because sorting by the "
"output of an arbitrary method is not supported. Also note that the column "
"header for ``was_published_recently`` is, by default, the name of the method"
" (with underscores replaced with spaces), and that each line contains the "
"string representation of the output."
msgstr ""

#: ../../intro/tutorial02.txt:422
msgid ""
"You can improve that by giving that method (in :file:`polls/models.py`) a "
"few attributes, as follows:"
msgstr ""

#: ../../intro/tutorial02.txt:436
msgid ""
"For more information on these method properties, see "
":attr:`~django.contrib.admin.ModelAdmin.list_display`."
msgstr ""

#: ../../intro/tutorial02.txt:439
msgid ""
"Edit your :file:`polls/admin.py` file again and add an improvement to the "
"``Question`` change list page: filters using the "
":attr:`~django.contrib.admin.ModelAdmin.list_filter`. Add the following line"
" to ``QuestionAdmin``::"
msgstr ""

#: ../../intro/tutorial02.txt:446
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

#: ../../intro/tutorial02.txt:452
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, "
"Django knows to give appropriate filter options: \"Any date,\" \"Today,\" "
"\"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

#: ../../intro/tutorial02.txt:457
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

#: ../../intro/tutorial02.txt:461
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question_text`` field. You can use as"
" many fields as you'd like -- although because it uses a ``LIKE`` query "
"behind the scenes, limiting the number of search fields to a reasonable "
"number will make it easier for your database to do the search."
msgstr ""

#: ../../intro/tutorial02.txt:467
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. :attr:`Change list pagination "
"<django.contrib.admin.ModelAdmin.list_per_page>`, :attr:`search boxes "
"<django.contrib.admin.ModelAdmin.search_fields>`, :attr:`filters "
"<django.contrib.admin.ModelAdmin.list_filter>`, :attr:`date-hierarchies "
"<django.contrib.admin.ModelAdmin.date_hierarchy>`, and :attr:`column-header-"
"ordering <django.contrib.admin.ModelAdmin.list_display>` all work together "
"like you think they should."
msgstr ""

#: ../../intro/tutorial02.txt:477
msgid "Customize the admin look and feel"
msgstr ""

#: ../../intro/tutorial02.txt:479
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

#: ../../intro/tutorial02.txt:482
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

#: ../../intro/tutorial02.txt:489
msgid "Customizing your *project's* templates"
msgstr ""

#: ../../intro/tutorial02.txt:491
msgid ""
"Create a ``templates`` directory in your project directory (the one that "
"contains ``manage.py``). Templates can live anywhere on your filesystem that"
" Django can access. (Django runs as whatever user your server runs.) "
"However, keeping your templates within the project is a good convention to "
"follow."
msgstr ""

#: ../../intro/tutorial02.txt:496
msgid ""
"Open your settings file (:file:`mysite/settings.py`, remember) and add a "
":setting:`DIRS <TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting:"
msgstr ""

#: ../../intro/tutorial02.txt:518
msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` is a list of filesystem directories to "
"check when loading Django templates; it's a search path."
msgstr ""

#: ../../intro/tutorial02.txt:521
msgid ""
"Now create a directory called ``admin`` inside ``templates``, and copy the "
"template ``admin/base_site.html`` from within the default Django admin "
"template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into that directory."
msgstr ""

#: ../../intro/tutorial02.txt:526
msgid "Where are the Django source files?"
msgstr ""

#: ../../intro/tutorial02.txt:528
msgid ""
"If you have difficulty finding where the Django source files are located on "
"your system, run the following command:"
msgstr ""

#: ../../intro/tutorial02.txt:539
msgid ""
"Then, just edit the file and replace ``{{ site_header|default:_('Django "
"administration') }}`` (including the curly braces) with your own site's name"
" as you see fit. You should end up with a section of code like:"
msgstr ""

#: ../../intro/tutorial02.txt:550
msgid ""
"We use this approach to teach you how to override templates. In an actual "
"project, you would probably use the "
":attr:`django.contrib.admin.AdminSite.site_header` attribute to more easily "
"make this particular customization."
msgstr ""

#: ../../intro/tutorial02.txt:555
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and "
"``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:562
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

#: ../../intro/tutorial02.txt:568
msgid "Customizing your *application's* templates"
msgstr ""

#: ../../intro/tutorial02.txt:570
msgid ""
"Astute readers will ask: But if :setting:`DIRS <TEMPLATES-DIRS>` was empty "
"by default, how was Django finding the default admin templates? The answer "
"is that, since :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is set to ``True``, "
"Django automatically looks for a ``templates/`` subdirectory within each "
"application package, for use as a fallback (don't forget that "
"``django.contrib.admin`` is an application)."
msgstr ""

#: ../../intro/tutorial02.txt:577
msgid ""
"Our poll application is not very complex and doesn't need custom admin "
"templates. But if it grew more sophisticated and required modification of "
"Django's standard admin templates for some of its functionality, it would be"
" more sensible to modify the *application's* templates, rather than those in"
" the *project*. That way, you could include the polls application in any new"
" project and be assured that it would find the custom templates it needed."
msgstr ""

#: ../../intro/tutorial02.txt:584
msgid ""
"See the `template loading documentation "
"<https://docs.djangoproject.com/en/1.8/topics/templates/#template-loading>`_"
" for more information about how Django finds its templates."
msgstr ""

#: ../../intro/tutorial02.txt:588
msgid "Customize the admin index page"
msgstr ""

#: ../../intro/tutorial02.txt:590
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

#: ../../intro/tutorial02.txt:593
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

#: ../../intro/tutorial02.txt:598
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default"
" directory to your custom template directory.) Edit the file, and you'll see"
" it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

#: ../../intro/tutorial02.txt:607
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr ""

#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"blog application, you might have the following views:"
msgstr ""

#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

#: ../../intro/tutorial03.txt:32
msgid "Question \"index\" page -- displays the latest few questions."
msgstr ""

#: ../../intro/tutorial03.txt:34
msgid ""
"Question \"detail\" page -- displays a question text, with no results but "
"with a form to vote."
msgstr ""

#: ../../intro/tutorial03.txt:37
msgid "Question \"results\" page -- displays results for a particular question."
msgstr ""

#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular "
"question."
msgstr ""

#: ../../intro/tutorial03.txt:42
msgid ""
"In Django, web pages and other content are delivered by views. Each view is "
"represented by a simple Python function (or method, in the case of class-"
"based views). Django will choose a view by examining the URL that's "
"requested (to be precise, the part of the URL after the domain name)."
msgstr ""

#: ../../intro/tutorial03.txt:47
msgid ""
"Now in your time on the web you may have come across such beauties as "
"\"ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B\"."
" You will be pleased to know that Django allows us much more elegant *URL "
"patterns* than that."
msgstr ""

#: ../../intro/tutorial03.txt:52
msgid ""
"A URL pattern is simply the general form of a URL - for example: "
"``/newsarchive/<year>/<month>/``."
msgstr ""

#: ../../intro/tutorial03.txt:55
msgid ""
"To get from a URL to a view, Django uses what are known as 'URLconfs'. A "
"URLconf maps URL patterns (described as regular expressions) to views."
msgstr ""

#: ../../intro/tutorial03.txt:58
msgid ""
"This tutorial provides basic instruction in the use of URLconfs, and you can"
" refer to :mod:`django.core.urlresolvers` for more information."
msgstr ""

#: ../../intro/tutorial03.txt:62
msgid "Write your first view"
msgstr ""

#: ../../intro/tutorial03.txt:64
msgid ""
"Let's write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it:"
msgstr ""

#: ../../intro/tutorial03.txt:76
msgid ""
"This is the simplest view possible in Django. To call the view, we need to "
"map it to a URL - and for this we need a URLconf."
msgstr ""

#: ../../intro/tutorial03.txt:79
msgid ""
"To create a URLconf in the polls directory, create a file called "
"``urls.py``. Your app directory should now look like::"
msgstr ""

#: ../../intro/tutorial03.txt:90
msgid "In the ``polls/urls.py`` file include the following code:"
msgstr ""

#: ../../intro/tutorial03.txt:103
msgid ""
"The next step is to point the root URLconf at the ``polls.urls`` module. In "
"``mysite/urls.py`` insert an :func:`~django.conf.urls.include`, leaving you "
"with:"
msgstr ""

#: ../../intro/tutorial03.txt:120
msgid ""
"If you're seeing ``admin.autodiscover()`` before the definition of "
"``urlpatterns``, you're probably using a version of Django that doesn't "
"match this tutorial version.  You'll want to either switch to the older "
"tutorial or the newer Django version."
msgstr ""

#: ../../intro/tutorial03.txt:125
msgid ""
"You have now wired an ``index`` view into the URLconf. Go to "
"http://localhost:8000/polls/ in your browser, and you should see the text "
"\"*Hello, world. You're at the polls index.*\", which you defined in the "
"``index`` view."
msgstr ""

#: ../../intro/tutorial03.txt:130
msgid ""
"The :func:`~django.conf.urls.url` function is passed four arguments, two "
"required: ``regex`` and ``view``, and two optional: ``kwargs``, and "
"``name``. At this point, it's worth reviewing what these arguments are for."
msgstr ""

#: ../../intro/tutorial03.txt:135
msgid ":func:`~django.conf.urls.url` argument: regex"
msgstr ""

#: ../../intro/tutorial03.txt:137
msgid ""
"The term \"regex\" is a commonly used short form meaning \"regular "
"expression\", which is a syntax for matching patterns in strings, or in this"
" case, url patterns. Django starts at the first regular expression and makes"
" its way down the list,  comparing the requested URL against each regular "
"expression until it finds one that matches."
msgstr ""

#: ../../intro/tutorial03.txt:143
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to "
"``http://www.example.com/myapp/``, the URLconf will look for ``myapp/``. In "
"a request to ``http://www.example.com/myapp/?page=3``, the URLconf will also"
" look for ``myapp/``."
msgstr ""

#: ../../intro/tutorial03.txt:149
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic. In practice, however, "
"you don't need to be an expert on regular expressions, as you really only "
"need to know how to capture simple patterns. In fact, complex regexes can "
"have poor lookup performance, so you probably shouldn't rely on the full "
"power of regexes."
msgstr ""

#: ../../intro/tutorial03.txt:156
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast (as long as the "
"lookups aren't too complex as noted above)."
msgstr ""

#: ../../intro/tutorial03.txt:163
msgid ":func:`~django.conf.urls.url` argument: view"
msgstr ""

#: ../../intro/tutorial03.txt:165
msgid ""
"When Django finds a regular expression match, Django calls the specified "
"view function, with an :class:`~django.http.HttpRequest` object as the first"
" argument and any “captured” values from the regular expression as other "
"arguments. If the regex uses simple captures, values are passed as "
"positional arguments; if it uses named captures, values are passed as "
"keyword arguments. We'll give an example of this in a bit."
msgstr ""

#: ../../intro/tutorial03.txt:173
msgid ":func:`~django.conf.urls.url` argument: kwargs"
msgstr ""

#: ../../intro/tutorial03.txt:175
msgid ""
"Arbitrary keyword arguments can be passed in a dictionary to the target "
"view. We aren't going to use this feature of Django in the tutorial."
msgstr ""

#: ../../intro/tutorial03.txt:179
msgid ":func:`~django.conf.urls.url` argument: name"
msgstr ""

#: ../../intro/tutorial03.txt:181
msgid ""
"Naming your URL lets you refer to it unambiguously from elsewhere in Django "
"especially templates. This powerful feature allows you to make  global "
"changes to the url patterns of your project while only touching a single "
"file."
msgstr ""

#: ../../intro/tutorial03.txt:186
msgid "Writing more views"
msgstr ""

#: ../../intro/tutorial03.txt:188
msgid ""
"Now let's add a few more views to ``polls/views.py``. These views are "
"slightly different, because they take an argument:"
msgstr ""

#: ../../intro/tutorial03.txt:204
msgid ""
"Wire these new views into the ``polls.urls`` module by adding the following "
":func:`~django.conf.urls.url` calls:"
msgstr ""

#: ../../intro/tutorial03.txt:225
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the ``detail()`` "
"method and display whatever ID you provide in the URL. Try "
"\"/polls/34/results/\" and \"/polls/34/vote/\" too -- these will display the"
" placeholder results and voting pages."
msgstr ""

#: ../../intro/tutorial03.txt:230
msgid ""
"When somebody requests a page from your Web site -- say, \"/polls/34/\", "
"Django will load the ``mysite.urls`` Python module because it's pointed to "
"by the :setting:`ROOT_URLCONF` setting. It finds the variable named "
"``urlpatterns`` and traverses the regular expressions in order. The "
":func:`~django.conf.urls.include` functions we are using simply reference "
"other URLconfs. Note that the regular expressions for the "
":func:`~django.conf.urls.include` functions don't have a ``$`` (end-of-"
"string match character) but rather a trailing slash. Whenever Django "
"encounters :func:`~django.conf.urls.include`, it chops off whatever part of "
"the URL matched up to that point and sends the remaining string to the "
"included URLconf for further processing."
msgstr ""

#: ../../intro/tutorial03.txt:242
msgid ""
"The idea behind :func:`~django.conf.urls.include` is to make it easy to "
"plug-and-play URLs. Since polls are in their own URLconf "
"(``polls/urls.py``), they can be placed under \"/polls/\", or under "
"\"/fun_polls/\", or under \"/content/polls/\", or any other path root, and "
"the app will still work."
msgstr ""

#: ../../intro/tutorial03.txt:248
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

#: ../../intro/tutorial03.txt:250
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

#: ../../intro/tutorial03.txt:252
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing which matches ``r'^(?P<question_id>[0-9]+)/$'`` resulting in a "
"call to the ``detail()`` view like so::"
msgstr ""

#: ../../intro/tutorial03.txt:259
msgid ""
"The ``question_id='34'`` part comes from ``(?P<question_id>[0-9]+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; ``?P<question_id>`` "
"defines the name that will be used to identify the matched pattern; and "
"``[0-9]+`` is a regular expression to match a sequence of digits (i.e., a "
"number)."
msgstr ""

#: ../../intro/tutorial03.txt:265
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.html`` -- unless you want to, in which case you can do something like "
"this::"
msgstr ""

#: ../../intro/tutorial03.txt:272
msgid "But, don't do that. It's silly."
msgstr ""

#: ../../intro/tutorial03.txt:275
msgid "Write views that actually do something"
msgstr ""

#: ../../intro/tutorial03.txt:277
msgid ""
"Each view is responsible for doing one of two things: returning an "
":class:`~django.http.HttpResponse` object containing the content for the "
"requested page, or raising an exception such as :exc:`~django.http.Http404`."
" The rest is up to you."
msgstr ""

#: ../../intro/tutorial03.txt:282
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

#: ../../intro/tutorial03.txt:287
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an "
"exception."
msgstr ""

#: ../../intro/tutorial03.txt:289
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at a new "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date:"
msgstr ""

#: ../../intro/tutorial03.txt:309
msgid ""
"There's a problem here, though: the page's design is hard-coded in the view."
" If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python by creating a template that the view can use."
msgstr ""

#: ../../intro/tutorial03.txt:314
msgid ""
"First, create a directory called ``templates`` in your ``polls`` directory. "
"Django will look for templates in there."
msgstr ""

#: ../../intro/tutorial03.txt:317
msgid ""
"Your project's :setting:`TEMPLATES` setting describes how Django will load "
"and render templates. The default settings file configures a "
"``DjangoTemplates`` backend whose :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` "
"option is set to ``True``. By convention ``DjangoTemplates`` looks for a "
"\"templates\" subdirectory in each of the :setting:`INSTALLED_APPS`. This is"
" how Django knows to find the polls templates even though we didn't modify "
"the :setting:`DIRS <TEMPLATES-DIRS>` option, as we did in :ref:`Tutorial 2 "
"<ref-customizing-your-projects-templates>`."
msgstr ""

#: ../../intro/tutorial03.txt:325
msgid "Organizing templates"
msgstr ""

#: ../../intro/tutorial03.txt:327
msgid ""
"We *could* have all our templates together, in one big templates directory, "
"and it would work perfectly well. However, this template belongs to the "
"polls application, so unlike the admin template we created in the previous "
"tutorial, we'll put this one in the application's template directory "
"(``polls/templates``) rather than the project's (``templates``). We'll "
"discuss in more detail in the :doc:`reusable apps tutorial </intro/reusable-"
"apps>` *why* we do this."
msgstr ""

#: ../../intro/tutorial03.txt:334
msgid ""
"Within the ``templates`` directory you have just created, create another "
"directory called ``polls``, and within that create a file called "
"``index.html``. In other words, your template should be at "
"``polls/templates/polls/index.html``. Because of how the ``app_directories``"
" template loader works as described above, you can refer to this template "
"within Django simply as ``polls/index.html``."
msgstr ""

#: ../../intro/tutorial03.txt:341
msgid "Template namespacing"
msgstr ""

#: ../../intro/tutorial03.txt:343
msgid ""
"Now we *might* be able to get away with putting our templates directly in "
"``polls/templates`` (rather than creating another ``polls`` subdirectory), "
"but it would actually be a bad idea. Django will choose the first template "
"it finds whose name matches, and if you had a template with the same name in"
" a *different* application, Django would be unable to distinguish between "
"them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"templates inside *another* directory named for the application itself."
msgstr ""

#: ../../intro/tutorial03.txt:352
msgid "Put the following code in that template:"
msgstr ""

#: ../../intro/tutorial03.txt:367
msgid ""
"Now let's update our ``index`` view in ``polls/views.py`` to use the "
"template:"
msgstr ""

#: ../../intro/tutorial03.txt:386
msgid ""
"That code loads the template called  ``polls/index.html`` and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

#: ../../intro/tutorial03.txt:390
msgid ""
"Load the page by pointing your browser at \"/polls/\", and you should see a "
"bulleted-list containing the \"What's up\" question from Tutorial 1. The "
"link points to the question's detail page."
msgstr ""

#: ../../intro/tutorial03.txt:395
msgid "A shortcut: :func:`~django.shortcuts.render`"
msgstr ""

#: ../../intro/tutorial03.txt:397
msgid ""
"It's a very common idiom to load a template, fill a context and return an "
":class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten:"
msgstr ""

#: ../../intro/tutorial03.txt:415
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, "
":class:`~django.template.RequestContext` and "
":class:`~django.http.HttpResponse` (you'll want to keep ``HttpResponse`` if "
"you still have the stub methods for ``detail``, ``results``, and ``vote``)."
msgstr ""

#: ../../intro/tutorial03.txt:420
msgid ""
"The :func:`~django.shortcuts.render` function takes the request object as "
"its first argument, a template name as its second argument and a dictionary "
"as its optional third argument. It returns an "
":class:`~django.http.HttpResponse` object of the given template rendered "
"with the given context."
msgstr ""

#: ../../intro/tutorial03.txt:426
msgid "Raising a 404 error"
msgstr ""

#: ../../intro/tutorial03.txt:428
msgid ""
"Now, let's tackle the question detail view -- the page that displays the "
"question text for a given poll. Here's the view:"
msgstr ""

#: ../../intro/tutorial03.txt:446
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a question with the requested ID doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:449
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, a "
"file containing just:"
msgstr ""

#: ../../intro/tutorial03.txt:458
msgid "will get you started for now."
msgstr ""

#: ../../intro/tutorial03.txt:461
msgid "A shortcut: :func:`~django.shortcuts.get_object_or_404`"
msgstr ""

#: ../../intro/tutorial03.txt:463
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get`"
" and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten:"
msgstr ""

#: ../../intro/tutorial03.txt:478
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the :meth:`~django.db.models.query.QuerySet.get` function"
" of the model's manager. It raises :exc:`~django.http.Http404` if the object"
" doesn't exist."
msgstr ""

#: ../../intro/tutorial03.txt:486
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the "
":exc:`~django.core.exceptions.ObjectDoesNotExist` exceptions at a higher "
"level, or having the model API raise :exc:`~django.http.Http404` instead of "
":exc:`~django.core.exceptions.ObjectDoesNotExist`?"
msgstr ""

#: ../../intro/tutorial03.txt:492
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling. Some "
"controlled coupling is introduced in the :mod:`django.shortcuts` module."
msgstr ""

#: ../../intro/tutorial03.txt:496
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using "
":meth:`~django.db.models.query.QuerySet.filter` instead of "
":meth:`~django.db.models.query.QuerySet.get`. It raises "
":exc:`~django.http.Http404` if the list is empty."
msgstr ""

#: ../../intro/tutorial03.txt:503
msgid "Use the template system"
msgstr ""

#: ../../intro/tutorial03.txt:505
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``question``, here's what the ``polls/detail.html`` template might "
"look like:"
msgstr ""

#: ../../intro/tutorial03.txt:519
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In"
" the example of ``{{ question.question_text }}``, first Django does a "
"dictionary lookup on the object ``question``. Failing that, it tries an "
"attribute lookup -- which works, in this case. If attribute lookup had "
"failed, it would've tried a list-index lookup."
msgstr ""

#: ../../intro/tutorial03.txt:525
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: "
"``question.choice_set.all`` is interpreted as the Python code "
"``question.choice_set.all()``, which returns an iterable of ``Choice`` "
"objects and is suitable for use in the :ttag:`{% for %}<for>` tag."
msgstr ""

#: ../../intro/tutorial03.txt:530
msgid ""
"See the `template guide "
"<https://docs.djangoproject.com/en/1.8/topics/templates>`_ for more about "
"templates."
msgstr ""

#: ../../intro/tutorial03.txt:533
msgid "Removing hardcoded URLs in templates"
msgstr ""

#: ../../intro/tutorial03.txt:535
msgid ""
"Remember, when we wrote the link to a question in the ``polls/index.html`` "
"template, the link was partially hardcoded like this:"
msgstr ""

#: ../../intro/tutorial03.txt:542
msgid ""
"The problem with this hardcoded, tightly-coupled approach is that it becomes"
" challenging to change URLs on projects with a lot of templates. However, "
"since you defined the name argument in the :func:`~django.conf.urls.url` "
"functions in the ``polls.urls`` module, you can remove a reliance on "
"specific URL paths defined in your url configurations by using the ``{% url "
"%}`` template tag:"
msgstr ""

#: ../../intro/tutorial03.txt:552
msgid ""
"The way this works is by looking up the URL definition as specified in the "
"``polls.urls`` module. You can see exactly where the URL name of 'detail' is"
" defined below::"
msgstr ""

#: ../../intro/tutorial03.txt:561
msgid ""
"If you want to change the URL of the polls detail view to something else, "
"perhaps to something like ``polls/specifics/12/`` instead of doing it in the"
" template (or templates) you would change it in ``polls/urls.py``::"
msgstr ""

#: ../../intro/tutorial03.txt:571
msgid "Namespacing URL names"
msgstr ""

#: ../../intro/tutorial03.txt:573
msgid ""
"The tutorial project has just one app, ``polls``. In real Django projects, "
"there might be five, ten, twenty apps or more. How does Django differentiate"
" the URL names between them? For example, the ``polls`` app has a ``detail``"
" view, and so might an app on the same project that is for a blog. How does "
"one make it so that Django knows which app view to create for a url when "
"using the ``{% url %}`` template tag?"
msgstr ""

#: ../../intro/tutorial03.txt:580
msgid ""
"The answer is to add namespaces to your root URLconf. In the "
"``mysite/urls.py`` file, go ahead and change it to include namespacing:"
msgstr ""

#: ../../intro/tutorial03.txt:594
msgid "Now change your ``polls/index.html`` template from:"
msgstr ""

#: ../../intro/tutorial03.txt:601
msgid "to point at the namespaced detail view:"
msgstr ""

#: ../../intro/tutorial03.txt:608
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

#: ../../intro/tutorial04.txt:31
msgid "A quick rundown:"
msgstr ""

#: ../../intro/tutorial04.txt:33
msgid ""
"The above template displays a radio button for each question choice. The "
"``value`` of each radio button is the associated question choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=#`` where # is the ID of the selected choice. This is the "
"basic concept of HTML forms."
msgstr ""

#: ../../intro/tutorial04.txt:40
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' question.id %}``, and "
"we set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to "
"``method=\"get\"``) is very important, because the act of submitting this "
"form will alter data server-side. Whenever you create a form that alters "
"data server-side, use ``method=\"post\"``. This tip isn't specific to "
"Django; it's just good Web development practice."
msgstr ""

#: ../../intro/tutorial04.txt:47
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

#: ../../intro/tutorial04.txt:50
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted"
" at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

#: ../../intro/tutorial04.txt:57
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line:"
msgstr ""

#: ../../intro/tutorial04.txt:66
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``:"
msgstr ""

#: ../../intro/tutorial04.txt:96
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

#: ../../intro/tutorial04.txt:98
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

#: ../../intro/tutorial04.txt:104
msgid ""
"Note that Django also provides :attr:`request.GET "
"<django.http.HttpRequest.GET>` for accessing GET data in the same way -- but"
" we're explicitly using :attr:`request.POST <django.http.HttpRequest.POST>` "
"in our code, to ensure that data is only altered via a POST call."
msgstr ""

#: ../../intro/tutorial04.txt:110
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the question form with an error message if ``choice`` isn't "
"given."
msgstr ""

#: ../../intro/tutorial04.txt:115
msgid ""
"After incrementing the choice count, the code returns an "
":class:`~django.http.HttpResponseRedirect` rather than a normal "
":class:`~django.http.HttpResponse`. "
":class:`~django.http.HttpResponseRedirect` takes a single argument: the URL "
"to which the user will be redirected (see the following point for how we "
"construct the URL in this case)."
msgstr ""

#: ../../intro/tutorial04.txt:122
msgid ""
"As the Python comment above points out, you should always return an "
":class:`~django.http.HttpResponseRedirect` after successfully dealing with "
"POST data. This tip isn't specific to Django; it's just good Web development"
" practice."
msgstr ""

#: ../../intro/tutorial04.txt:127
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the "
":class:`~django.http.HttpResponseRedirect` constructor in this example. This"
" function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the"
" URLconf we set up in Tutorial 3, this "
":func:`~django.core.urlresolvers.reverse` call will return a string like ::"
msgstr ""

#: ../../intro/tutorial04.txt:138
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""

#: ../../intro/tutorial04.txt:141
msgid ""
"As mentioned in Tutorial 3, ``request`` is a "
":class:`~django.http.HttpRequest` object. For more on "
":class:`~django.http.HttpRequest` objects, see the `request and response "
"documentation <https://docs.djangoproject.com/en/1.8/ref/request-"
"response>`_."
msgstr ""

#: ../../intro/tutorial04.txt:145
msgid ""
"After somebody votes in a question, the ``vote()`` view redirects to the "
"results page for the question. Let's write that view:"
msgstr ""

#: ../../intro/tutorial04.txt:158
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial"
" 3 </intro/tutorial03>`. The only difference is the template name. We'll fix"
" this redundancy later."
msgstr ""

#: ../../intro/tutorial04.txt:161
msgid "Now, create a ``polls/results.html`` template:"
msgstr ""

#: ../../intro/tutorial04.txt:176
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the question. You "
"should see a results page that gets updated each time you vote. If you "
"submit the form without having chosen a choice, you should see the error "
"message."
msgstr ""

#: ../../intro/tutorial04.txt:181
msgid "Use generic views: Less code is better"
msgstr ""

#: ../../intro/tutorial04.txt:183
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and "
"``results()`` views are very simple -- and, as mentioned above, redundant. "
"The ``index()`` view (also from Tutorial 3), which displays a list of polls,"
" is similar."
msgstr ""

#: ../../intro/tutorial04.txt:187
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

#: ../../intro/tutorial04.txt:192
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

#: ../../intro/tutorial04.txt:195
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete"
" a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

#: ../../intro/tutorial04.txt:199
msgid "Convert the URLconf."
msgstr ""

#: ../../intro/tutorial04.txt:201
msgid "Delete some of the old, unneeded views."
msgstr ""

#: ../../intro/tutorial04.txt:203
msgid "Introduce new views based on Django's generic views."
msgstr ""

#: ../../intro/tutorial04.txt:205
msgid "Read on for details."
msgstr ""

#: ../../intro/tutorial04.txt:207
msgid "Why the code-shuffle?"
msgstr ""

#: ../../intro/tutorial04.txt:209
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

#: ../../intro/tutorial04.txt:215
msgid "You should know basic math before you start using a calculator."
msgstr ""

#: ../../intro/tutorial04.txt:218
msgid "Amend URLconf"
msgstr ""

#: ../../intro/tutorial04.txt:220
msgid "First, open the ``polls/urls.py`` URLconf and change it like so:"
msgstr ""

#: ../../intro/tutorial04.txt:236
msgid ""
"Note that the name of the matched pattern in the regexes of the second and "
"third patterns has changed from ``<question_id>`` to ``<pk>``."
msgstr ""

#: ../../intro/tutorial04.txt:242
msgid "Amend views"
msgstr ""

#: ../../intro/tutorial04.txt:244
msgid ""
"Next, we're going to remove our old ``index``, ``detail``, and ``results`` "
"views and use Django's generic views instead. To do so, open the "
"``polls/views.py`` file and change it like so:"
msgstr ""

#: ../../intro/tutorial04.txt:281
msgid ""
"We're using two generic views here: "
":class:`~django.views.generic.list.ListView` and "
":class:`~django.views.generic.detail.DetailView`. Respectively, those two "
"views abstract the concepts of \"display a list of objects\" and \"display a"
" detail page for a particular type of object.\""
msgstr ""

#: ../../intro/tutorial04.txt:287
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` attribute."
msgstr ""

#: ../../intro/tutorial04.txt:290
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``question_id`` to ``pk`` for the generic views."
msgstr ""

#: ../../intro/tutorial04.txt:295
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it would use the template ``\"polls/question_detail.html\"``. The "
"``template_name`` attribute is used to tell Django to use a specific "
"template name instead of the autogenerated default template name. We also "
"specify the ``template_name`` for the ``results`` list view -- this ensures "
"that the results view and the detail view have a different appearance when "
"rendered, even though they're both a "
":class:`~django.views.generic.detail.DetailView` behind the scenes."
msgstr ""

#: ../../intro/tutorial04.txt:305
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use"
" ``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

#: ../../intro/tutorial04.txt:311
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``question`` and ``latest_question_list`` context "
"variables. For ``DetailView`` the ``question`` variable is provided "
"automatically -- since we're using a Django model (``Question``), Django is "
"able to determine an appropriate name for the context variable. However, for"
" ListView, the automatically generated context variable is "
"``question_list``. To override this we provide the ``context_object_name`` "
"attribute, specifying that we want to use ``latest_question_list`` instead. "
"As an alternative approach, you could change your templates to match the new"
" default context variables -- but it's a lot easier to just tell Django to "
"use the variable you want."
msgstr ""

#: ../../intro/tutorial04.txt:323
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

#: ../../intro/tutorial04.txt:325
msgid ""
"For full details on generic views, see the `generic views documentation "
"<https://docs.djangoproject.com/en/1.8/topics/class-based-views/index>`_."
msgstr ""

#: ../../intro/tutorial04.txt:327
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial </intro/tutorial05>` to learn about testing our polls app."
msgstr ""

#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail (*does a particular model method return values as expected?*) while "
"others examine the overall operation of the software (*does a sequence of "
"user inputs on the site produce the desired result?*). That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 "
"</intro/tutorial01>`, using the :djadmin:`shell` to examine the behavior of "
"a method, or running the application and entering data to check how it "
"behaves."
msgstr ""

#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual "
"testing."
msgstr ""

#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning "
"Python/Django, and having yet another thing to learn and do may seem "
"overwhelming and perhaps unnecessary. After all, our polls application is "
"working quite happily now; going through the trouble of creating automated "
"tests is not going to make it work any better. If creating the polls "
"application is the last bit of Django programming you will ever do, then "
"true, you don't need to know how to create automated tests. But, if that's "
"not the case, now is an excellent time to learn."
msgstr ""

#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of"
" writing tests, particularly when you know your code is working properly."
msgstr ""

#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a"
" newly-introduced problem."
msgstr ""

#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that"
" many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by "
"design.\""
msgstr ""

#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it"
" seriously is yet another reason for you to start writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer"
" maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it."
" Test-driven development simply formalizes the problem in a Python test "
"case."
msgstr ""

#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix"
" right away: the ``Question.was_published_recently()`` method returns "
"``True`` if the ``Question`` was published within the last day (which is "
"correct) but also if the ``Question``’s ``pub_date`` field is in the future "
"(which certainly isn't)."
msgstr ""

#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a question whose date lies in the "
"future; you'll see that the ``Question`` change list claims it was published"
" recently."
msgstr ""

#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the :djadmin:`shell` to test for the problem is "
"exactly what we can do in an automated test, so let's turn that into an "
"automated test."
msgstr ""

#: ../../intro/tutorial05.txt:159
msgid ""
"A conventional place for an application's tests is in the application's "
"``tests.py`` file; the testing system will automatically find tests in any "
"file whose name begins with ``test``."
msgstr ""

#: ../../intro/tutorial05.txt:163
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application:"
msgstr ""

#: ../../intro/tutorial05.txt:187
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Question`` instance with a ``pub_date`` in "
"the future. We then check the output of ``was_published_recently()`` - which"
" *ought* to be False."
msgstr ""

#: ../../intro/tutorial05.txt:193
msgid "Running tests"
msgstr ""

#: ../../intro/tutorial05.txt:195
msgid "In the terminal, we can run our test::"
msgstr ""

#: ../../intro/tutorial05.txt:199
msgid "and you'll see something like::"
msgstr ""

#: ../../intro/tutorial05.txt:217
msgid "What happened is this:"
msgstr ""

#: ../../intro/tutorial05.txt:219
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` "
"application"
msgstr ""

#: ../../intro/tutorial05.txt:221
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

#: ../../intro/tutorial05.txt:223
msgid "it created a special database for the purpose of testing"
msgstr ""

#: ../../intro/tutorial05.txt:225
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

#: ../../intro/tutorial05.txt:227
msgid ""
"in ``test_was_published_recently_with_future_question`` it created a "
"``Question`` instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

#: ../../intro/tutorial05.txt:230
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return"
" ``False``"
msgstr ""

#: ../../intro/tutorial05.txt:234
msgid ""
"The test informs us which test failed and even the line on which the failure"
" occurred."
msgstr ""

#: ../../intro/tutorial05.txt:238
msgid "Fixing the bug"
msgstr ""

#: ../../intro/tutorial05.txt:240
msgid ""
"We already know what the problem is: ``Question.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is"
" also in the past:"
msgstr ""

#: ../../intro/tutorial05.txt:252
msgid "and run the test again::"
msgstr ""

#: ../../intro/tutorial05.txt:262
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

#: ../../intro/tutorial05.txt:265
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply"
" running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

#: ../../intro/tutorial05.txt:271
msgid "More comprehensive tests"
msgstr ""

#: ../../intro/tutorial05.txt:273
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we"
" had introduced another."
msgstr ""

#: ../../intro/tutorial05.txt:277
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively:"
msgstr ""

#: ../../intro/tutorial05.txt:301
msgid ""
"And now we have three tests that confirm that "
"``Question.was_published_recently()`` returns sensible values for past, "
"recent, and future questions."
msgstr ""

#: ../../intro/tutorial05.txt:304
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

#: ../../intro/tutorial05.txt:309
msgid "Test a view"
msgstr ""

#: ../../intro/tutorial05.txt:311
msgid ""
"The polls application is fairly undiscriminating: it will publish any "
"question, including ones whose ``pub_date`` field lies in the future. We "
"should improve this. Setting a ``pub_date`` in the future should mean that "
"the Question is published at that moment, but invisible until then."
msgstr ""

#: ../../intro/tutorial05.txt:317
msgid "A test for a view"
msgstr ""

#: ../../intro/tutorial05.txt:319
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it"
" doesn't really matter in which order we do the work."
msgstr ""

#: ../../intro/tutorial05.txt:323
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a"
" user through a web browser."
msgstr ""

#: ../../intro/tutorial05.txt:327
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

#: ../../intro/tutorial05.txt:330
msgid "The Django test client"
msgstr ""

#: ../../intro/tutorial05.txt:332
msgid ""
"Django provides a test :class:`~django.test.Client` to simulate a user "
"interacting with the code at the view level.  We can use it in ``tests.py`` "
"or even in the :djadmin:`shell`."
msgstr ""

#: ../../intro/tutorial05.txt:336
msgid ""
"We will start again with the :djadmin:`shell`, where we need to do a couple "
"of things that won't be necessary in ``tests.py``. The first is to set up "
"the test environment in the :djadmin:`shell`::"
msgstr ""

#: ../../intro/tutorial05.txt:343
msgid ""
":meth:`~django.test.utils.setup_test_environment` installs a template "
"renderer which will allow us to examine some additional attributes on "
"responses such as ``response.context`` that otherwise wouldn't be available."
" Note that this method *does not* setup a test database, so the following "
"will be run against the existing database and the output may differ slightly"
" depending on what questions you already created."
msgstr ""

#: ../../intro/tutorial05.txt:350
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

#: ../../intro/tutorial05.txt:358
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

#: ../../intro/tutorial05.txt:391
msgid "Improving our view"
msgstr ""

#: ../../intro/tutorial05.txt:393
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

#: ../../intro/tutorial05.txt:396
msgid ""
"In :ref:`Tutorial 4 <tutorial04-amend-views>` we introduced a class-based "
"view, based on :class:`~django.views.generic.list.ListView`:"
msgstr ""

#: ../../intro/tutorial05.txt:410
msgid ""
"``response.context_data['latest_question_list']`` extracts the data this "
"view places into the context."
msgstr ""

#: ../../intro/tutorial05.txt:413
msgid ""
"We need to amend the ``get_queryset`` method and change it so that it also "
"checks the date by comparing it with ``timezone.now()``. First we need to "
"add an import:"
msgstr ""

#: ../../intro/tutorial05.txt:422
msgid "and then we must amend the ``get_queryset`` method like so:"
msgstr ""

#: ../../intro/tutorial05.txt:436
msgid ""
"``Question.objects.filter(pub_date__lte=timezone.now())`` returns a queryset"
" containing ``Question``\\s whose ``pub_date`` is less than or equal to - "
"that is, earlier than or equal to - ``timezone.now``."
msgstr ""

#: ../../intro/tutorial05.txt:441
msgid "Testing our new view"
msgstr ""

#: ../../intro/tutorial05.txt:443
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Questions`` with "
"dates in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our :djadmin:`shell` session above."
msgstr ""

#: ../../intro/tutorial05.txt:450
msgid "Add the following to ``polls/tests.py``:"
msgstr ""

#: ../../intro/tutorial05.txt:457
msgid ""
"and we'll create a shortcut function to create questions as well as a new "
"test class:"
msgstr ""

#: ../../intro/tutorial05.txt:533
msgid "Let's look at some of these more closely."
msgstr ""

#: ../../intro/tutorial05.txt:535
msgid ""
"First is a question shortcut function, ``create_question``, to take some "
"repetition out of the process of creating questions."
msgstr ""

#: ../../intro/tutorial05.txt:538
msgid ""
"``test_index_view_with_no_questions`` doesn't create any questions, but "
"checks the message: \"No polls are available.\" and verifies the "
"``latest_question_list`` is empty. Note that the "
":class:`django.test.TestCase` class provides some additional assertion "
"methods. In these examples, we use "
":meth:`~django.test.SimpleTestCase.assertContains()` and "
":meth:`~django.test.TransactionTestCase.assertQuerysetEqual()`."
msgstr ""

#: ../../intro/tutorial05.txt:545
msgid ""
"In ``test_index_view_with_a_past_question``, we create a question and verify"
" that it appears in the list."
msgstr ""

#: ../../intro/tutorial05.txt:548
msgid ""
"In ``test_index_view_with_a_future_question``, we create a question with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first question is no longer there, and so again the index shouldn't have"
" any questions in it."
msgstr ""

#: ../../intro/tutorial05.txt:553
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

#: ../../intro/tutorial05.txt:558
msgid "Testing the ``DetailView``"
msgstr ""

#: ../../intro/tutorial05.txt:560
msgid ""
"What we have works well; however, even though future questions don't appear "
"in the *index*, users can still reach them if they know or guess the right "
"URL. So we need to add a similar  constraint to ``DetailView``:"
msgstr ""

#: ../../intro/tutorial05.txt:575
msgid ""
"And of course, we will add some tests, to check that a ``Question`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not:"
msgstr ""

#: ../../intro/tutorial05.txt:608
msgid "Ideas for more tests"
msgstr ""

#: ../../intro/tutorial05.txt:610
msgid ""
"We ought to add a similar ``get_queryset`` method to ``ResultsView`` and "
"create a new test class for that view. It'll be very similar to what we have"
" just created; in fact there will be a lot of repetition."
msgstr ""

#: ../../intro/tutorial05.txt:614
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Questions`` can be published on the site"
" that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Questions``. Our tests would create a ``Question`` without "
"``Choices`` and then test that it's not published, as well as create a "
"similar ``Question`` *with* ``Choices``, and test that it *is* published."
msgstr ""

#: ../../intro/tutorial05.txt:621
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Questions``, but not ordinary visitors. Again: whatever needs to be added "
"to the software to accomplish this should be accompanied by a test, whether "
"you write the test first and then make the code pass the test, or work out "
"the logic in your code first and then write a test to prove it."
msgstr ""

#: ../../intro/tutorial05.txt:627
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

#: ../../intro/tutorial05.txt:631
msgid "When testing, more is better"
msgstr ""

#: ../../intro/tutorial05.txt:633
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

#: ../../intro/tutorial05.txt:637
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

#: ../../intro/tutorial05.txt:641
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Questions`` with ``Choices`` are published. In that case, many "
"of our existing tests will fail - *telling us exactly which tests need to be"
" amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

#: ../../intro/tutorial05.txt:646
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

#: ../../intro/tutorial05.txt:650
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable."
" Good rules-of-thumb include having:"
msgstr ""

#: ../../intro/tutorial05.txt:653
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

#: ../../intro/tutorial05.txt:654
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

#: ../../intro/tutorial05.txt:655
msgid "test method names that describe their function"
msgstr ""

#: ../../intro/tutorial05.txt:658
msgid "Further testing"
msgstr ""

#: ../../intro/tutorial05.txt:660
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great"
" deal more you can do, and a number of very useful tools at your disposal to"
" achieve some very clever things."
msgstr ""

#: ../../intro/tutorial05.txt:664
msgid ""
"For example, while our tests here have covered some of the internal logic of"
" a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your"
" site, as if a human being were driving it! Django includes "
":class:`~django.test.LiveServerTestCase` to facilitate integration with "
"tools like Selenium."
msgstr ""

#: ../../intro/tutorial05.txt:673
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

#: ../../intro/tutorial05.txt:677
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See `integration with "
"coverage.py <https://docs.djangoproject.com/en/1.8/topics/testing/advanced"
"/#topics-testing-code-coverage>`_ for details."
msgstr ""

#: ../../intro/tutorial05.txt:683
msgid ""
"`Testing in Django "
"<https://docs.djangoproject.com/en/1.8/topics/testing/index>`_ has "
"comprehensive information about testing."
msgstr ""

#: ../../intro/tutorial05.txt:692
msgid ""
"For full details on testing, see `Testing in Django "
"<https://docs.djangoproject.com/en/1.8/topics/testing/index>`_."
msgstr ""

#: ../../intro/tutorial05.txt:694
msgid ""
"When you're comfortable with testing Django views, read :doc:`part 6 of this"
" tutorial </intro/tutorial06>` to learn about static files management."
msgstr ""

#: ../../intro/tutorial06.txt:3
msgid "Writing your first Django app, part 6"
msgstr ""

#: ../../intro/tutorial06.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 5 </intro/tutorial05>` left off. "
"We've built a tested Web-poll application, and we'll now add a stylesheet "
"and an image."
msgstr ""

#: ../../intro/tutorial06.txt:9
msgid ""
"Aside from the HTML generated by the server, web applications generally need"
" to serve additional files — such as images, JavaScript, or CSS — necessary "
"to render the complete web page. In Django, we refer to these files as "
"\"static files\"."
msgstr ""

#: ../../intro/tutorial06.txt:14
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

#: ../../intro/tutorial06.txt:20
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

#: ../../intro/tutorial06.txt:25
msgid "Customize your *app's* look and feel"
msgstr ""

#: ../../intro/tutorial06.txt:27
msgid ""
"First, create a directory called ``static`` in your ``polls`` directory. "
"Django will look for static files there, similarly to how Django finds "
"templates inside ``polls/templates/``."
msgstr ""

#: ../../intro/tutorial06.txt:31
msgid ""
"Django's :setting:`STATICFILES_FINDERS` setting contains a list of finders "
"that know how to discover static files from various sources. One of the "
"defaults is ``AppDirectoriesFinder`` which looks for a \"static\" "
"subdirectory in each of the :setting:`INSTALLED_APPS`, like the one in "
"``polls`` we just created. The admin site uses the same directory structure "
"for its static files."
msgstr ""

#: ../../intro/tutorial06.txt:38
msgid ""
"Within the ``static`` directory you have just created, create another "
"directory called ``polls`` and within that create a file called "
"``style.css``. In other words, your stylesheet should be at "
"``polls/static/polls/style.css``. Because of how the "
"``AppDirectoriesFinder`` staticfile finder works, you can refer to this "
"static file in Django simply as ``polls/style.css``, similar to how you "
"reference the path for templates."
msgstr ""

#: ../../intro/tutorial06.txt:45
msgid "Static file namespacing"
msgstr ""

#: ../../intro/tutorial06.txt:47
msgid ""
"Just like templates, we *might* be able to get away with putting our static "
"files directly in ``polls/static`` (rather than creating another ``polls`` "
"subdirectory), but it would actually be a bad idea. Django will choose the "
"first static file it finds whose name matches, and if you had a static file "
"with the same name in a *different* application, Django would be unable to "
"distinguish between them. We need to be able to point Django at the right "
"one, and the easiest way to ensure this is by *namespacing* them. That is, "
"by putting those static files inside *another* directory named for the "
"application itself."
msgstr ""

#: ../../intro/tutorial06.txt:57
msgid ""
"Put the following code in that stylesheet "
"(``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:66
msgid ""
"Next, add the following at the top of ``polls/templates/polls/index.html``:"
msgstr ""

#: ../../intro/tutorial06.txt:75
msgid ""
"``{% load staticfiles %}`` loads the :ttag:`{% static %} <staticfiles-"
"static>` template tag from the ``staticfiles`` template library. The ``{% "
"static %}`` template tag generates the absolute URL of the static file."
msgstr ""

#: ../../intro/tutorial06.txt:79
msgid ""
"That's all you need to do for development. Reload "
"``http://localhost:8000/polls/`` and you should see that the question links "
"are green (Django style!) which means that your stylesheet was properly "
"loaded."
msgstr ""

#: ../../intro/tutorial06.txt:84
msgid "Adding a background-image"
msgstr ""

#: ../../intro/tutorial06.txt:86
msgid ""
"Next, we'll create a subdirectory for images. Create an ``images`` "
"subdirectory in the ``polls/static/polls/`` directory. Inside this "
"directory, put an image called ``background.gif``. In other words, put your "
"image in ``polls/static/polls/images/background.gif``."
msgstr ""

#: ../../intro/tutorial06.txt:91
msgid "Then, add to your stylesheet (``polls/static/polls/style.css``):"
msgstr ""

#: ../../intro/tutorial06.txt:100
msgid ""
"Reload ``http://localhost:8000/polls/`` and you should see the background "
"loaded in the bottom right of the screen."
msgstr ""

#: ../../intro/tutorial06.txt:105
msgid ""
"Of course the ``{% static %}`` template tag is not available for use in "
"static files like your stylesheet which aren't generated by Django. You "
"should always use **relative paths** to link your static files between each "
"other, because then you can change :setting:`STATIC_URL` (used by the "
":ttag:`static` template tag to generate its URLs) without having to modify a"
" bunch of paths in your static files as well."
msgstr ""

#: ../../intro/tutorial06.txt:112
msgid ""
"These are the **basics**. For more details on settings and other bits "
"included with the framework see `the static files howto "
"<https://docs.djangoproject.com/en/1.8/howto/static-files/index>`_ and `the "
"staticfiles reference "
"<https://docs.djangoproject.com/en/1.8/ref/contrib/staticfiles>`_. "
"`Deploying static files <https://docs.djangoproject.com/en/1.8/howto/static-"
"files/deployment>`_ discusses how to use static files on a real server."
msgstr ""

#: ../../intro/tutorial06.txt:122
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here "
"</intro/whatsnext>`."
msgstr ""

#: ../../intro/tutorial06.txt:125
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps </intro/reusable-apps>`."
msgstr ""

#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word, you've "
"read about 5% of the overall documentation)."
msgstr ""

#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to"
" read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 450,000 words and counting "
"-- so finding what you need can sometimes be tricky. A few good places to "
"start are the search and the genindex."
msgstr ""

#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

#: ../../intro/whatsnext.txt:43
msgid ""
"The `topic guides <https://docs.djangoproject.com/en/1.8/topics/index>`_, on"
" the other hand, dive deep into individual parts of Django. There are "
"complete guides to Django's `model system "
"<https://docs.djangoproject.com/en/1.8/topics/db/index>`_, `template engine "
"<https://docs.djangoproject.com/en/1.8/topics/templates>`_, `forms framework"
" <https://docs.djangoproject.com/en/1.8/topics/forms/index>`_, and much "
"more."
msgstr ""

#: ../../intro/whatsnext.txt:48
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

#: ../../intro/whatsnext.txt:52
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of `how-to guides "
"<https://docs.djangoproject.com/en/1.8/howto/index>`_ that answer common "
"\"How do I ...?\" questions. Here you'll find information about `generating "
"PDFs with Django <https://docs.djangoproject.com/en/1.8/howto/outputting-"
"pdf>`_, `writing custom template tags "
"<https://docs.djangoproject.com/en/1.8/howto/custom-template-tags>`_, and "
"more."
msgstr ""

#: ../../intro/whatsnext.txt:58
msgid ""
"Answers to really common questions can also be found in the `FAQ "
"<https://docs.djangoproject.com/en/1.8/faq/index>`_."
msgstr ""

#: ../../intro/whatsnext.txt:60
msgid ""
"The guides and how-to's don't cover every single class, function, and method"
" available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the `reference "
"<https://docs.djangoproject.com/en/1.8/ref/index>`_. This is where you'll "
"turn to find the details of a particular function or whatever you need."
msgstr ""

#: ../../intro/whatsnext.txt:67
msgid ""
"If you are interested in deploying a project for public use, our docs have "
"`several guides "
"<https://docs.djangoproject.com/en/1.8/howto/deployment/index>`_ for various"
" deployment setups as well as a `deployment checklist "
"<https://docs.djangoproject.com/en/1.8/howto/deployment/checklist>`_ for "
"some things you'll need to think about."
msgstr ""

#: ../../intro/whatsnext.txt:72
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the `release notes "
"<https://docs.djangoproject.com/en/1.8/releases/index>`_ and `internals "
"documentation <https://docs.djangoproject.com/en/1.8/internals/index>`_ for "
"those who want to add code to Django itself, and a `few other things that "
"simply don't fit elsewhere "
"<https://docs.djangoproject.com/en/1.8/misc/index>`_."
msgstr ""

#: ../../intro/whatsnext.txt:80
msgid "How documentation is updated"
msgstr ""

#: ../../intro/whatsnext.txt:82
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our"
" documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

#: ../../intro/whatsnext.txt:86
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

#: ../../intro/whatsnext.txt:88
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

#: ../../intro/whatsnext.txt:91
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

#: ../../intro/whatsnext.txt:94
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

#: ../../intro/whatsnext.txt:97
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `docs`_ directory of our Git repository. Each document"
" online is a separate text file in the repository."
msgstr ""

#: ../../intro/whatsnext.txt:104
msgid "Where to get it"
msgstr ""

#: ../../intro/whatsnext.txt:106
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

#: ../../intro/whatsnext.txt:110
msgid "On the Web"
msgstr ""

#: ../../intro/whatsnext.txt:112
msgid ""
"The most recent version of the Django documentation lives at "
"https://docs.djangoproject.com/en/dev/. These HTML pages are generated "
"automatically from the text files in source control. That means they reflect"
" the \"latest and greatest\" in Django -- they include the very latest "
"corrections and additions, and they discuss the latest Django features, "
"which may only be available to users of the Django development version. (See"
" \"Differences between versions\" below.)"
msgstr ""

#: ../../intro/whatsnext.txt:120
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections"
" and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation"
" for everybody."
msgstr ""

#: ../../intro/whatsnext.txt:124
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list "
"<http://groups.google.com/group/django-users/>`_ mailing list or the "
"`#django IRC channel`_ instead."
msgstr ""

#: ../../intro/whatsnext.txt:133
msgid "In plain text"
msgstr ""

#: ../../intro/whatsnext.txt:135
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

#: ../../intro/whatsnext.txt:138
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the"
" documentation for that release."
msgstr ""

#: ../../intro/whatsnext.txt:142
msgid ""
"If you're using the development version of Django (aka \"trunk\"), note that"
" the ``docs/`` directory contains all of the documentation. You can update "
"your Git checkout to get the latest changes."
msgstr ""

#: ../../intro/whatsnext.txt:146
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

#: ../../intro/whatsnext.txt:156
msgid "As HTML, locally"
msgstr ""

#: ../../intro/whatsnext.txt:158
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

#: ../../intro/whatsnext.txt:160
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

#: ../../intro/whatsnext.txt:168
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into "
"HTML:"
msgstr ""

#: ../../intro/whatsnext.txt:176
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

#: ../../intro/whatsnext.txt:178
msgid ""
"If you're on Windows you can alternatively use the included batch file:"
msgstr ""

#: ../../intro/whatsnext.txt:185
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

#: ../../intro/whatsnext.txt:189
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

#: ../../intro/whatsnext.txt:198
msgid "Differences between versions"
msgstr ""

#: ../../intro/whatsnext.txt:200
msgid ""
"As previously mentioned, the text documentation in our Git repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Git (\"trunk\") version of Django. For that reason, it's "
"worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

#: ../../intro/whatsnext.txt:207
msgid "We follow this policy:"
msgstr ""

#: ../../intro/whatsnext.txt:209
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Git. These docs always correspond to the latest official "
"Django release, plus whatever features we've added/changed in the framework "
"*since* the latest release."
msgstr ""

#: ../../intro/whatsnext.txt:214
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Git commit transaction."
msgstr ""

#: ../../intro/whatsnext.txt:217
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

#: ../../intro/whatsnext.txt:221
msgid ""
"Documentation fixes and improvements may be backported to the last release "
"branch, at the discretion of the committer, however, once a version of "
"Django is `no longer supported "
"<https://docs.djangoproject.com/en/1.8/internals/release-process/#backwards-"
"compatibility-policy>`_, that version of the docs won't get any further "
"updates."
msgstr ""

#: ../../intro/whatsnext.txt:226
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions. Be sure you are using the version of the docs "
"corresponding to the version of Django you are using!"
msgstr ""
