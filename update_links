#! /usr/bin/env python

import os
import re


BASE_URL = 'https://docs.djangoproject.com/en/1.7'
DOCS_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'intro'))
RE_INTERNAL_LINK = re.compile(r':doc:`(.*?)\s*(?:<(.*?)>)?`', re.DOTALL)
RE_REFERENCE_LINK = re.compile(r':ref:`(.*?)\s*(?:<(.*?)>)?`', re.DOTALL)

REFERENCES = {
    'running-unit-tests-dependencies': (
        'Running all the tests',
        '/internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies'),
    'running-unit-tests': (
        'Running the unit tests',
        '/internals/contributing/writing-code/unit-tests/#running-unit-tests'),
    'running-unit-tests-settings': (
        'run the tests using a different database',
        '/internals/contributing/writing-code/unit-tests/#running-unit-tests-settings'),
    'template-loaders': (
        'template loader documentation',
        '/ref/templates/api/#template-loaders'),
    'database-installation': (
        'database installation information',
        '/topics/install/#database-installation'),
    'removing-old-versions-of-django': (
        'uninstall the old Django version before installing the new version',
        '/topics/install/#removing-old-versions-of-django'),
    'installing-official-release': (
        'Install an official release',
        '/topics/install/#installing-official-release'),
    'installing-development-version': (
        'Install the latest development version',
        '/topics/install/#installing-development-version'),
    'installing-reusable-apps-prerequisites': (
        'how to install Django with pip',
        '/topics/install/#installing-official-release'),
    'backwards-compatibility-policy': (
        'no longer supported',
        '/internals/release-process/#backwards-compatibility-policy'),
    'howto-writing-custom-template-filters': (
        'custom template filters',
        '/howto/custom-template-tags/#howto-writing-custom-template-filters'),
    'troubleshooting-django-admin-py': (
        'Problems running django-admin.py',
        '/faq/troubleshooting/#troubleshooting-django-admin-py'),
    'third-party-notes': (
        'also available',
        '/ref/databases/#third-party-notes'),
    'dry': (
        'DRY Principle',
        '/misc/design-philosophies/#dry'),
    'field-lookups-intro': (
        'Field lookups',
        '/topics/db/queries/#field-lookups-intro'),
    'topics-testing-code-coverage': (
        'integration with coverage.py',
        '/topics/testing/advanced/#topics-testing-code-coverage'),
}


ALIASES = {
    '|django-users|': '`django-users mailing list <http://groups.google.com/group/django-users/>`_',
    '|django-developers|': '`django-developers <https://docs.djangoproject.com/en/dev/internals/mailing-lists/#django-developers-mailing-list>`_',
}

def update_internal_link(match):
    label, href = match.groups()
    if not href:
        href = label

    if href.startswith('/intro/'):
        return ':doc:`%s <%s>`' % (label, href)
    else:
        return '`%s <%s%s>`_' % (label, BASE_URL, href)


def update_reference_link(match):
    label, href = match.groups()
    if not href:
        href = label

    ref = REFERENCES.get(href)
    if ref is not None:
        label = ref[0] if label == href else label
        return '`%s <%s%s>`_' % (label, BASE_URL, ref[1])
    else:
        return label


for doc_file in os.listdir(DOCS_DIR):
    filename = os.path.join(DOCS_DIR, doc_file)
    if not os.path.isfile(filename):
        continue

    with open(filename, 'r') as doc:
        data = doc.read()

    data = RE_INTERNAL_LINK.sub(update_internal_link, data)
    data = RE_REFERENCE_LINK.sub(update_reference_link, data)

    for alias, replace in ALIASES.iteritems():
        data = data.replace(alias, replace)

    with open(filename, 'w') as doc:
        doc.write(data)
